<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-30T13:04:46.123Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Angel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板字面量</title>
    <link href="http://yoursite.com/2019/08/30/%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    <id>http://yoursite.com/2019/08/30/模板字面量/</id>
    <published>2019-08-30T08:10:03.000Z</published>
    <updated>2019-08-30T13:04:46.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是模板字面量"><a href="#什么是模板字面量" class="headerlink" title="什么是模板字面量"></a>什么是模板字面量</h2><p>模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为“模板字符串”。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`string text`</span>  <span class="comment">// 相当于普通字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text line 1</span></span><br><span class="line"><span class="string"> string text line 2`</span> <span class="comment">// 多行字符串  </span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span>  <span class="comment">// 带有占位符</span></span><br><span class="line"></span><br><span class="line">tag <span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span></span><br></pre></td></tr></table></figure><p>模板字符串使用反引号 (<code></code>) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\）。</p><p>在模板字符串中，不需要转义单双引号</p><h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`abc  </span></span><br><span class="line"><span class="string">def`</span>);            </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line">abc</span><br><span class="line">def</span><br></pre></td></tr></table></figure><p>注意：</p><p>在两个反引号之间的所有空白字符串都是有效的，都属于字符串的一部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`abc</span></span><br><span class="line"><span class="string">             def`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">abc</span><br><span class="line">             def</span><br></pre></td></tr></table></figure><p>因此我们可以考虑使用第一行留白的方法来对齐缩进文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string">    abc</span></span><br><span class="line"><span class="string">    def</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">    abc</span><br><span class="line">    def</span><br></pre></td></tr></table></figure><p>当然我们也可以使用\n在模板字符串中显示换行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`abc\ndef`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">abc</span><br><span class="line">def</span><br></pre></td></tr></table></figure><h2 id="字符串占位符"><a href="#字符串占位符" class="headerlink" title="字符串占位符"></a>字符串占位符</h2><p>在一个模板字面量中，你可以任何合法的JavaScript表达式嵌入到占位符中并将其作为字符串中的一部分输出到结果中去</p><p>占位符由${}组成，中间可以包含任意的表达式</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">'ming'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// My name is ming</span></span><br></pre></td></tr></table></figure><p>除了变量，占位符还可以嵌入其他表达式，包括运算式、函数调用等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`ming`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;getName()&#125;</span>`</span>); <span class="comment">// My name is ming</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="string">'xiao'</span>+<span class="string">'ming'</span>&#125;</span>`</span>); <span class="comment">// My name is xiaoming</span></span><br></pre></td></tr></table></figure><h2 id="嵌套模板"><a href="#嵌套模板" class="headerlink" title="嵌套模板"></a>嵌套模板</h2><p>模板字面量本身也是Js表达式，所以你可以在任意一个模板字面量里嵌入另外一个模板字面量</p><p>注意：</p><p>是另外一个模板字面量而不是占位符，即：<br>应该是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;&#125;</span>`</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`&amp;&#123;&amp;&#123;&#125;&#125;`</span> <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="number">2</span>&gt;<span class="number">1</span>?<span class="string">`<span class="subst">$&#123;<span class="number">2</span>&gt;<span class="number">1</span>?<span class="string">'yes'</span>:<span class="string">'no'</span>&#125;</span>`</span>:<span class="string">'no'</span><span class="string">`) // 'yes'</span></span></span></span><br></pre></td></tr></table></figure><h2 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h2><p>更高级的形式的模板字符串是带标签的模板字符串。标签使您可以用函数解析模板字符串。标签函数的第一个参数包含一个字符串值的数组。其余的参数与表达式相关。最后，你的函数可以返回处理好的的字符串（或者它可以返回完全不同的东西，）。用于该标签的函数的名称可以被命名为任何名字。</p><h3 id="定义标签"><a href="#定义标签" class="headerlink" title="定义标签"></a>定义标签</h3><p>标签可以是一个函数，其函数名可以任意（符合变量命名规则）</p><p>标签函数语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">literals,...substitutions</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数解释</p><p><strong>literals</strong>: <br>该参数是一个字符串数组，其包括模板字面量中占位符之前，之后，以及之间的字符串</p><p>例如，对于模板字符串<br><code>${girlName},my name is ${boyName}</code><br>则，其数组为[‘’,’,my name is ‘,’’]</p><p><strong>substitutions</strong>:<br>该参数是模板字符串中所有占位符结果的值，例如以上模板字符串，则数组应该为${girlName}的值和${boyName}的值</p><p>注意</p><blockquote><p>不难发现,literals数组的长度永远比substitutions数组长度多1</p></blockquote><h3 id="标签模板例子"><a href="#标签模板例子" class="headerlink" title="标签模板例子"></a>标签模板例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">literals,...sub</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(literals,sub);</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> sub) &#123;</span><br><span class="line">        ans+=literals[i];</span><br><span class="line">        ans+=sub[i];</span><br><span class="line">    &#125; </span><br><span class="line">    ans+=literals[literals.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name=<span class="string">'ming'</span>;</span><br><span class="line"><span class="keyword">let</span> mes=tag<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(mes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="string">'my name is '</span>, <span class="string">''</span> ] [ <span class="string">'ming'</span> ]</span><br><span class="line">my name is ming</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是模板字面量&quot;&gt;&lt;a href=&quot;#什么是模板字面量&quot; class=&quot;headerlink&quot; title=&quot;什么是模板字面量&quot;&gt;&lt;/a&gt;什么是模板字面量&lt;/h2&gt;&lt;p&gt;模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-226 翻转二叉树</title>
    <link href="http://yoursite.com/2019/08/30/leetcode-226/"/>
    <id>http://yoursite.com/2019/08/30/leetcode-226/</id>
    <published>2019-08-30T02:58:46.000Z</published>
    <updated>2019-08-30T03:06:41.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>翻转一棵二叉树。</p><p>示例：</p><p>输入：</p><p><img src="https://s2.ax1x.com/2019/08/30/mOqPHO.png" alt></p><p>输出：</p><p><img src="https://s2.ax1x.com/2019/08/30/mOqFED.png" alt></p><p>备注:<br>这个问题是受到 Max Howell 的 原问题 启发的 ：</p><p>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/invert-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/invert-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>翻转二叉树，可以利用深度优先遍历，对于二叉树来说也就是先序遍历；在遍历的同时交换其左右子树</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>如果节点为空，那么返回null</li><li>否则，交换其左右子树</li><li>递归遍历左右子树</li><li>重复1,2,3步骤直到整颗二叉树遍历完毕</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> empty=root.left;</span><br><span class="line">        root.left=root.right;</span><br><span class="line">        root.right=empty;</span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;翻转二叉树&quot;&gt;&lt;a href=&quot;#翻转二叉树&quot; class=&quot;headerlink&quot; title=&quot;翻转二叉树&quot;&gt;&lt;/a&gt;翻转二叉树&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;翻转一棵二叉树。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/30/mOqPHO.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/30/mOqFED.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;备注:&lt;br&gt;这个问题是受到 Max Howell 的 原问题 启发的 ：&lt;/p&gt;
&lt;p&gt;谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数组扁平化</title>
    <link href="http://yoursite.com/2019/08/29/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>http://yoursite.com/2019/08/29/数组扁平化/</id>
    <published>2019-08-29T03:20:03.000Z</published>
    <updated>2019-08-29T10:19:32.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><p>数组的扁平化，就是将一个嵌套多层的数组按照给定深度转化为原本深度减去给定深度的数组</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat()); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><h2 id="flat-方法"><a href="#flat-方法" class="headerlink" title="flat()方法"></a>flat()方法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>var newArray = arr.flat(depth)</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>depth(可选)</p><p>指定要提取嵌套数组的结构深度，默认值为1</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个包含数组与子数组所有元素的新数组</p><h2 id="实现数组扁平化flat-方法"><a href="#实现数组扁平化flat-方法" class="headerlink" title="实现数组扁平化flat()方法"></a>实现数组扁平化flat()方法</h2><h3 id="利用递归实现"><a href="#利用递归实现" class="headerlink" title="利用递归实现"></a>利用递归实现</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>根据给定深度遍历，那么我们需要知道每一层数组的深度。当遍历每一层数组时，若遇到了内一层的数组，那么对该数组再执行Flat函数，也就是进行递归；若不是，则放入ans数组</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flat</span>(<span class="params">arr,depth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr,dep</span>)</span>&#123;</span><br><span class="line">        dep++;</span><br><span class="line">        <span class="keyword">if</span>(dep&gt;depth) &#123;ans.push(arr);<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">                flat(arr[i],dep);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]) ans.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(arr,<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Flat([<span class="number">1</span>,<span class="number">2</span>, ,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]],[<span class="number">7</span>,<span class="number">8</span>,[<span class="number">9</span>,<span class="number">10</span>,[<span class="number">11</span>,<span class="number">12</span>]]]],<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, [ <span class="number">11</span>, <span class="number">12</span> ] ]</span><br></pre></td></tr></table></figure><h3 id="利用reduce方法实现"><a href="#利用reduce方法实现" class="headerlink" title="利用reduce方法实现"></a>利用reduce方法实现</h3><p>reduce方法就是遍历原数组，将每个元素利用concat方法进行拼接。因为concat方法进行拼接时会将被拼接的数组的最外层数组去掉，只取得内部的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flat</span>(<span class="params">arr,depth</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr,dep</span>) </span>&#123;</span><br><span class="line">        dep++;</span><br><span class="line">        <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep&gt;=depth) &#123;</span><br><span class="line">                <span class="keyword">return</span> pre.concat(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur)?pre.concat(flat(cur,dep)):pre.concat(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,[])</span><br><span class="line">    &#125;)(arr,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Flat([<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>]]]],<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [ <span class="number">7</span>, <span class="number">8</span> ] ]</span><br></pre></td></tr></table></figure><h3 id="利用toString-方法实现"><a href="#利用toString-方法实现" class="headerlink" title="利用toString()方法实现"></a>利用toString()方法实现</h3><p>使用toString()方法我目前能想到的好像只能将数组完全扁平化到一维数组，而不能根据给定深度来扁平化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.toString().split(<span class="string">','</span>).map(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">parseInt</span>(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Flat([<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]</span><br></pre></td></tr></table></figure><h3 id="使用展开运算符…"><a href="#使用展开运算符…" class="headerlink" title="使用展开运算符…"></a>使用展开运算符…</h3><p>类似于使用reduce配合concat,但是还是离不开递归</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组扁平化&quot;&gt;&lt;a href=&quot;#数组扁平化&quot; class=&quot;headerlink&quot; title=&quot;数组扁平化&quot;&gt;&lt;/a&gt;数组扁平化&lt;/h2&gt;&lt;p&gt;数组的扁平化，就是将一个嵌套多层的数组按照给定深度转化为原本深度减去给定深度的数组&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-566 重塑矩阵</title>
    <link href="http://yoursite.com/2019/08/29/leetcode-566/"/>
    <id>http://yoursite.com/2019/08/29/leetcode-566/</id>
    <published>2019-08-29T03:00:07.000Z</published>
    <updated>2019-08-29T03:06:35.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重塑矩阵"><a href="#重塑矩阵" class="headerlink" title="重塑矩阵"></a>重塑矩阵</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。</p><p>给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。</p><p>重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。</p><p>如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p><p>示例 1:</p><blockquote><p>输入:\<br>nums = <br>[[1,2],<br> [3,4]]<br>r = 1, c = 4<br>输出: <br>[[1,2,3,4]]<br>解释:<br>行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。</p></blockquote><p>示例 2:</p><blockquote><p>输入: <br>nums = <br>[[1,2],<br> [3,4]]<br>r = 2, c = 4<br>输出: <br>[[1,2],<br> [3,4]]<br>解释:<br>没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。</p></blockquote><p>注意：</p><ol><li>给定矩阵的宽和高范围在 [1, 100]。</li><li>给定的 r 和 c 都是正数。<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reshape-the-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reshape-the-matrix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>重塑矩阵，意思也就是将原先的n<em>m矩阵转化为题目要求的r</em>c矩阵；一种思路是我们在遍历数组的所有元素的时候就插入到r<em>c新矩阵中；另一种思路是，将整个二维数组扁平化为一维数组，然后再转化为新的r</em>c矩阵</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>将数组扁平化</li><li>转化为r*c矩阵</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; r</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; c</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> matrixReshape = <span class="function"><span class="keyword">function</span>(<span class="params">nums, r, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    <span class="keyword">let</span> numsFlat=nums.flat();</span><br><span class="line">    <span class="keyword">if</span>(r*c!==numsFlat.length) <span class="keyword">return</span> nums;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;r;i++) &#123;</span><br><span class="line">            ans[i]=[];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;c;k++) &#123;</span><br><span class="line">                ans[i].push(numsFlat.shift());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重塑矩阵&quot;&gt;&lt;a href=&quot;#重塑矩阵&quot; class=&quot;headerlink&quot; title=&quot;重塑矩阵&quot;&gt;&lt;/a&gt;重塑矩阵&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。&lt;/p&gt;
&lt;p&gt;给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。&lt;/p&gt;
&lt;p&gt;重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。&lt;/p&gt;
&lt;p&gt;如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入:\&lt;br&gt;nums = &lt;br&gt;[[1,2],&lt;br&gt; [3,4]]&lt;br&gt;r = 1, c = 4&lt;br&gt;输出: &lt;br&gt;[[1,2,3,4]]&lt;br&gt;解释:&lt;br&gt;行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: &lt;br&gt;nums = &lt;br&gt;[[1,2],&lt;br&gt; [3,4]]&lt;br&gt;r = 2, c = 4&lt;br&gt;输出: &lt;br&gt;[[1,2],&lt;br&gt; [3,4]]&lt;br&gt;解释:&lt;br&gt;没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给定矩阵的宽和高范围在 [1, 100]。&lt;/li&gt;
&lt;li&gt;给定的 r 和 c 都是正数。
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Javascript与简单正则表达式</title>
    <link href="http://yoursite.com/2019/08/28/Javascript%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/28/Javascript与正则表达式/</id>
    <published>2019-08-28T08:01:01.000Z</published>
    <updated>2019-08-30T03:17:51.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><h2 id="Js怎么支持正则表达式"><a href="#Js怎么支持正则表达式" class="headerlink" title="Js怎么支持正则表达式"></a>Js怎么支持正则表达式</h2><p>Es是通过RegExp类型来支持正则表达式。</p><h3 id="怎么创建正则表达式"><a href="#怎么创建正则表达式" class="headerlink" title="怎么创建正则表达式"></a>怎么创建正则表达式</h3><h4 id="使用正则表达式字面量"><a href="#使用正则表达式字面量" class="headerlink" title="使用正则表达式字面量"></a>使用正则表达式字面量</h4><p>语法</p><blockquote><p>let pat=/pattern/flags</p></blockquote><p>其中,pattern部分是正则表达式，而flags部分是标志，可以是0或多个，其中标志包括下列三种：</p><ol><li>g: 表示全局模式，即模式将被应用到所有的字符串，而非在发现第一个匹配项时就立刻停止；若没有该标志，则表示该模式时在发现第一个匹配项时就立刻停止</li><li>i: 表示不区分大小写模式，即在确定匹配项时忽略模式与字符串的大小写</li><li>m: 表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否存在于模式匹配的项</li></ol><h4 id="使用RegExp构造函数创建"><a href="#使用RegExp构造函数创建" class="headerlink" title="使用RegExp构造函数创建"></a>使用RegExp构造函数创建</h4><p>语法</p><blockquote><p>let re=new RegExp(“pattern”,”flags”);</p></blockquote><p>其中，pattern与flags意义同上</p><h3 id="正则表达式的一些相关重要方法"><a href="#正则表达式的一些相关重要方法" class="headerlink" title="正则表达式的一些相关重要方法"></a>正则表达式的一些相关重要方法</h3><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h4><p>exec()方法是专门为捕获组而设计的。exec()接受一个参数，即要应用模式的字符串，然后返回包括第一个匹配项信息的数组；或者在没有匹配的情况下返回null</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.oog(pattern.exec(str)); <span class="comment">// [ 'cat', index: 0, input: 'cat pat hat', groups: undefined ]</span></span><br></pre></td></tr></table></figure><h4 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h4><p>test()方法接受一个字符串参数。在模式与该参数匹配的情况下返回true;否则，返回false。经常被用于if判断语句</p><p>只要在字符串中存在某字符串能够匹配正则表达式的模式，那么就会返回true</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="String-match-方法"><a href="#String-match-方法" class="headerlink" title="String.match()方法"></a>String.match()方法</h4><p>match() 方法检索返回一个字符串匹配正则表达式的的结果。</p><p>语法：</p><blockquote><p>str.match(regexp);</p></blockquote><p>参数：</p><p>regexp:<br>一个正则表达式对象。如果传入的是一个非正则表达式对象，则会隐式地使用new RegExp(obj)将其转化为一个正则表达式对象。如果没有给定任何参数，那么则会返回一个空数组</p><p>返回值：</p><ol><li>如果使用g标志，那么则返回所有与正则表达式匹配的结果(Array)，但不会返回捕获组；或者没有匹配项返回null</li><li>如果不使用g标志，那么则返回第一个完整匹配及相关的捕获组。</li></ol><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pat','hat']</span></span><br></pre></td></tr></table></figure><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符是正则表达式的基本组成元素。</p><p>具体元字符如下：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配除了换行符以外的任意字符</td></tr><tr><td>[]</td><td>匹配方括号中的任意一个字符,可以使用连字符’-‘来表示范围，例如 [a,b,c]可以表示为[a-c]</td></tr><tr><td>[^]</td><td>上一个的反状态，即匹配除了括号内的任意一个字符</td></tr><tr><td>{n,m}</td><td>匹配前面的字符[n,m]次，即至少n次，但是不超过m次</td></tr><tr><td>(xyz)</td><td>相当于四则运算中常用的小括号，解释为按照确切的顺序来匹配字符xyz</td></tr><tr><td>|</td><td>分支结构，匹配符号之前的字符或后面的字符</td></tr><tr><td>\</td><td>转义符，它可以还原元字符原来的含义，允许你匹配保留元字符</td></tr><tr><td>*</td><td>匹配前面的子表达式0次或多次</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次</td></tr><tr><td>?</td><td>匹配前面的子表达式0次或一次，或指定一个非贪婪限定符</td></tr><tr><td>^</td><td>匹配行的开始</td></tr><tr><td>$</td><td>匹配行的结束</td></tr><tr><td>\d</td><td>表示[0-9]，即1位数字</td></tr><tr><td>\D</td><td>表示除数字外的任意字符</td></tr><tr><td>\w</td><td>表示[0-9a-zA-z_]，即数字、大小写字母或下划线</td></tr><tr><td>\W</td><td>表示非单词字符，\w的对立</td></tr><tr><td>\s</td><td>表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符</td></tr><tr><td>\S</td><td>非空白符</td></tr></tbody></table><p>如果想要匹配任意字符，根据以上元字符可以使用</p><ol><li>\d|\D 或 [\d\D]</li><li>\w|\W 或 [\w\W]</li><li>\s|\S 或 [\s\S]</li><li>[^]</li></ol><h3 id="元字符详解与例子"><a href="#元字符详解与例子" class="headerlink" title="元字符详解与例子"></a>元字符详解与例子</h3><h4 id="元字符-1"><a href="#元字符-1" class="headerlink" title="元字符 ."></a>元字符 .</h4><p>元字符.可以用来匹配除了换行符之外的所有单个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pat','hat']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-2"><a href="#元字符-2" class="headerlink" title="元字符 []"></a>元字符 []</h4><p>元字符 []用来匹配方括号内的任意一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/[cph]at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pat','hat']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-3"><a href="#元字符-3" class="headerlink" title="元字符 [^]"></a>元字符 [^]</h4><p>元字符 [^]用来匹配除了方括号内字符的任意一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/[^cph]at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="元字符-n-m"><a href="#元字符-n-m" class="headerlink" title="元字符 {n,m}"></a>元字符 {n,m}</h4><p>元字符 {n,m}用来匹配该元字符的前一个字符[n,m]次（即至少n次但不超过m次）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.a&#123;1,2&#125;t/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat paat haaat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','paat','aaat']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-xyz"><a href="#元字符-xyz" class="headerlink" title="元字符 (xyz)"></a>元字符 (xyz)</h4><p>元字符 (xyz)我觉得其实相当于四则运算中的小括号，先执行小括号内的部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.(a|b|c)t/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pbt hct'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pbt','hct']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-4"><a href="#元字符-4" class="headerlink" title="元字符 |"></a>元字符 |</h4><p>元字符 | 用来定义分支结构，分支结构就是相当于或运算。即要么执行元字符之前的字符要么执行之后的字符或者都不；</p><p>注意： 该元字符类似于或运算具有短路操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.(a|b|c)t/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pbt hct'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pbt','hct']</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/good|goodbye/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'good goodbye'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['good','good']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元字符 | 类似或运算具有短路操作，当前面的字符成立时就不会执行元字符之后的字符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码中，str字符串中的第一个'good'字符串满足正则表达式模式中的'good'，而后一个'goodbye'字符串虽然也满足'goodbye'，但是它先满足元字符之前的字符'good'，因此该运算被短路了，所以只返回了'good'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/goodbye|good/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'good goodbye'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['good','goodbye']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-5"><a href="#元字符-5" class="headerlink" title="元字符 \"></a>元字符 \</h4><p>元字符 \用来转义它的下一个字符。这将允许你使用保留字符来作为匹配元字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at\./g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat\ pat/ hat.'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['hat.']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-6"><a href="#元字符-6" class="headerlink" title="元字符 *"></a>元字符 *</h4><p>元字符 *用来匹配上一个匹配规则的0次或多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/zk*/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zk z zkkk'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// [ 'zk', 'z', 'zkkk' ]</span></span><br></pre></td></tr></table></figure><h4 id="元字符-7"><a href="#元字符-7" class="headerlink" title="元字符 +"></a>元字符 +</h4><p>元字符 +用来匹配上一个字符的一次或多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/zk+/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zk z zkkk'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// [ 'zk','zkkk' ]</span></span><br></pre></td></tr></table></figure><h4 id="元字符-8"><a href="#元字符-8" class="headerlink" title="元字符 ?"></a>元字符 ?</h4><p>元字符 ?用来匹配前一个字符的0次或一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/zk?/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zk z zkkk'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// [ 'zk','z','zk' ]</span></span><br></pre></td></tr></table></figure><h4 id="元字符-9"><a href="#元字符-9" class="headerlink" title="元字符 ^"></a>元字符 ^</h4><p>元字符 ^用来检查匹配字符是否是输入字符串的第一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/(T|t)he/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['The','the']</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/^(T|t)he/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['The']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-10"><a href="#元字符-10" class="headerlink" title="元字符 $"></a>元字符 $</h4><p>元字符 $用来检查匹配字符是否是输入字符串的最后一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.he/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['The','the']</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.he$/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['the']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-190 颠倒二进制位</title>
    <link href="http://yoursite.com/2019/08/28/leetcode-190/"/>
    <id>http://yoursite.com/2019/08/28/leetcode-190/</id>
    <published>2019-08-28T02:09:31.000Z</published>
    <updated>2019-08-28T02:38:06.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="颠倒二进制位"><a href="#颠倒二进制位" class="headerlink" title="颠倒二进制位"></a>颠倒二进制位</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>颠倒给定的 32 位无符号整数的二进制位。</p><p>示例 1：</p><blockquote><p>输入: 00000010100101000001111010011100<br>输出: 00111001011110000010100101000000<br>解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，<br>      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。</p></blockquote><p>示例 2：</p><blockquote><p>输入：11111111111111111111111111111101<br>输出：10111111111111111111111111111111<br>解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，<br>      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。</p></blockquote><p>提示：</p><ol><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</li></ol><p>进阶:<br>如果多次调用这个函数，你将如何优化你的算法？</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-bits</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>输入的会是一个无符号整数可以转化为32位二进制表示；要求输出的是反转该32位二进制并转化为整数输出</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>利用模二取余法得到32位二进制数</li><li>将32位二进制数反转后转化为整数并返回</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125; - a positive integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> s=[];</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        s.unshift(n%<span class="number">2</span>);</span><br><span class="line">        n=<span class="built_in">Math</span>.floor(n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(s.length&lt;<span class="number">32</span>) &#123;</span><br><span class="line">        s.unshift(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.reduce(<span class="function">(<span class="params">pre,cur,curIndex</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre+cur*<span class="built_in">Math</span>.pow(<span class="number">2</span>,curIndex);</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;颠倒二进制位&quot;&gt;&lt;a href=&quot;#颠倒二进制位&quot; class=&quot;headerlink&quot; title=&quot;颠倒二进制位&quot;&gt;&lt;/a&gt;颠倒二进制位&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;颠倒给定的 32 位无符号整数的二进制位。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 00000010100101000001111010011100&lt;br&gt;输出: 00111001011110000010100101000000&lt;br&gt;解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，&lt;br&gt;      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：11111111111111111111111111111101&lt;br&gt;输出：10111111111111111111111111111111&lt;br&gt;解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，&lt;br&gt;      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。&lt;/li&gt;
&lt;li&gt;在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进阶:&lt;br&gt;如果多次调用这个函数，你将如何优化你的算法？&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>全局变量的声明以及如何避免声明全局变量</title>
    <link href="http://yoursite.com/2019/08/27/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%A3%B0%E6%98%8E%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/08/27/全局变量的声明以及如何避免声明全局变量/</id>
    <published>2019-08-27T09:33:17.000Z</published>
    <updated>2019-08-27T10:03:43.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局变量的声明"><a href="#全局变量的声明" class="headerlink" title="全局变量的声明"></a>全局变量的声明</h2><blockquote><p>全局变量会成为全局对象的属性</p></blockquote><p>那种方式的变量声明会形成全局变量呢？</p><p>Javascript运行环境分为浏览器环境和非浏览器环境（比如Node.js）</p><p>在浏览器环境中,有三种方式可以声明全局变量</p><ol><li>使用var关键字在全局作用域下显示声明</li><li>不适用任何声明关键字(var,let,const)直接给变量赋值，这属于隐式声明</li><li>使用全局对象作为其属性来声明</li></ol><p>浏览器环境中（全局对象为window对象）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">window</span>.c=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="built_in">window</span>.a); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b===<span class="built_in">window</span>.b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>但是，在Node.js中，上述方法中的方法2就不成立</p><p>Node.js环境（全局对象为global对象)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line">global.c=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a===global.a); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b===global.b); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(c===global.c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="如何避免声明全局变量"><a href="#如何避免声明全局变量" class="headerlink" title="如何避免声明全局变量"></a>如何避免声明全局变量</h2><p>使用let与const声明关键字</p><p>如果你在全局作用域中使用let或const来声明变量，那么会在全局作用域下创建一个新的绑定，但该绑定不会添加为全局对象的属性。</p><p>换句话说，用let或const不能覆盖全局变量，而只能遮蔽它</p><p>浏览器环境中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2 全局对象的属性a被var声明修改了</span></span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="built_in">window</span>.a); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(b===<span class="built_in">window</span>.b); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// b不是全局变量，因为使用let声明的b没有成为全局对象的属性</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果不想为全局变量创建属性或修改全局变量的属性，那么使用let和const要安全的多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;全局变量的声明&quot;&gt;&lt;a href=&quot;#全局变量的声明&quot; class=&quot;headerlink&quot; title=&quot;全局变量的声明&quot;&gt;&lt;/a&gt;全局变量的声明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;全局变量会成为全局对象的属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Js中的字符与Unicode编码操作</title>
    <link href="http://yoursite.com/2019/08/27/Js%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%8EUnicode%E7%BC%96%E7%A0%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/08/27/Js中的字符与Unicode编码操作/</id>
    <published>2019-08-27T05:48:20.000Z</published>
    <updated>2019-08-27T06:33:35.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符转化为Unicode编码"><a href="#字符转化为Unicode编码" class="headerlink" title="字符转化为Unicode编码"></a>字符转化为Unicode编码</h2><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>charAt() 方法从一个字符串中返回指定的字符。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p>str.charAt(index)</p></blockquote><p>参数：</p><p>index: <br>一个介于0和字符转长度减1之间的整数。即0~str.length-1。如果没有提供索引值，那么index默认为0，即第一位</p><p>返回值：</p><p>返回值是一个根据给定索引的指定字符；如果，给定值超过了上述的要求范围（0~str.length-1），那么该方法返回一个空字符串</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt()); <span class="comment">// 'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>)); <span class="comment">// 'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">2</span>)); <span class="comment">// 'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">7</span>)); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>charCodeAt()方法 返回给定索引处（String中index索引处）字符的 UTF-16 代码单元值的数字</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><blockquote><p>str.charCodeAt(index)</p></blockquote><p>参数</p><p>index:<br>一个大于等于0，小于字符串长度的整数。如果不是一个数值，则默认为0</p><p>返回值</p><p>返回值是一表示给定索引处（String中index索引处）字符的 UTF-16 代码单元值的数字；如果索引超出范围，则返回 NaN。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1=<span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.charCodeAt()); <span class="comment">// 97</span></span><br><span class="line"><span class="keyword">let</span> str2=<span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str2.charCodeAt(<span class="number">0</span>)); <span class="comment">// 97</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.charCodeAt(<span class="number">1</span>)); <span class="comment">// 98</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.charCodeAt(<span class="number">7</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="Unicode编码转化为字符"><a href="#Unicode编码转化为字符" class="headerlink" title="Unicode编码转化为字符"></a>Unicode编码转化为字符</h2><h3 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>静态 String.fromCharCode() 方法返回由指定的UTF-16代码单元序列创建的字符串。</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><blockquote><p>String.fromCharCode(num1, …, numN)</p></blockquote><p>参数</p><p>num1, …, numN<br>一系列UTF-16代码单元的数字。 范围介于0到65535（0xFFFF）之间。 大于0xFFFF的数字将被截断。 不进行有效性检查。 </p><p>返回值</p><p>一个长度为N的字符串，由N个指定的UTF-16代码单元组成；如果不给定参数，那么则返回空字符串</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">97</span>)); <span class="string">'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>)) <span class="comment">// 'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode()); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符转化为Unicode编码&quot;&gt;&lt;a href=&quot;#字符转化为Unicode编码&quot; class=&quot;headerlink&quot; title=&quot;字符转化为Unicode编码&quot;&gt;&lt;/a&gt;字符转化为Unicode编码&lt;/h2&gt;&lt;h3 id=&quot;charAt&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-168 Excel表列名称</title>
    <link href="http://yoursite.com/2019/08/27/leetcode-168/"/>
    <id>http://yoursite.com/2019/08/27/leetcode-168/</id>
    <published>2019-08-27T05:28:36.000Z</published>
    <updated>2019-08-27T06:38:41.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Excel表列名称"><a href="#Excel表列名称" class="headerlink" title="Excel表列名称"></a>Excel表列名称</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个正整数，返回它在 Excel 表中相对应的列名称。</p><p>例如，</p><pre><code>1 -&gt; A2 -&gt; B3 -&gt; C...26 -&gt; Z27 -&gt; AA28 -&gt; AB ...</code></pre><p>示例 1:</p><blockquote><p>输入: 1<br>输出: “A”</p></blockquote><p>示例 2:</p><blockquote><p>输入: 28<br>输出: “AB”</p></blockquote><p>示例 3:</p><blockquote><p>输入: 701<br>输出: “ZY”</p></blockquote><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/excel-sheet-column-title" target="_blank" rel="noopener">https://leetcode-cn.com/problems/excel-sheet-column-title</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>题目要求的是1~26对应的是A~Z，然而如果使用进制来表示的话，我们一般习惯使用0开始的。因此，我们可以用0~25来表示A~Z；这样，我们之后在利用类似二进制中的模二取余法时就可以避免遇到余数0没有对应值的问题。</p><p>那么，对于输入值，每次取余时我们就应该讲值减去一之后再进行取余。这样就可以将0~25对应到输入值</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>建立哈希表，将0<del>25作为键，对应到A</del>Z的键值</li><li>使用类似二进制的模二取余法，将给定值取余；每次取余先将值减一；取得的余数放入unshift入队列数组中</li><li>遍历队列数组，从哈希表中取出对应的键值，添加到字符串ans中</li><li>返回ans</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convertToTitle = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> queue=[];</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) &#123;</span><br><span class="line">        map.set(i,<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        n--;</span><br><span class="line">        queue.unshift(n%<span class="number">26</span>);</span><br><span class="line">        n=<span class="built_in">Math</span>.floor(n/<span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    queue.forEach(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">        ans+=map.get(value);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span>  ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Excel表列名称&quot;&gt;&lt;a href=&quot;#Excel表列名称&quot; class=&quot;headerlink&quot; title=&quot;Excel表列名称&quot;&gt;&lt;/a&gt;Excel表列名称&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个正整数，返回它在 Excel 表中相对应的列名称。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 -&amp;gt; A
2 -&amp;gt; B
3 -&amp;gt; C
...
26 -&amp;gt; Z
27 -&amp;gt; AA
28 -&amp;gt; AB 
...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 1&lt;br&gt;输出: “A”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 28&lt;br&gt;输出: “AB”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 701&lt;br&gt;输出: “ZY”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-811 子域名访问计数</title>
    <link href="http://yoursite.com/2019/08/26/leetcode-811/"/>
    <id>http://yoursite.com/2019/08/26/leetcode-811/</id>
    <published>2019-08-26T15:09:12.000Z</published>
    <updated>2019-08-27T05:31:57.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子域名访问计数"><a href="#子域名访问计数" class="headerlink" title="子域名访问计数"></a>子域名访问计数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个网站域名，如”discuss.leetcode.com”，包含了多个子域名。作为顶级域名，常用的有”com”，下一级则有”leetcode.com”，最低的一级为”discuss.leetcode.com”。当我们访问域名”discuss.leetcode.com”时，也同时访问了其父域名”leetcode.com”以及顶级域名 “com”。</p><p>给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：”9001 discuss.leetcode.com”。</p><p>接下来会给出一组访问次数和域名组合的列表cpdomains 。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。</p><p>示例 1:</p><blockquote><p>输入: <br>[“9001 discuss.leetcode.com”]<br>输出: <br>[“9001 discuss.leetcode.com”, “9001 leetcode.com”, “9001 com”]<br>说明: <br>例子中仅包含一个网站域名：”discuss.leetcode.com”。按照前文假设，子域名”leetcode.com”和”com”都会被访问，所以它们都被访问了9001次。</p></blockquote><p>示例 2</p><blockquote><p>输入: <br>[“900 google.mail.com”, “50 yahoo.com”, “1 intel.mail.com”, “5 wiki.org”]<br>输出: <br>[“901 mail.com”,”50 yahoo.com”,”900 google.mail.com”,”5 wiki.org”,”5 org”,”1 intel.mail.com”,”951 com”]<br>说明: <br>按照假设，会访问”google.mail.com” 900次，”yahoo.com” 50次，”intel.mail.com” 1次，”wiki.org” 5次。<br>而对于父域名，会访问”mail.com” 900+1 = 901次，”com” 900 + 50 + 1 = 951次，和 “org” 5 次。</p></blockquote><p>注意事项：</p><ol><li>cpdomains 的长度小于 100。</li><li>每个域名的长度小于100。</li><li>每个域名地址包含一个或两个”.”符号。</li><li>输入中任意一个域名的访问次数都小于10000。<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/subdomain-visit-count" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subdomain-visit-count</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>题目给定包含一系列域名和访问次数的字符串数组。对于每个域名字符串，我们可以从后往前遍历该字符串，当遇到’.’或者到达最前端时，将’.’之后部分或全部字符串放入哈希表中并存放次数；当遇到，哈希表中已经存在该键时，则更新该键值</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>建立哈希表以及ans数组</li><li>遍历字符串数组，取当前字符串赋为s</li><li>将s分为次数count和域名domains两部分</li><li>遍历domains字符串。当遇到’.’或者到达最前端时，将’.’之后部分或全部字符串放入哈希表中并存放次数；当遇到，哈希表中已经存在该键时，则更新该键值</li><li>重复3、4直到字符串数组遍历完毕</li><li>遍历哈希表，将键值和键名合成字符串放入ans数组中</li><li>返回ans</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; cpdomains</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subdomainVisits = <span class="function"><span class="keyword">function</span>(<span class="params">cpdomains</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cpdomains.length===<span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cpdomains.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> s=cpdomains[i];</span><br><span class="line">        <span class="keyword">let</span> count=s.split(<span class="string">' '</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> domains=s.split(<span class="string">' '</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> k=domains.length<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(domains[k]===<span class="string">'.'</span>||k===<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> domain;</span><br><span class="line">                <span class="keyword">if</span>(k===<span class="number">0</span>) &#123;</span><br><span class="line">                    domain=domains.slice(k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> domain=domains.slice(k+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(!map.has(domain)) &#123;</span><br><span class="line">                    map.set(domain,<span class="built_in">parseInt</span>(count));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.set(domain,map.get(domain)+<span class="built_in">parseInt</span>(count));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">        ans.push(value+<span class="string">' '</span>+key);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;子域名访问计数&quot;&gt;&lt;a href=&quot;#子域名访问计数&quot; class=&quot;headerlink&quot; title=&quot;子域名访问计数&quot;&gt;&lt;/a&gt;子域名访问计数&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;一个网站域名，如”discuss.leetcode.com”，包含了多个子域名。作为顶级域名，常用的有”com”，下一级则有”leetcode.com”，最低的一级为”discuss.leetcode.com”。当我们访问域名”discuss.leetcode.com”时，也同时访问了其父域名”leetcode.com”以及顶级域名 “com”。&lt;/p&gt;
&lt;p&gt;给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：”9001 discuss.leetcode.com”。&lt;/p&gt;
&lt;p&gt;接下来会给出一组访问次数和域名组合的列表cpdomains 。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: &lt;br&gt;[“9001 discuss.leetcode.com”]&lt;br&gt;输出: &lt;br&gt;[“9001 discuss.leetcode.com”, “9001 leetcode.com”, “9001 com”]&lt;br&gt;说明: &lt;br&gt;例子中仅包含一个网站域名：”discuss.leetcode.com”。按照前文假设，子域名”leetcode.com”和”com”都会被访问，所以它们都被访问了9001次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: &lt;br&gt;[“900 google.mail.com”, “50 yahoo.com”, “1 intel.mail.com”, “5 wiki.org”]&lt;br&gt;输出: &lt;br&gt;[“901 mail.com”,”50 yahoo.com”,”900 google.mail.com”,”5 wiki.org”,”5 org”,”1 intel.mail.com”,”951 com”]&lt;br&gt;说明: &lt;br&gt;按照假设，会访问”google.mail.com” 900次，”yahoo.com” 50次，”intel.mail.com” 1次，”wiki.org” 5次。&lt;br&gt;而对于父域名，会访问”mail.com” 900+1 = 901次，”com” 900 + 50 + 1 = 951次，和 “org” 5 次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cpdomains 的长度小于 100。&lt;/li&gt;
&lt;li&gt;每个域名的长度小于100。&lt;/li&gt;
&lt;li&gt;每个域名地址包含一个或两个”.”符号。&lt;/li&gt;
&lt;li&gt;输入中任意一个域名的访问次数都小于10000。
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-160 相交链表</title>
    <link href="http://yoursite.com/2019/08/25/leetcode-160/"/>
    <id>http://yoursite.com/2019/08/25/leetcode-160/</id>
    <published>2019-08-25T08:07:06.000Z</published>
    <updated>2019-08-25T08:27:18.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个程序，找到两个单链表相交的起始节点。</p><p>如下面的两个链表：</p><p><img src="https://s2.ax1x.com/2019/08/25/mgImSU.png" alt></p><p>在节点 c1 开始相交。</p><p>示例 1：</p><p><img src="https://s2.ax1x.com/2019/08/25/mgIVYV.png" alt></p><blockquote><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Reference of the node with value = 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p></blockquote><p>示例 2：</p><p><img src="https://s2.ax1x.com/2019/08/25/mgIZWT.png" alt></p><blockquote><p>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Reference of the node with value = 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p></blockquote><p>示例 3：</p><p><img src="https://s2.ax1x.com/2019/08/25/mgIEF0.png" alt></p><blockquote><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p></blockquote><p>注意：</p><ol><li>如果两个链表没有交点，返回 null.</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>因为题目要求使用O(1)内存，那么显然就不能使用多余的数组。并且程序尽量满足O(n)时间复杂度。因此，解法有二：</p><ol><li><strong>哈希表法</strong> 哈希表的内存占用为O(1)，遍历第一条链表，将链表内的所有节点存入哈希表中。再遍历第二条链表，如果遇到某节点存在于哈希表中，那么就将结果返回</li><li><strong>双指针</strong> 创建两个指针 pA 和 pB，分别初始化为链表 A 和 B 的头结点。然后让它们向后逐结点遍历。<br>当 pA 到达链表的尾部时，将它重定位到链表 B 的头结点 (你没看错，就是链表 B); 类似的，当 pB 到达链表的尾部时，将它重定位到链表 A 的头结点。<br>若在某一时刻 pApA 和 pBpB 相遇，则 pApA/pBpB 为相交结点。（原因如下，若两链表相交，那么相交部分加上两链表之前未相交部分的和是一定的。那么若能相交，这样子移动指针必能相遇）</li></ol><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><h3 id="coding实现"><a href="#coding实现" class="headerlink" title="coding实现"></a>coding实现</h3><p>哈希表法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; headA</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; headB</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> cur=headA;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        map.set(cur,<span class="number">1</span>);</span><br><span class="line">        cur=cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur=headB;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.has(cur)) <span class="keyword">return</span> cur;</span><br><span class="line">        cur=cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>双指针法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; headA</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; headB</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> top=headA;</span><br><span class="line">    <span class="keyword">let</span> down=headB;</span><br><span class="line">    <span class="keyword">let</span> bool=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;down) &#123;</span><br><span class="line">        <span class="keyword">if</span>(top===down) <span class="keyword">return</span> top;</span><br><span class="line">        <span class="keyword">if</span>(top.next===<span class="literal">null</span>) &#123;</span><br><span class="line">            top=headB;</span><br><span class="line">            bool=!bool;</span><br><span class="line">            <span class="keyword">if</span>(bool===<span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            top=top.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(down.next===<span class="literal">null</span>) &#123;</span><br><span class="line">            down=headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            down=down.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;相交链表&quot;&gt;&lt;a href=&quot;#相交链表&quot; class=&quot;headerlink&quot; title=&quot;相交链表&quot;&gt;&lt;/a&gt;相交链表&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;编写一个程序，找到两个单链表相交的起始节点。&lt;/p&gt;
&lt;p&gt;如下面的两个链表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/25/mgImSU.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;在节点 c1 开始相交。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/25/mgIVYV.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3&lt;br&gt;输出：Reference of the node with value = 8&lt;br&gt;输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/25/mgIZWT.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1&lt;br&gt;输出：Reference of the node with value = 2&lt;br&gt;输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/25/mgIEF0.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2&lt;br&gt;输出：null&lt;br&gt;输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。&lt;br&gt;解释：这两个链表不相交，因此返回 null。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果两个链表没有交点，返回 null.&lt;/li&gt;
&lt;li&gt;在返回结果后，两个链表仍须保持原有的结构。&lt;/li&gt;
&lt;li&gt;可假定整个链表结构中没有循环。&lt;/li&gt;
&lt;li&gt;程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-268 缺失数字</title>
    <link href="http://yoursite.com/2019/08/24/leetcode-268/"/>
    <id>http://yoursite.com/2019/08/24/leetcode-268/</id>
    <published>2019-08-24T13:52:00.000Z</published>
    <updated>2019-08-24T14:08:31.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缺失数字"><a href="#缺失数字" class="headerlink" title="缺失数字"></a>缺失数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</p><p>示例 1:</p><blockquote><p>输入: [3,0,1]<br>输出: 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: [9,6,4,2,3,5,7,0,1]<br>输出: 8</p></blockquote><p>说明:<br>你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/missing-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/missing-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>第一种方法是将数组排序后再遍历，如果某个数与下标不相同的话，那么那个下标就是缺失的数</li><li>第二种方法是利用哈希表，在第一次遍历数组时将值记录在哈希表中。然后从0遍历到n，查看每个数是否在哈希表中，若无，则是缺失的数</li><li>第三种方法，是将0~n的和减去数组的和就是缺失的数</li><li>第四种方法，利用位运算（待补充）</li></ol><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>步骤易懂，直接贴代码</p><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><p>第一种方法：排序遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> missingNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!==nums[i]) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第二种方法：哈希表存值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> missingNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        map.set(nums[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.has(i)) <span class="keyword">return</span> i;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第三种方法：数组求和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> missingNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum=nums.reduce(<span class="function">(<span class="params">pre,value</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre+value;</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">0</span>+nums.length)*(nums.length+<span class="number">1</span>)/<span class="number">2</span>)-sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第四种方法：位运算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缺失数字&quot;&gt;&lt;a href=&quot;#缺失数字&quot; class=&quot;headerlink&quot; title=&quot;缺失数字&quot;&gt;&lt;/a&gt;缺失数字&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [3,0,1]&lt;br&gt;输出: 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [9,6,4,2,3,5,7,0,1]&lt;br&gt;输出: 8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明:&lt;br&gt;你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-121 买卖股票的最佳时机</title>
    <link href="http://yoursite.com/2019/08/23/leetcode-121/"/>
    <id>http://yoursite.com/2019/08/23/leetcode-121/</id>
    <published>2019-08-23T12:29:06.000Z</published>
    <updated>2019-08-23T12:44:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p>示例 1:</p><blockquote><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p></blockquote><p>示例 2:</p><blockquote><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>如果使用暴力解法，对每一天作为买入天进行遍历，再遍历每一天的后面的几天，找到差值最大的天数，这样就会有O(n^2)的时间复杂度。那么，一次遍历可以解决吗？</p><p>当然，我们换一种思路，加入第一次遍历不把它当做买入天，而是当做卖出天。那么，我们只要找到当前天之前的那几天中价格最小的即可。而这最小价格，我们可以设定一个min，在遍历中不断改变。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>设定min为第一天价格，最大差值max=0</li><li>从第二天开始遍历，因为卖出天需要在买入天之后，如果当前天的股票价格大于min，那么求得差价与max比较，赋予max较大值；若小于min，那么将当日股票价格赋予min</li><li>循环结束，返回max</li></ol><h3 id="coding实现"><a href="#coding实现" class="headerlink" title="coding实现"></a>coding实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min=prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices[i]&gt;min) &#123;</span><br><span class="line">            max=max&gt;prices[i]-min?max:prices[i]-min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> min=prices[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;买卖股票的最佳时机&quot;&gt;&lt;a href=&quot;#买卖股票的最佳时机&quot; class=&quot;headerlink&quot; title=&quot;买卖股票的最佳时机&quot;&gt;&lt;/a&gt;买卖股票的最佳时机&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。&lt;/p&gt;
&lt;p&gt;注意你不能在买入股票前卖出股票。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [7,1,5,3,6,4]&lt;br&gt;输出: 5&lt;br&gt;解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [7,6,4,3,1]&lt;br&gt;输出: 0&lt;br&gt;解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-119</title>
    <link href="http://yoursite.com/2019/08/22/leetcode-119/"/>
    <id>http://yoursite.com/2019/08/22/leetcode-119/</id>
    <published>2019-08-22T08:51:54.000Z</published>
    <updated>2019-08-22T08:58:11.126Z</updated>
    
    <content type="html"><![CDATA[<p>题目类似与leetcode-118 杨辉三角</p><p>不解释，直接上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; rowIndex</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getRow = <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr=[[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=rowIndex;i++) &#123;</span><br><span class="line">      arr[i]=[];</span><br><span class="line">      arr[i][<span class="number">0</span>]=arr[i][i]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">1</span>;k&lt;i;k++) &#123;</span><br><span class="line">        arr[i][k]=arr[i<span class="number">-1</span>][k<span class="number">-1</span>]+arr[i<span class="number">-1</span>][k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> arr[rowIndex];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目类似与leetcode-118 杨辉三角&lt;/p&gt;
&lt;p&gt;不解释，直接上代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/2019/08/22/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2019/08/22/闭包/</id>
    <published>2019-08-22T02:27:14.000Z</published>
    <updated>2019-08-22T08:34:35.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>闭包，实际上也是个函数，只不过他的外部被另外一个函数包围。因此，在一个函数内部创建另一个函数，就会产生闭包。</p><p>红宝书是这么定义的：</p><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数</p></blockquote><p>那么这段话又该如何理解？</p><p>执行环境分为全局执行环境和局部执行环境。全局执行环境永远存在于某条作用域链的最末端。那么，局部执行环境呢？当进入某个函数时，该函数的局部执行环境就会被压入环境栈，同时会生成一个存储当前环境所有变量、函数的活动对象。</p><p>因此，在一个函数中创建了另外一个函数，那么内部那个函数的作用域链上就包含了外部函数的活动对象，而该活动对象又具有其作用域中的所有的变量</p><p>来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()(); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>我们首先在全局作用域下创建了一个test函数，在当前作用域中定义了a变量为1；然后在内部定义了一个新的匿名函数并返回；</p><p>从输出上，我们很容易就能验证闭包的特性。闭包的作用域链包含着自己的作用域，以及外部函数的作用域直到全局作用域</p><h2 id="定时器与闭包"><a href="#定时器与闭包" class="headerlink" title="定时器与闭包"></a>定时器与闭包</h2><p>我们经常可以看到这样的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); <span class="comment">// 10个10 后输出</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i'</span>,i); <span class="comment">// i 10 先输出</span></span><br></pre></td></tr></table></figure><p>初学者们一般都会以为会按照0~9的顺序依次输出，然而并不是，它会打印出10个10.</p><p>那么，这又是为什么呢？</p><p>定时器的作用是当定时器到期时，会执行传入定时器的函数；</p><p>我们往该函数中传入了一个新的匿名函数去打印i；那么对于该段代码，定时器中的匿名函数会在全局作用中被执行。因袭该匿名函数的作用域链会是其自身的作用域以及全局作用域</p><p>我们需要注意的是，在定时器开始启动之前，这10次循环已经结束了，相当于已经创建了10个还未执行的定时器，于此同时i已经变为了10</p><p>在执行定时器时，也就是每1000毫秒要去执行一次匿名函数。匿名函数就会顺着作用域去寻找i，那么，显然它会在全局作用域中找到i为10，所以也就会输出10个10了</p><p>那么如果我们顺着作用域链查找的思路稍微修改一下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        i=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(i); <span class="comment">// 10个1 后输出</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i'</span>,i); <span class="comment">// i 10 先输出</span></span><br></pre></td></tr></table></figure><p>显然，查找作用域链时在自身作用域中就找到了i，因此不会再向上查找位于全局作用域的i</p><h3 id="定时器函数的优化"><a href="#定时器函数的优化" class="headerlink" title="定时器函数的优化"></a>定时器函数的优化</h3><p>我们已经发现了以上那个函数并不能达到想要的效果。本质上是因为作用域链的缘故。</p><p>那么使用es6的let就可以解决这个问题</p><p>let会将当前变量的作用域限制在当前代码块内，因此，上面的10次循环就会形成10个作用域，每一个函数都能够查找到正确的i</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); <span class="comment">// 0~9 </span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行以上代码会是如下情形</span></span><br><span class="line"></span><br><span class="line">&#123;i=<span class="number">0</span>;setTimeout();&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#123;i=<span class="number">9</span>;setTimeout();&#125;</span><br></pre></td></tr></table></figure><p>如果，此时在全局作用域下去执行console.log(i)；会报出错误i为定义。因为，全局作用下并没有定义i</p><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><p>闭包的主要应用是设计私有变量</p><p>任何在函数中定义的变量，都可以被认为是私有变量，因为不能在函数外部访问这些变量。</p><p>私有变量包括函数的参数，局部变量和在函数内部定义的其他函数</p><p>然而，闭包可以通过自身的作用域链访问到这些私有变量。因此我们经常利用闭包来创建用于访问私有变量的共有方法，又被称之为特权方法。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 私有变量</span></span><br><span class="line">    <span class="keyword">let</span> rigion=<span class="string">'Hang Zhou'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特权方法</span></span><br><span class="line">    <span class="keyword">this</span>.get=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rigion;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ming=<span class="keyword">new</span> Person(<span class="string">'ming'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ming); <span class="comment">// Person &#123; get: [Function] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ming.get()); <span class="comment">// Hang Zhou</span></span><br><span class="line">consoel.log(ming.rigion); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这个Person构造函数不同于一般的构造函数，一般的构造函数会像下例一样声明属性与方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 公有属性</span></span><br><span class="line">    <span class="keyword">this</span>.rigion=<span class="string">'Hang Zhou'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ming=<span class="keyword">new</span> Person(<span class="string">'ming'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ming.rigion); <span class="comment">// 'Hang Zhou'</span></span><br><span class="line">ming.rigion=<span class="string">'Shang Hai'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ming.rigion); <span class="comment">// 'Shang Hai'</span></span><br><span class="line"><span class="comment">// 此时rigion属性是公有属性，实例化之后可以直接访问和修改</span></span><br></pre></td></tr></table></figure><p>而该构造函数创建的实例并不会直接添加私有变量到实例的属性上，而是需要通过get()方法去访问。此时get()方法是一个闭包，其作用链上拥有外部构造函数的作用域，因此可以访问到私有变量</p><h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>模块模式是用来为单例创建私有变量和特权方法的。所谓单例，指的就是只有一个实例的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 私有变量和私有函数</span></span><br><span class="line">    <span class="keyword">let</span> rigion=<span class="string">'Hang Zhou'</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">get</span>=function ()&#123;</span><br><span class="line">        <span class="keyword">return</span> rigion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特权方法和属性</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>:<span class="keyword">get</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let ming=new Person();</span><br><span class="line">console.log(ming); // &#123; <span class="keyword">get</span>: [Function: <span class="keyword">get</span>] &#125;</span><br><span class="line">console.log(ming.<span class="keyword">get</span>()); // 'Hang Zhou'</span><br></pre></td></tr></table></figure><h2 id="闭包的缺陷"><a href="#闭包的缺陷" class="headerlink" title="闭包的缺陷"></a>闭包的缺陷</h2><p>一般来说，一个函数执行完毕后，会销毁其作用域及其变量对象；但是，在创建了一个闭包以后，这个函数的的作用域会一直保存到闭包不存在（手动令这个闭包函数为null）为止。</p><pre><code>在javascript中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收；如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。</code></pre><p>有些闭包可能会被返回到全局作用域被执行</p><p>因此，闭包会携带包含它的函数的作用域，从而会占用比其他函数更多的内存。过得使用闭包会导致内存占用过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包&quot;&gt;&lt;/a&gt;什么是闭包&lt;/h2&gt;&lt;p&gt;闭包，实际上也是个函数，只不过他的外部被另外一个函数包围。因此，在一个函数内部创建另一个函数，就会产生闭包。&lt;/p&gt;
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="http://yoursite.com/2019/08/21/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/08/21/滑动窗口/</id>
    <published>2019-08-21T11:29:52.000Z</published>
    <updated>2019-08-21T12:34:27.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是滑动窗口算法"><a href="#什么是滑动窗口算法" class="headerlink" title="什么是滑动窗口算法"></a>什么是滑动窗口算法</h2><p>滑动窗口可以看做是一个区间。但是，这个区间是可以动态变化的。可以左右移动，也可以变大或变小</p><p>例如，假如有一个字符串为’abcabcbb’，那么对于大小为5的滑动窗口在该字符串上滑动，则有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abcab</span><br><span class="line"> bcabc</span><br><span class="line">  cabcb</span><br><span class="line">   abcbb</span><br></pre></td></tr></table></figure><p>滑动窗口，在我理解看来无非是一种用来大幅降低时间复杂度的算法。在某一个字符串或者一个数组中，要找到某个子字符串或者子数组来满足某些条件，那么利用滑动窗口便可以将时间复杂度降低到O(n)</p><h2 id="用什么来实现滑动窗口"><a href="#用什么来实现滑动窗口" class="headerlink" title="用什么来实现滑动窗口"></a>用什么来实现滑动窗口</h2><h3 id="leetcode题目引入"><a href="#leetcode题目引入" class="headerlink" title="leetcode题目引入"></a>leetcode题目引入</h3><p>题目引入：leetcode-3 无重复字符的最长子串<br>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><blockquote><p>示例 1:<br>输入: “abcabcbb”<br>输出: 3 <br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><blockquote><p>示例 2:<br>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><blockquote><p>示例 3:<br>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。</p></blockquote><p>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>如果使用常规的暴力解法。因为要找到一个字符串没有任何重复字符且是最长的。那么，很容易想到，找到以该字符串的每个字符为开头的最长无重复字符的字符串，然后比较那个字符串更长返回即可。思路很简单，但是，稍加考虑就会发现这样的时间复杂度会达到O(n^2)，很可能无法通过题目要求的时间限制</p><p>那么，滑动窗口呢。照着暴力解法的思路，在外循环遍历每一个字符时，如果遇到了与子串中已经重复的字符那么就会停止内循环遍历下去（因为这会是以当前字符为开头的最长子串）。按照暴力的思路，接下来我们会以外循环中的下一个字符来开始内循环。那么，我们很容易就会发现一个问题，倘若那个重复字符并不是外循环中立即接下去的那一个呢，那么遇到那个重复字符，我们依然要停下来。因此，我们可以直接滑动窗口到那个重复字符的后一位，再接着遍历后面的字符</p><h3 id="队列来实现滑动窗口"><a href="#队列来实现滑动窗口" class="headerlink" title="队列来实现滑动窗口"></a>队列来实现滑动窗口</h3><p>我们很容易可以想到利用队列来实现滑动窗口，当该窗口向右移动时，左边不需要的元素只要shift()移除队列即可</p><p>对于上题的队列实现滑动窗口解法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length===<span class="number">0</span>) <span class="keyword">return</span> s.length;</span><br><span class="line">    <span class="keyword">let</span> maxLength=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> queue=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(queue.includes(v)) &#123;</span><br><span class="line">            <span class="keyword">while</span>(queue[<span class="number">0</span>]!==v) &#123;</span><br><span class="line">                queue.shift()</span><br><span class="line">            &#125;</span><br><span class="line">            queue.shift();</span><br><span class="line">        &#125;</span><br><span class="line">            queue.push(v);</span><br><span class="line">        maxLength=queue.length&gt;maxLength?queue.length:maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="双指针来实现滑动窗口"><a href="#双指针来实现滑动窗口" class="headerlink" title="双指针来实现滑动窗口"></a>双指针来实现滑动窗口</h3><p>滑动窗口不过就是个动态的区间，那么使用双指针来表示区间也是不错的选择。而且对于队列滑动只能一格一格滑动，而双指针可以直接滑动多格</p><p>使用双指针来实现核心就是，要找到该次滑动的终点位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length===<span class="number">0</span>) <span class="keyword">return</span> s.length;</span><br><span class="line">    <span class="keyword">let</span> maxLength=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.includes(v)) &#123;</span><br><span class="line">            <span class="keyword">let</span> index=s.indexOf(v,left);</span><br><span class="line">            left=index+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">        arr=s.slice(left,right);</span><br><span class="line">        maxLength=arr.length&gt;maxLength?arr.length:maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="双指针实现的优化：利用哈希表map来使字符搜索时间复杂度降至为O-1"><a href="#双指针实现的优化：利用哈希表map来使字符搜索时间复杂度降至为O-1" class="headerlink" title="双指针实现的优化：利用哈希表map来使字符搜索时间复杂度降至为O(1)"></a>双指针实现的优化：利用哈希表map来使字符搜索时间复杂度降至为O(1)</h3><p>上面的解法中，找到重复字符的位置，利用了indexOf()函数，实际上该函数的时间复杂度为O(n)，但是，如果在遍历的同时将字符下标不断更新的话，那么查找起来时间复杂度就会变为O(1)</p><p>这也是常用的以空间换时间的策略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length===<span class="number">0</span>) <span class="keyword">return</span> s.length;</span><br><span class="line">    <span class="keyword">let</span> maxLength=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> arr=[];</span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.includes(s[i])) &#123;</span><br><span class="line">            <span class="keyword">let</span> index=map.get(s[i]);</span><br><span class="line">            left=index+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(s[i],i)</span><br><span class="line">        right++;</span><br><span class="line">        arr=s.slice(left,right);</span><br><span class="line">        maxLength=arr.length&gt;maxLength?arr.length:maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，对于队列也可以像这样进行优化</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是滑动窗口算法&quot;&gt;&lt;a href=&quot;#什么是滑动窗口算法&quot; class=&quot;headerlink&quot; title=&quot;什么是滑动窗口算法&quot;&gt;&lt;/a&gt;什么是滑动窗口算法&lt;/h2&gt;&lt;p&gt;滑动窗口可以看做是一个区间。但是，这个区间是可以动态变化的。可以左右移动，也可以变大或变小&lt;/p&gt;
&lt;p&gt;例如，假如有一个字符串为’abcabcbb’，那么对于大小为5的滑动窗口在该字符串上滑动，则有&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;abcab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; bcabc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cabcb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   abcbb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;滑动窗口，在我理解看来无非是一种用来大幅降低时间复杂度的算法。在某一个字符串或者一个数组中，要找到某个子字符串或者子数组来满足某些条件，那么利用滑动窗口便可以将时间复杂度降低到O(n)&lt;/p&gt;
&lt;h2 id=&quot;用什么来实现滑动窗口&quot;&gt;&lt;a href=&quot;#用什么来实现滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;用什么来实现滑动窗口&quot;&gt;&lt;/a&gt;用什么来实现滑动窗口&lt;/h2&gt;&lt;h3 id=&quot;leetcode题目引入&quot;&gt;&lt;a href=&quot;#leetcode题目引入&quot; class=&quot;headerlink&quot; title=&quot;leetcode题目引入&quot;&gt;&lt;/a&gt;leetcode题目引入&lt;/h3&gt;&lt;p&gt;题目引入：leetcode-3 无重复字符的最长子串&lt;br&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;br&gt;输入: “abcabcbb”&lt;br&gt;输出: 3 &lt;br&gt;解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 2:&lt;br&gt;输入: “bbbbb”&lt;br&gt;输出: 1&lt;br&gt;解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 3:&lt;br&gt;输入: “pwwkew”&lt;br&gt;输出: 3&lt;br&gt;解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。&lt;/p&gt;
    
    </summary>
    
      <category term="算法笔记" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-112 路径总和</title>
    <link href="http://yoursite.com/2019/08/21/leetcode-112/"/>
    <id>http://yoursite.com/2019/08/21/leetcode-112/</id>
    <published>2019-08-21T08:19:15.000Z</published>
    <updated>2019-08-21T11:26:09.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路径总和"><a href="#路径总和" class="headerlink" title="路径总和"></a>路径总和</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p><pre><code>      5     / \    4   8   /   / \  11  13  4 /  \      \7    2      1</code></pre><p>返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/path-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>求根节点到叶子节点上的路径和，利用深度优先搜索（DFS）即可做到。当遍历到某节点时，若该节点不为空就加上该节点的值，如果遇到是叶子节点，那么就说明一条路径已经出现。比较该路径和与给定sum,若相同则返回true;否则返回false</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>递归</p><ol><li>递归式 return test(root.left,count)||test(root.right,count); 或运算是短路运算</li><li>递归终止条件：<ol><li>该节点为null，返回false</li><li>该节点为叶子节点，如果路径和等于给定sum返回true,否则返回false</li></ol></li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; sum</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">root,count</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        count+=root.val;</span><br><span class="line">        <span class="keyword">if</span>(root.left===<span class="literal">null</span>&amp;&amp;root.right===<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count===sum) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> test(root.left,count)||test(root.right,count);</span><br><span class="line">    &#125;)(root,<span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;路径总和&quot;&gt;&lt;a href=&quot;#路径总和&quot; class=&quot;headerlink&quot; title=&quot;路径总和&quot;&gt;&lt;/a&gt;路径总和&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例:&lt;br&gt;给定如下二叉树，以及目标和 sum = 22，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&amp;gt;4-&amp;gt;11-&amp;gt;2。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-111</title>
    <link href="http://yoursite.com/2019/08/20/leetcode-111/"/>
    <id>http://yoursite.com/2019/08/20/leetcode-111/</id>
    <published>2019-08-20T06:57:09.000Z</published>
    <updated>2019-08-20T07:08:59.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的层次遍历-II"><a href="#二叉树的层次遍历-II" class="headerlink" title="二叉树的层次遍历 II"></a>二叉树的层次遍历 II</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><p><img src="https://s2.ax1x.com/2019/08/20/mJEmlQ.png" alt></p><p>返回它的最小深度  2.</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-depth-of-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>关于二叉树的最小深度，我们可以考虑利用广度优先搜索，在这里即层序遍历的思想。当遍历到第一个叶子节点时，返回其深度即可。因为，层序遍历是从定至下，从左至右遍历的，所以遍历到的第一个叶子节点的深度必定是二叉树的最小深度</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>利用队列queue来实现层序遍历，为根节点设置属性depth=0；</li><li>判断当前节点是否有左右子树，若有，则左右子树的根节点的属性depth=当前节点的属性depth值+1；并且将子树入队列；</li><li>若没有，则返回该节点的深度</li><li>重复2,3步骤</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> queue=[root];</span><br><span class="line">        root.depth=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(queue.length!==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> key=queue.shift();</span><br><span class="line">            <span class="keyword">if</span>(!key.left&amp;&amp;!key.right) <span class="keyword">return</span> key.depth;</span><br><span class="line">            <span class="keyword">if</span>(key.left) &#123;</span><br><span class="line">                key.left.depth=key.depth+<span class="number">1</span>;</span><br><span class="line">                queue.push(key.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(key.right) &#123;</span><br><span class="line">                key.right.depth=key.depth+<span class="number">1</span>;</span><br><span class="line">                queue.push(key.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉树的层次遍历-II&quot;&gt;&lt;a href=&quot;#二叉树的层次遍历-II&quot; class=&quot;headerlink&quot; title=&quot;二叉树的层次遍历 II&quot;&gt;&lt;/a&gt;二叉树的层次遍历 II&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个二叉树，找出其最小深度。&lt;/p&gt;
&lt;p&gt;最小深度是从根节点到最近叶子节点的最短路径上的节点数量。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;给定二叉树 [3,9,20,null,null,15,7],&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/20/mJEmlQ.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;返回它的最小深度  2.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-107 二叉树的层次遍历 II</title>
    <link href="http://yoursite.com/2019/08/19/leetcode-107/"/>
    <id>http://yoursite.com/2019/08/19/leetcode-107/</id>
    <published>2019-08-19T06:34:55.000Z</published>
    <updated>2019-08-19T06:49:23.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的层次遍历-II"><a href="#二叉树的层次遍历-II" class="headerlink" title="二叉树的层次遍历 II"></a>二叉树的层次遍历 II</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p>例如：</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><p><img src="https://s2.ax1x.com/2019/08/19/m1fEk9.png" alt></p><p>返回其自底向上的层次遍历为：</p><p>[<br>  [15,7],<br>  [9,20],<br>  [3]<br>]</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>返回节点值自底部向上的遍历，也就是相当于节点值自顶部向下的遍历的倒转；那么，利用队列将二叉树进行层序遍历的同时，为节点添加depth属性（表示这为第几层）；根据depth值，添加到对应的二维数组ans中;最后，返回ans数组的倒序</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>利用队列queue来实现层序遍历，为根节点设置属性depth=0；</li><li>判断ans数组的key.depth项是否为数组，若是则直接将该值加入数组；若不是，则创建数组[key]</li><li>判断当前节点是否有左右子树，若有，则左右子树的根节点的属性depth=当前节点的属性depth值+1；并且将子树入队列；</li><li>重复2,3步骤直到queue为空</li><li>返回ans.reverse()</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> queue=[];</span><br><span class="line">        queue.push(root);</span><br><span class="line">        root.depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(queue.length!==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> key=queue.shift();</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(ans[key.depth])) &#123;</span><br><span class="line">                ans[key.depth].push(key.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans[key.depth]=[key.val];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(key.left) &#123;</span><br><span class="line">                key.left.depth=key.depth+<span class="number">1</span>;</span><br><span class="line">                queue.push(key.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(key.right) &#123;</span><br><span class="line">                key.right.depth=key.depth+<span class="number">1</span>;</span><br><span class="line">                queue.push(key.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉树的层次遍历-II&quot;&gt;&lt;a href=&quot;#二叉树的层次遍历-II&quot; class=&quot;headerlink&quot; title=&quot;二叉树的层次遍历 II&quot;&gt;&lt;/a&gt;二叉树的层次遍历 II&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;给定二叉树 [3,9,20,null,null,15,7],&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/19/m1fEk9.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;返回其自底向上的层次遍历为：&lt;/p&gt;
&lt;p&gt;[&lt;br&gt;  [15,7],&lt;br&gt;  [9,20],&lt;br&gt;  [3]&lt;br&gt;]&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-104 二叉树的最大深度</title>
    <link href="http://yoursite.com/2019/08/18/leetcode-104/"/>
    <id>http://yoursite.com/2019/08/18/leetcode-104/</id>
    <published>2019-08-18T06:46:43.000Z</published>
    <updated>2019-08-19T06:49:23.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：</p><p>给定二叉树 [3,9,20,null,null,15,7]，</p><p><img src="https://s2.ax1x.com/2019/08/18/mMX3SH.png" alt></p><p>返回它的最大深度 3 。</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>获取一棵树的二叉树地最大深度，也就是需要获得该树的层数。那么，很自然可以想到利用层序遍历来获取到层数</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>利用队列来实现层序遍历，为根节点设置属性depth=1；并使最大层数max=1;</li><li>判断当前节点是否有左右子树，若有，则左右子树的根节点的属性depth=当前节点的属性depth值+1；并且将子树入队列</li><li>每个节点depth值与max值进行比较，将max赋予较大值</li><li>返回max</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span> max;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> queue=[];</span><br><span class="line">            queue.push(root);</span><br><span class="line">            max=root.depth=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(queue.length!==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> key=queue.shift();</span><br><span class="line">                <span class="keyword">if</span>(key.left!==<span class="literal">null</span>) &#123;</span><br><span class="line">                    key.left.depth=key.depth+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(key.left.depth&gt;max) max=key.left.depth;</span><br><span class="line">                    queue.push(key.left)</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span>(key.right!==<span class="literal">null</span>) &#123;</span><br><span class="line">                    key.right.depth=key.depth+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(key.right.depth&gt;max) max=key.right.depth;</span><br><span class="line">                    queue.push(key.right)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉树的最大深度&quot;&gt;&lt;a href=&quot;#二叉树的最大深度&quot; class=&quot;headerlink&quot; title=&quot;二叉树的最大深度&quot;&gt;&lt;/a&gt;二叉树的最大深度&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;给定二叉树 [3,9,20,null,null,15,7]，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/18/mMX3SH.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;返回它的最大深度 3 。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
