<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-14T06:38:57.192Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Angel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-172</title>
    <link href="http://yoursite.com/2019/07/14/leetcode-172/"/>
    <id>http://yoursite.com/2019/07/14/leetcode-172/</id>
    <published>2019-07-14T06:38:57.000Z</published>
    <updated>2019-07-14T06:38:57.192Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leetcode-171 Excel表列序号</title>
    <link href="http://yoursite.com/2019/07/13/leetcode-171/"/>
    <id>http://yoursite.com/2019/07/13/leetcode-171/</id>
    <published>2019-07-13T03:59:25.000Z</published>
    <updated>2019-07-13T08:27:15.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Excel表列序号"><a href="#Excel表列序号" class="headerlink" title="Excel表列序号"></a>Excel表列序号</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个Excel表格中的列名称，返回其相应的列序号。</p><p>例如，</p><pre><code>A -&gt; 1B -&gt; 2C -&gt; 3...Z -&gt; 26AA -&gt; 27AB -&gt; 28 ...</code></pre><p>示例 1:</p><blockquote><p>输入: “A”<br>  输出: 1</p></blockquote><p>示例 2:</p><blockquote><p>输入: “AB”<br>  输出: 28</p></blockquote><p>示例 3:</p><blockquote><p>输入: “ZY”<br>输出: 701</p></blockquote><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/excel-sheet-column-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/excel-sheet-column-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过观察，不难发现其实这类似于二进制之类的表示形式。只不过对于该题可以把其称之为26进制。再按照二进制转化为十进制方法将其转化为对应的表示数</p><p>A的Unicode编码为65，在该题目中对应的是1.因此可以通过letter.charCodeAt()函数得到的Unicode编码值减去64即可得到对应的单个字母对应值。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>将字符串转化为数组从而可以进行遍历</li><li>将转化得到的数组反转(reverse()) 【类似于二进制转化为十进制的方法，因此，反转后的数组的下标index就是他们在累加时的26幂的次方】</li><li>利用reduce()函数进行累加</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><h3 id="我一开始的coding"><a href="#我一开始的coding" class="headerlink" title="我一开始的coding"></a>我一开始的coding</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> titleToNumber = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sArray=s.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> length=sArray.length<span class="number">-1</span>;  </span><br><span class="line">  <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">  sArray.forEach(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    sum+=(value.charCodeAt()%<span class="string">'A'</span>.charCodeAt()+<span class="number">1</span>)*<span class="built_in">Math</span>.pow(<span class="number">26</span>,length);</span><br><span class="line">    length--;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="优化过的coding"><a href="#优化过的coding" class="headerlink" title="优化过的coding"></a>优化过的coding</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> titleToNumber = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sArray=s.split(<span class="string">''</span>).reverse();</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">sArray.reduce((pre,cur,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre+(cur.charCodeAt()<span class="number">-64</span>)*<span class="built_in">Math</span>.pow(<span class="number">26</span>,index);</span><br><span class="line">  &#125;,<span class="number">0</span>))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Excel表列序号&quot;&gt;&lt;a href=&quot;#Excel表列序号&quot; class=&quot;headerlink&quot; title=&quot;Excel表列序号&quot;&gt;&lt;/a&gt;Excel表列序号&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个Excel表格中的列名称，返回其相应的列序号。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A -&amp;gt; 1
B -&amp;gt; 2
C -&amp;gt; 3
...
Z -&amp;gt; 26
AA -&amp;gt; 27
AB -&amp;gt; 28 
...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: “A”&lt;br&gt;  输出: 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: “AB”&lt;br&gt;  输出: 28&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: “ZY”&lt;br&gt;输出: 701&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目代码与命名规范</title>
    <link href="http://yoursite.com/2019/07/11/Vue%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/07/11/Vue项目代码与命名规范/</id>
    <published>2019-07-11T09:23:51.000Z</published>
    <updated>2019-07-12T05:22:46.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue项目代码与命名规范"><a href="#Vue项目代码与命名规范" class="headerlink" title="Vue项目代码与命名规范"></a>Vue项目代码与命名规范</h1><a id="more"></a><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h2 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h2><ol><li><p>单文件组件命名规范</p><ol><li><p>组件名为多个单词</p><p> <strong>组件名应该始终是多个单词的，根组件 App 以及 &lt; transition &gt;、&lt; component &gt; 之类的 Vue 内置组件除外。</strong></p><p> 这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p><blockquote><p>MyComponent.vue</p></blockquote></li><li><p>语义化及单词顺序</p><blockquote><p>SearchButtonRun.vue</p></blockquote></li><li><p>文件名以单词大写开头</p><blockquote><p>MyComponent.vue</p></blockquote></li><li><p>组件名应该倾向于完整单词而不是缩写</p><blockquote><p>UserProfileOptions.vue</p></blockquote></li></ol></li></ol><ol start="2"><li>文件夹命名规范<ol><li>属于components文件夹下的子文件夹，使用大写字母开头的PascalBase风格</li><li>所有组件放在components文件夹下，对于各个页面应当新建立业务页面组件文件夹。</li><li>一些通用组件可以建立common文件夹放在components文件夹下</li><li>应当建立api文件夹，统一定义管理接口请求</li><li>建立router文件夹，进行路由管理</li><li>建立store文件夹，进行vuex状态管理</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue项目代码与命名规范&quot;&gt;&lt;a href=&quot;#Vue项目代码与命名规范&quot; class=&quot;headerlink&quot; title=&quot;Vue项目代码与命名规范&quot;&gt;&lt;/a&gt;Vue项目代码与命名规范&lt;/h1&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="命名规范" scheme="http://yoursite.com/tags/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目的快速搭建</title>
    <link href="http://yoursite.com/2019/07/11/Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/07/11/Vue项目的快速搭建/</id>
    <published>2019-07-11T09:01:47.000Z</published>
    <updated>2019-07-13T08:23:12.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue项目的快速搭建"><a href="#Vue项目的快速搭建" class="headerlink" title="Vue项目的快速搭建"></a>Vue项目的快速搭建</h1><h2 id="vue-cli创建项目"><a href="#vue-cli创建项目" class="headerlink" title="vue-cli创建项目"></a>vue-cli创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;项目名&gt;</span><br><span class="line">//选择手动设置特性（Manually select features）</span><br></pre></td></tr></table></figure><h2 id="安装必要依赖包括但不限于vue-router-vuex-vue-axios-axios"><a href="#安装必要依赖包括但不限于vue-router-vuex-vue-axios-axios" class="headerlink" title="安装必要依赖包括但不限于vue-router,vuex,vue-axios,axios"></a>安装必要依赖包括但不限于vue-router,vuex,vue-axios,axios</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-router --save</span><br></pre></td></tr></table></figure><h2 id="建立基本路由管理"><a href="#建立基本路由管理" class="headerlink" title="建立基本路由管理"></a>建立基本路由管理</h2><h3 id="在router-js中配置路由"><a href="#在router-js中配置路由" class="headerlink" title="在router.js中配置路由"></a>在router.js中配置路由</h3>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> RouterView1 <span class="keyword">from</span> <span class="string">'@/component/RouterView1'</span></span><br><span class="line"><span class="comment">//@默认表示src文件夹</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter) </span><br><span class="line"><span class="comment">/*安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">             path:<span class="string">'/RouterView1'</span>,</span><br><span class="line">             name:<span class="string">'view1'</span>,</span><br><span class="line">             component:RouterView1</span><br><span class="line">        &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">             path:<span class="string">'/RouterView2'</span>,</span><br><span class="line">             name:<span class="string">'view2'</span>,</span><br><span class="line">             component:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                 <span class="keyword">import</span>(<span class="string">'@/component/RouterView2'</span>)</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">/*import() es6函数，动态异步加载模块，返回一个promise*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在main-js中注册"><a href="#在main-js中注册" class="headerlink" title="在main.js中注册"></a>在main.js中注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><h2 id="使用axios（或vue-axios）"><a href="#使用axios（或vue-axios）" class="headerlink" title="使用axios（或vue-axios）"></a>使用axios（或vue-axios）</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><ol><li><p>第一种方式（main.js直接引入)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"></span><br><span class="line">Vue.use(axios,vue-axios)</span><br></pre></td></tr></table></figure></li><li><p>第二种方式（在api文件夹中引入）</p><ol><li>建立api.js文件用来编写接口函数<br><img src="Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/api.png" alt="api.js"></li><li>建立index.js导出api.js的所有函数<br><img src="Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/index.png" alt="index.js"></li></ol></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.axios.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$http.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue项目的快速搭建&quot;&gt;&lt;a href=&quot;#Vue项目的快速搭建&quot; class=&quot;headerlink&quot; title=&quot;Vue项目的快速搭建&quot;&gt;&lt;/a&gt;Vue项目的快速搭建&lt;/h1&gt;&lt;h2 id=&quot;vue-cli创建项目&quot;&gt;&lt;a href=&quot;#vue-cli创建项
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue Cli" scheme="http://yoursite.com/tags/Vue-Cli/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-169 求众数</title>
    <link href="http://yoursite.com/2019/07/09/leetcode-169/"/>
    <id>http://yoursite.com/2019/07/09/leetcode-169/</id>
    <published>2019-07-09T05:18:25.000Z</published>
    <updated>2019-07-09T12:34:08.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求众数"><a href="#求众数" class="headerlink" title="求众数"></a>求众数</h1><h2 id="核心方法：哈希表"><a href="#核心方法：哈希表" class="headerlink" title="核心方法：哈希表"></a>核心方法：哈希表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p></blockquote><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p><a id="more"></a><blockquote><p>示例 1:</p></blockquote><p>输入: [3,2,3]<br>输出: 3</p><blockquote><p>示例 2:</p></blockquote><p>输入: [2,2,1,1,1,2,2]<br>输出: 2</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/majority-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/majority-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><blockquote><p>利用哈希表这一数据结构来存储每个数的出现次数。元素作为键名，他们所出现的次数作为键值，进行存储。</p></blockquote><ol><li><p>遍历给定数组，若当前数组元素未在哈希表map中（map.has(key)===false），则以该元素为键名添加该元素，并置键值为1（map.set(value,1)）；若已存在，则更新该键值（键值加1:map.set(value,map.get(value)+1)）</p></li><li><p>遍历哈希表map，找到键值最大的那个键名并返回</p></li></ol><h3 id="coding实现"><a href="#coding实现" class="headerlink" title="coding实现"></a>coding实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> maxCount=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> num=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">let</span> numsMap=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">   nums.forEach(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!numsMap.has(value))&#123;</span><br><span class="line">        numsMap.set(value,<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">       numsMap.set(value,numsMap.get(value)+<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   numsMap.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(value&gt;maxCount)&#123;</span><br><span class="line">       maxCount=value;</span><br><span class="line">       num=key;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;求众数&quot;&gt;&lt;a href=&quot;#求众数&quot; class=&quot;headerlink&quot; title=&quot;求众数&quot;&gt;&lt;/a&gt;求众数&lt;/h1&gt;&lt;h2 id=&quot;核心方法：哈希表&quot;&gt;&lt;a href=&quot;#核心方法：哈希表&quot; class=&quot;headerlink&quot; title=&quot;核心方法：哈希表&quot;&gt;&lt;/a&gt;核心方法：哈希表&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以假设数组是非空的，并且给定的数组总是存在众数。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-167 两数之和|| - 输入有序数组</title>
    <link href="http://yoursite.com/2019/07/08/leetcode-167/"/>
    <id>http://yoursite.com/2019/07/08/leetcode-167/</id>
    <published>2019-07-08T10:18:03.000Z</published>
    <updated>2019-07-09T12:34:08.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和-输入有序数组"><a href="#两数之和-输入有序数组" class="headerlink" title="两数之和|| - 输入有序数组"></a>两数之和|| - 输入有序数组</h1><h2 id="核心方法：双指针"><a href="#核心方法：双指针" class="headerlink" title="核心方法：双指针"></a>核心方法：双指针</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><p>说明:</p><p>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p></blockquote><a id="more"></a><blockquote><p>示例:</p><p>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><blockquote><p>   题目给定的是有序数组，所以使用双指针方法较为方便。设定min指向第一个数组元素（也就是当前最小数），max指向最后一个数组元素。令sum=numbers[min]+numbers[max]</p><p>   循环比较sum与target是否相等，若想等则输出。小于target则代表min指向的元素值比输出值要小，则min++;反之，则max–;</p></blockquote><h3 id="coding实现"><a href="#coding实现" class="headerlink" title="coding实现"></a>coding实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> min=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">let</span> max=numbers.length<span class="number">-1</span>;</span><br><span class="line">   <span class="keyword">let</span> sum;</span><br><span class="line">   <span class="keyword">while</span>((sum=numbers[min]+numbers[max])!==target)&#123;</span><br><span class="line">      <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">        min++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        max--;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> [min+<span class="number">1</span>,max+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;两数之和-输入有序数组&quot;&gt;&lt;a href=&quot;#两数之和-输入有序数组&quot; class=&quot;headerlink&quot; title=&quot;两数之和|| - 输入有序数组&quot;&gt;&lt;/a&gt;两数之和|| - 输入有序数组&lt;/h1&gt;&lt;h2 id=&quot;核心方法：双指针&quot;&gt;&lt;a href=&quot;#核心方法：双指针&quot; class=&quot;headerlink&quot; title=&quot;核心方法：双指针&quot;&gt;&lt;/a&gt;核心方法：双指针&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;/p&gt;
&lt;p&gt;函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。&lt;/p&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;返回的下标值（index1 和 index2）不是从零开始的。&lt;br&gt;你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
