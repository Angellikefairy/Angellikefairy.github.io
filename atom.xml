<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-05T11:37:29.172Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Angel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>set集合与map集合</title>
    <link href="http://yoursite.com/2019/09/05/set%E9%9B%86%E5%90%88%E4%B8%8Emap%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2019/09/05/set集合与map集合/</id>
    <published>2019-09-05T10:31:41.000Z</published>
    <updated>2019-09-05T11:37:29.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><h3 id="Set集合的使用"><a href="#Set集合的使用" class="headerlink" title="Set集合的使用"></a>Set集合的使用</h3><p>语法</p><p>new Set([iterable]);</p><p>参数</p><p>iterable<br>    如果传递一个可迭代对象，它的所有元素将不重复地被添加到新的 Set中。如果不指定此参数或其值为null，则新的 Set为空。</p><p>返回值</p><p>一个新的Set对象</p><h3 id="set的一些基本操作"><a href="#set的一些基本操作" class="headerlink" title="set的一些基本操作"></a>set的一些基本操作</h3><p>Set对象的一些基本方法</p><ol><li>add() 向集合添加一个元素</li><li>delete() 向集合删除某个指定元素</li><li>clear() 清除集合内所有元素</li><li>has() 检查集合内是否有指定元素</li></ol><p>Set对象的一些属性</p><ol><li>size 集合大小</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span>=new Set();</span><br><span class="line"><span class="keyword">set</span>.add(1);</span><br><span class="line"><span class="keyword">set</span>.add('1');</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">set</span>.size); // 2</span><br><span class="line"><span class="keyword">set</span>.delete('1'); </span><br><span class="line">console.log(<span class="keyword">set</span>); // Set &#123; <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="Set的特性"><a href="#Set的特性" class="headerlink" title="Set的特性"></a>Set的特性</h3><p>在set集合内，存入元素的时候不会对值进行任何强制的类型转换，这也意味着，5和’5’在set集合内是两个不同的独立的元素</p><p>另外,如果往set集合内多次传入同一数据，那么后面的操作就会被忽略。因此，set集合内的元素是不重复的</p><h3 id="利用Set特性来实现数组去重"><a href="#利用Set特性来实现数组去重" class="headerlink" title="利用Set特性来实现数组去重"></a>利用Set特性来实现数组去重</h3><p>因为展开运算符可以将诸如set集合的可迭代对象转化为数组</p><p>因此，我们可以将数组传入set集合内，利用set内元素不能重复的特性实现去重。之后利用展开运算符，将set集合转化回数组、</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]; <span class="comment">// 创建一个具有重复元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span>=new Set(test);</span><br><span class="line">console.log([...<span class="keyword">set</span>]); // [1,2,3,4]</span><br></pre></td></tr></table></figure><h3 id="Set集合的遍历"><a href="#Set集合的遍历" class="headerlink" title="Set集合的遍历"></a>Set集合的遍历</h3><p>set集合使用forEach()方法来实现遍历</p><p>该方法的回调函数接受三个参数</p><ol><li>元素的值</li><li>元素的键名</li><li>自身set集合</li></ol><p>因为set集合存储的是单个元素而不是键值对，但是为了大多数方法中回调参数的统一，该回调函数的参数也按照键值的形式传参。</p><blockquote><p>但，值得注意的是，元素的键名与键值相同</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span>=new Set([3,4,5]);</span><br><span class="line"><span class="keyword">set</span>.forEach((value,key,ownerSet)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,key,ownerSet);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3,3,&#123;3,4,5&#125;</span></span><br><span class="line"><span class="comment">// 4,4,&#123;3,4,5&#125;</span></span><br><span class="line"><span class="comment">// 5,5,&#123;3,4,5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="WeakSet集合"><a href="#WeakSet集合" class="headerlink" title="WeakSet集合"></a>WeakSet集合</h3><h4 id="什么是WeakSet集合"><a href="#什么是WeakSet集合" class="headerlink" title="什么是WeakSet集合"></a>什么是WeakSet集合</h4><p>WeakSet 集合是一个弱引用Set集合，里面只能存储的弱引用，而不能存储基本类型值</p><h4 id="为什么要使用WeakSet"><a href="#为什么要使用WeakSet" class="headerlink" title="为什么要使用WeakSet"></a>为什么要使用WeakSet</h4><p>如果往set集合内加入某个引用类型值，那么set集合中的该元素也有了某个对象的引用。那么，就算在set集合外部释放了该对象（令该对象的值为null），set集合内部的那个元素仍然保持着那个对象的引用。因此，这会很容易造成内存泄漏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往set内传入a对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span>=new Set([a]);</span><br><span class="line"></span><br><span class="line">// 将a对象置为空对象</span><br><span class="line">a=null;</span><br><span class="line"></span><br><span class="line">// 但是<span class="keyword">set</span>集合中的元素仍然保持着该对象的引用</span><br><span class="line">console.log([...<span class="keyword">set</span>][0]); // &#123; item: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>对于上述程序，显然我们可以看到，我们在set集合外部想要释放对象a，但是set集合引用着该对象，因此该对象的内存无法被释放</p><h4 id="WeakSet的使用"><a href="#WeakSet的使用" class="headerlink" title="WeakSet的使用"></a>WeakSet的使用</h4><p>WeakSet 对象中存储的对象值都是被弱引用的, 如果没有其他的变量或属性引用这个对象值, 则这个对象值会被当成垃圾回收掉. 正因为这样, WeakSet 对象是无法被枚举的, 没有办法拿到它包含的所有元素.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往weakSet内传入a对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span>=new WeakSet([a]);</span><br><span class="line"></span><br><span class="line">// 将a对象置为空对象</span><br><span class="line">a=null;</span><br><span class="line"></span><br><span class="line">console.log(a); // null</span><br></pre></td></tr></table></figure><p>当WeakSet集合外部的引用被释放后，该引用就会被真正地完全释放</p><h4 id="weakSet集合的一些注意点"><a href="#weakSet集合的一些注意点" class="headerlink" title="weakSet集合的一些注意点"></a>weakSet集合的一些注意点</h4><p>weakSet只支持3个方法</p><ol><li>add()</li><li>has()</li><li>delete</li></ol><p>weakSet集合不可迭代和枚举，因此其不支持</p><ol><li>for…of循环</li><li>…展开运算符</li><li>forEach()方法</li><li>size属性</li></ol><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>Map类型是一种存储着许多键值对的有序列表，其中的键名和键值支持所有的数据类型。</p><p>键名的等价性判断是通过Object.is()方法来进行判断的，所以数字5和字符串’5’会被判定为两种类型，可以分IE作为独立的两个键名来存储在Map结合内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'1'</span>,<span class="number">1</span>);</span><br><span class="line">map.set(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map &#123; '1' =&gt; 1, 1 =&gt; 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Map集合的使用"><a href="#Map集合的使用" class="headerlink" title="Map集合的使用"></a>Map集合的使用</h3><p>语法</p><p>new Map([iterable])</p><p>参数</p><p>iterable<br>    Iterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, ‘one’ ],[ 2, ‘two’ ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。 </p><h3 id="Map的一些基本方法"><a href="#Map的一些基本方法" class="headerlink" title="Map的一些基本方法"></a>Map的一些基本方法</h3><p>Map集合具有以下一些基本方法</p><ol><li>set() 传入键名和键值来设定一个键值对</li><li>delete() 删除指定键值对</li><li>clear() 删除全部键值对</li><li>has() 判断某个键值对是否存在</li><li>get() 传入键名来获取键值</li></ol><p>Map集合具有以下一些属性</p><ol><li>size Map集合的大小</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'a'</span>,<span class="string">'a'</span>);</span><br><span class="line">map.set(<span class="string">'b'</span>,<span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">'a'</span>)); <span class="comment">// 'a'</span></span><br><span class="line">map.delete(<span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">'a'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h3><p>Map集合也是使用forEach()方法来进行遍历</p><p>其回调函数接受三个参数</p><ol><li>value 键值</li><li>key 键名<br>3，ownerMap 自身map集合</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="number">1</span>],[<span class="string">'1'</span>,<span class="string">'1'</span>]]);</span><br><span class="line">map.forEach(<span class="function">(<span class="params">value,key,ownerMap</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,key,ownerMap);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1 1 Map &#123; 1 =&gt; 1, '1' =&gt; '1' &#125;</span></span><br><span class="line"><span class="comment">// '1' '1' Map &#123; 1 =&gt; 1, '1' =&gt; '1' &#125;</span></span><br></pre></td></tr></table></figure><h3 id="WeakMap集合"><a href="#WeakMap集合" class="headerlink" title="WeakMap集合"></a>WeakMap集合</h3><p>类似于WeakSet集合，WeakMap是弱引用Map集合。其中，它的键名必须是非null类型的对象，键值则可以使任意类型的值</p><p>WeakMap集合中保存的是键名弱引用着的引用对象，如果在弱引用之外不再有任何其他强引用，那么垃圾回收机制就会自动回收这个对象</p><p>只有集合的键名遵守以上规则，如果键值是一个对象，那么该引用是强引用，不会触发垃圾回收机制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Set集合&quot;&gt;&lt;a href=&quot;#Set集合&quot; class=&quot;headerlink&quot; title=&quot;Set集合&quot;&gt;&lt;/a&gt;Set集合&lt;/h2&gt;&lt;h3 id=&quot;Set集合的使用&quot;&gt;&lt;a href=&quot;#Set集合的使用&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>解构</title>
    <link href="http://yoursite.com/2019/09/04/%E8%A7%A3%E6%9E%84/"/>
    <id>http://yoursite.com/2019/09/04/解构/</id>
    <published>2019-09-04T11:42:42.000Z</published>
    <updated>2019-09-04T13:35:46.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要解构"><a href="#为什么需要解构" class="headerlink" title="为什么需要解构"></a>为什么需要解构</h2><p>在Es6之前，当我们需要从一个对象中取出某个属性的值时，我们通常会这么做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(test.b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(test.c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>显然我们可以看到，我们重复写了很多同样的代码；况且这只是仅仅只有一层，如果其中还包含更多的嵌套解构的话，那么我们就需要编写更长更多的代码</p><p>然而，Es6的解构就很好地解决了这些问题</p><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>对象解构的语法形式是在一个赋值操作符左边放置一个对象字面量,那么左边对象字面量中的变量就可以获得右边对象中的同名变量的属性值</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量声明的时候，解构对象获得对应属性值</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,c&#125;=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><p>注意：<br>只要使用了解构来声明变量，那么就必须要给该表达式初始化（即提供等号右侧的值）</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>不同于上面的那段程序，是在变量声明的时候就解构对象来得到相应的属性值。解构赋值，是在变量已经声明结束后，在普通赋值表达式的时候进行解构</p><blockquote><p>但此时，一定要记住，需要用一对<strong>小括号</strong>来包裹解构赋值表达式；</p></blockquote><p>因为，在之前提过，JavaScritp将一对花括号之间的区域视为一个代码块，但是代码块语句不允许出现在赋值表达式左侧。因此，我们通过在解构赋值语句外包裹一对小括号来讲该块语句转化为一个表达式</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a,b,c;</span><br><span class="line">(&#123;a,b,c&#125;=test);</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br></pre></td></tr></table></figure><h4 id="给函数传递参数的同时解构"><a href="#给函数传递参数的同时解构" class="headerlink" title="给函数传递参数的同时解构"></a>给函数传递参数的同时解构</h4><p>只要你想获得对象中某些参数的值，无论是在哪里你都可以利用解构，比如在函数传参的环节</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getValue(&#123;a,b,c&#125;=test)); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><p>因为JavaScript表达式的结果会是等号右边的值，因此实参的表达式 {a,b,c}=test的结果会是test对象，因此传递给getValue函数的是test对象，但是在此表达式的执行过程中，也进行了解构操作，因此也得到了a,b,c的值</p><h3 id="解构赋值也可以使用默认值"><a href="#解构赋值也可以使用默认值" class="headerlink" title="解构赋值也可以使用默认值"></a>解构赋值也可以使用默认值</h3><p>在使用解构赋值表达式的时候，如果指定的局部变量名称在对象中并没有该属性，那么该变量会被赋予undefined</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,c,d,e&#125;=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e); <span class="comment">// 1,2,3,undefined,undefined</span></span><br></pre></td></tr></table></figure><p>但其实，类似于之前提到过的默认参数（当形参没有获得实参时，那些提前被赋予默认值的参数就可以使用默认值），在解构赋值时也可以使用默认值</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;a=<span class="string">'aaa'</span>,b=<span class="string">'bbb'</span>,c=<span class="string">'ccc'</span>,d=<span class="string">'ddd'</span>,e=<span class="string">'eee'</span>&#125;=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e); <span class="comment">// 1,2,3,'ddd','eee'</span></span><br></pre></td></tr></table></figure><p>当指定的属性不存在时，我们变量就会获得预先设定的默认值</p><h3 id="为非同名局部变量赋值"><a href="#为非同名局部变量赋值" class="headerlink" title="为非同名局部变量赋值"></a>为非同名局部变量赋值</h3><p>有些时候，我们只想取得某个对象中的属性值而不是命名与属性名相同的变量名，也就是为非同名局部变量解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用冒号语法来为非同名变量赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:itemA,<span class="attr">b</span>:itemB,<span class="attr">c</span>:itemC&#125;=test;</span><br><span class="line"><span class="built_in">console</span>.log(itemA,itemB,itemC); <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c); <span class="comment">// 报错：a is not defined</span></span><br></pre></td></tr></table></figure><h3 id="嵌套对象解构"><a href="#嵌套对象解构" class="headerlink" title="嵌套对象解构"></a>嵌套对象解构</h3><p>无论嵌套多少层，我们只需要记住将赋值操作符左边的解构对象看作是一个对象字面量，这个对象字面量等于右边给定的对象，那么我们就可以很容易对比两个对象得到需要的属性值</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:&#123;</span><br><span class="line">        a:<span class="string">'a'</span>,</span><br><span class="line">        b:<span class="string">'b'</span>,</span><br><span class="line">        c:<span class="string">'c'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构嵌套对象时，我们只能获得当前解构对象内的最深层变量赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">c</span>:&#123;b&#125;&#125;=test;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 报错 c is not defined</span></span><br></pre></td></tr></table></figure><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><p>数组解构使用的数组字面量，且解构操作全部在数组内完成</p><p>在数组解构语法中，我们是通过值在数组中的位置来进行获取数组元素值的</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">item</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> [a,b,c]=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c); <span class="comment">// 1,2,&#123; item: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(c===test[<span class="number">2</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当然我们也可以只取得其中的几项，未显示声明的元素都会被忽略（通过设置空白占位符）</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">item</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> [a, ,c]=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,c); <span class="comment">// 1,&#123;item:3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h3><p>数组解构不像对象解构，因为数组使用[]包裹的，而不是对象字面量的{}，因此，数组的解构赋值会被当做一个表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">item</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> a,b,c; <span class="comment">// 声明a,b,c</span></span><br><span class="line"></span><br><span class="line">[a,b,c]=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c); <span class="comment">// 1,2,&#123;item:3&#125;</span></span><br></pre></td></tr></table></figure><h4 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h4><p>数组解构赋值语法有一个独特的用例，可以用来交换两个变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">[a,b]=[b,a];</span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">// 2,1</span></span><br></pre></td></tr></table></figure><p>对于上述代码，在表达式赋值之前，我们会先求得表达式左右两侧的值之后在进行赋值。右侧根据a,b生成一个数组对象，因此，这就符合了数组解构赋值的语法</p><p>因为在数组解构语法中，我们是通过值在数组中的位置来进行获取数组元素值的，而不是像对象解构是根据同名变量来的，因此，在这里，局部变量a会获得数组[b,a]的第一个元素也就是2，局部变量b会获得数组[b,a]的第二个元素也就是1</p><p>上述代码可以转化为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> arr=[b,a];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2,1]</span></span><br><span class="line">[a,b]=arr;</span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">// 2,1</span></span><br></pre></td></tr></table></figure><h3 id="数组解构赋值中的默认值"><a href="#数组解构赋值中的默认值" class="headerlink" title="数组解构赋值中的默认值"></a>数组解构赋值中的默认值</h3><p>类似于对象解构赋值我们可以使用默认值，在数组解构赋值中我们同样也可以使用默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">item</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> [a=<span class="string">'aaa'</span>,b=<span class="string">'bbb'</span>,c=<span class="string">'ccc'</span>,d=<span class="string">'ddd'</span>,e=<span class="string">'eee'</span>]=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e); <span class="comment">// 1,2,&#123;item:3&#125;,ddd,eee</span></span><br></pre></td></tr></table></figure><h3 id="嵌套数组解构"><a href="#嵌套数组解构" class="headerlink" title="嵌套数组解构"></a>嵌套数组解构</h3><p>类似于对象的嵌套解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]];</span><br><span class="line"><span class="keyword">let</span> [a, ,[ , ,c]]=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,c); <span class="comment">// 1,5</span></span><br></pre></td></tr></table></figure><h3 id="不定元素"><a href="#不定元素" class="headerlink" title="不定元素"></a>不定元素</h3><p>在数组中，我们可以通过…语法将数组中的其余元素都赋值给一个特定的变量。我们把这称之为不定元素</p><p><strong>注意</strong>：<br>在被解构的数组中，不定元素必须为最后一个条目，在不定元素后面继续添加都好会导致程序抛出语法错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">item</span>:<span class="number">3</span>&#125;,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="keyword">let</span> [a, , ,[...d]]=test;</span><br><span class="line"><span class="built_in">console</span>.log(a,d); <span class="comment">// 1,[4,5,6]</span></span><br></pre></td></tr></table></figure><h2 id="混合解构"><a href="#混合解构" class="headerlink" title="混合解构"></a>混合解构</h2><p>顾名思义，就是在任何混杂真对象和数组的数据解构得到某些值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:&#123;</span><br><span class="line">        a:<span class="number">1</span>,</span><br><span class="line">        b:&#123;</span><br><span class="line">            b:<span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        c:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">c</span>:&#123;b,<span class="attr">c</span>:[ , ,d]&#125;&#125;=test;</span><br><span class="line"><span class="built_in">console</span>.log(b,d); <span class="comment">// &#123;b:2&#125;,3</span></span><br></pre></td></tr></table></figure><p>在上述代码中的冒号前的变量代表对象的属性，并不是声明的局部变量</p><h2 id="解构参数"><a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h2><p>解构可以用在函数参数的传递过程中，我们可以使用对象或数组解构模式来替代命名参数</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">&#123;a,b,c&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c); <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getValue(test);</span><br></pre></td></tr></table></figure><blockquote><p>注意，解构参数必须传值，对于上述代码，我们就不能穿一个null空对象或者undefined，不然就会使程序抛出语法错误</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么需要解构&quot;&gt;&lt;a href=&quot;#为什么需要解构&quot; class=&quot;headerlink&quot; title=&quot;为什么需要解构&quot;&gt;&lt;/a&gt;为什么需要解构&lt;/h2&gt;&lt;p&gt;在Es6之前，当我们需要从一个对象中取出某个属性的值时，我们通常会这么做：&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-235 二叉搜索树的最近公共祖先</title>
    <link href="http://yoursite.com/2019/09/04/leetcode-235/"/>
    <id>http://yoursite.com/2019/09/04/leetcode-235/</id>
    <published>2019-09-04T11:09:34.000Z</published>
    <updated>2019-09-04T11:31:40.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p>示例 1:</p><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br>输出: 6<br>解释: 节点 2 和节点 8 的最近公共祖先是 6。<br>示例 2:</p><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br>输出: 2<br>解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</p><p>说明:</p><p>所有节点的值都是唯一的。<br>p、q 为不同节点且均存在于给定的二叉搜索树中。</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>因为该树为二叉搜索树，因此，每个节点的左子树均小于等于它的值；每个节点的右子树均大于等于它的值；那么，如果当给定的节点分别位于某节点的两侧时，则该节点为给定两节点的最近公共祖先</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>先序遍历该二叉搜索树，如果给定两节点的值均小于该节点，那么遍历该节点的左子树</li><li>如果给定两节点的值均大于该节点，那么遍历该节点的右子树</li><li>如果该节点的值小于某节点的值又大于另一节点的值，那么返回该节点</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; p</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; q</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(p.val&gt;root.val&amp;&amp;q.val&gt;root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.val&lt;root.val&amp;&amp;q.val&lt;root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉搜索树的最近公共祖先&quot;&gt;&lt;a href=&quot;#二叉搜索树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树的最近公共祖先&quot;&gt;&lt;/a&gt;二叉搜索树的最近公共祖先&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”&lt;/p&gt;
&lt;p&gt;例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8&lt;br&gt;输出: 6&lt;br&gt;解释: 节点 2 和节点 8 的最近公共祖先是 6。&lt;br&gt;示例 2:&lt;/p&gt;
&lt;p&gt;输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4&lt;br&gt;输出: 2&lt;br&gt;解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。&lt;/p&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;所有节点的值都是唯一的。&lt;br&gt;p、q 为不同节点且均存在于给定的二叉搜索树中。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>原型对象的设置与访问</title>
    <link href="http://yoursite.com/2019/09/03/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2019/09/03/原型对象的设置与访问/</id>
    <published>2019-09-03T13:17:58.000Z</published>
    <updated>2019-09-03T13:47:07.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型对象的访问"><a href="#原型对象的访问" class="headerlink" title="原型对象的访问"></a>原型对象的访问</h2><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h3><p><strong>proto</strong>属性是Object.prototype 一个简单的访问器属性，其中包含了get（获取）和set（设置）的方法</p><p><strong>proto</strong>的读取器(getter)暴露了一个对象的内部 [[Prototype]] 。对于使用对象字面量创建的对象，这个值是 Object.prototype。对于使用数组字面量创建的对象，这个值是 Array.prototype。对于functions，这个值是Function.prototype。</p><p><strong>proto</strong> 的设置器(setter)允许对象的 [[Prototype]]被变更。要变更的值必须是一个object或null，提供其它值将不起任何作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item=item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=<span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用__proto__属性访问原型</span></span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__); <span class="comment">// Test &#123; sayHello: [Function] &#125;</span></span><br><span class="line">test.sayHello(); <span class="comment">// 'hello'</span></span><br></pre></td></tr></table></figure><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Object.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p>Object.getPrototypeOf(object)</p></blockquote><p>参数：<br>obj: 要返回的对象的原型</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item=item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=<span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Object.getPrototypeOf()方法访问原型</span></span><br><span class="line"><span class="keyword">let</span> proto=<span class="built_in">Object</span>.getPrototypeOf(test);</span><br><span class="line"><span class="built_in">console</span>.log(proto); <span class="comment">// Test &#123; sayHello: [Function] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="原型对象的设置"><a href="#原型对象的设置" class="headerlink" title="原型对象的设置"></a>原型对象的设置</h2><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>Object.setPrototypeOf() 方法设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  null。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><blockquote><p>Object.setPrototypeOf(obj, prototype)</p></blockquote><p>参数：<br>obj: 要设置其原型的对象</p><p>prototype: 该对象的新原型（一个对象或null）</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item=item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=<span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Object.setPrototypeOf()方法修改对象的原型</span></span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'say hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(test,a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(test)===a); <span class="comment">// true</span></span><br><span class="line">test.sayHello(); <span class="comment">// 'say hello'</span></span><br></pre></td></tr></table></figure><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。 </p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><blockquote><p>Object.create(proto[, propertiesObject])</p></blockquote><p>参数：<br>proto<br>    新创建对象的原型对象。</p><p>propertiesObject<br>    可选。如果没有指定为 undefined，则是要添加到新创建对象的可枚举属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应Object.defineProperties()的第二个参数。</p><p>返回值</p><p>一个新对象，带着指定的原型对象和属性。</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item=item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Object.create创建一个新对象，该新对象的原型对象为给定值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=<span class="built_in">Object</span>.create(Test.prototype);</span><br><span class="line">Test.call(test,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(test)===Test.prototype); <span class="comment">// true</span></span><br><span class="line">test.sayHello(); <span class="comment">// 'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(test.item); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// Test &#123; item: 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="proto-1"><a href="#proto-1" class="headerlink" title="__proto__"></a>__proto__</h3><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item=item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用__Proto__属性来设置原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=&#123;&#125;;</span><br><span class="line">test.__proto__=Test.prototype;</span><br><span class="line">Test.call(test,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(test)===Test.prototype); <span class="comment">// true</span></span><br><span class="line">test.sayHello(); <span class="comment">// 'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(test.item); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// Test &#123; item: 1 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型对象的访问&quot;&gt;&lt;a href=&quot;#原型对象的访问&quot; class=&quot;headerlink&quot; title=&quot;原型对象的访问&quot;&gt;&lt;/a&gt;原型对象的访问&lt;/h2&gt;&lt;h3 id=&quot;proto&quot;&gt;&lt;a href=&quot;#proto&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>获取对象属性名的几种方法</title>
    <link href="http://yoursite.com/2019/09/03/%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/03/获取对象属性名的几种方法/</id>
    <published>2019-09-03T08:07:40.000Z</published>
    <updated>2019-09-03T08:43:36.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是可枚举属性和不可枚举属性"><a href="#什么是可枚举属性和不可枚举属性" class="headerlink" title="什么是可枚举属性和不可枚举属性"></a>什么是可枚举属性和不可枚举属性</h2><p>可枚举属性是指那些内部 “可枚举” 标志（[[ Enumerable]]）设置为 true 的属性。</p><p>对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true;</p><p>对于通过 Object.defineProperty 等定义的属性，该标识值默认为 false（当然该方法也可以设置 enumerable的值为true，使其变为可枚举属性）。</p><h2 id="Object-keys-–只返回自身对象的可枚举属性"><a href="#Object-keys-–只返回自身对象的可枚举属性" class="headerlink" title="Object.keys() –只返回自身对象的可枚举属性"></a>Object.keys() –只返回自身对象的可枚举属性</h2><p>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 。如果对象的键-值都不可枚举，那么将返回由键组成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b=&#123;</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置a对象的不可枚举属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a,<span class="string">'_item'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置b对象为a的原型对象</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(a,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只会返回当前对象的所有可枚举属性，而不会返回其原型对象上的可枚举属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(a)); <span class="comment">// ['item']</span></span><br></pre></td></tr></table></figure><h2 id="for…in-–返回整条原型链上的可枚举属性"><a href="#for…in-–返回整条原型链上的可枚举属性" class="headerlink" title="for…in –返回整条原型链上的可枚举属性"></a>for…in –返回整条原型链上的可枚举属性</h2><p>for…in语句以任意顺序遍历一个对象的除Symbol以外的可枚举属性。</p><p>循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性（更接近原型链中对象的属性覆盖原型属性）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b=&#123;</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置a对象的不可枚举属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a,<span class="string">'_item'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置b对象为a对象的原型对象</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(a,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会返回其自身的所有可枚举属性以及其原型链上的所有可枚举属性(包括其原型对象，其原型对象的原型对象一直到除Object,prototype的顶端原型对象)</span></span><br><span class="line"><span class="keyword">let</span> ans=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> a) &#123;</span><br><span class="line">    ans.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ans); <span class="comment">// ['item','b','c']</span></span><br></pre></td></tr></table></figure><h2 id="getOwnPropertyNames-–返回自身对象的所有属性（包括不可枚举但不包括Symbol值）"><a href="#getOwnPropertyNames-–返回自身对象的所有属性（包括不可枚举但不包括Symbol值）" class="headerlink" title="getOwnPropertyNames() –返回自身对象的所有属性（包括不可枚举但不包括Symbol值）"></a>getOwnPropertyNames() –返回自身对象的所有属性（包括不可枚举但不包括Symbol值）</h2><p>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p><p>它与上述两种方法的不同之处在于其可以返回不可枚举属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b=&#123;</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置a对象的不可枚举属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a,<span class="string">'_item'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置b对象为a对象的原型对象</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(a,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回自身对象的所有属性，包括可枚举属性和不可枚举属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnpropertyNames(a)); <span class="comment">//['item','_item']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是可枚举属性和不可枚举属性&quot;&gt;&lt;a href=&quot;#什么是可枚举属性和不可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;什么是可枚举属性和不可枚举属性&quot;&gt;&lt;/a&gt;什么是可枚举属性和不可枚举属性&lt;/h2&gt;&lt;p&gt;可枚举属性是指那些内部 “可枚举” 
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-234 回文链表</title>
    <link href="http://yoursite.com/2019/09/03/leetcode-234/"/>
    <id>http://yoursite.com/2019/09/03/leetcode-234/</id>
    <published>2019-09-03T07:44:13.000Z</published>
    <updated>2019-09-03T07:50:08.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回文链表"><a href="#回文链表" class="headerlink" title="回文链表"></a>回文链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请判断一个链表是否为回文链表。</p><p>示例 1:</p><blockquote><p>输入: 1-&gt;2<br>输出: false</p></blockquote><p>示例 2:</p><blockquote><p>输入: 1-&gt;2-&gt;2-&gt;1<br>输出: true</p></blockquote><p>进阶：<br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-linked-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-linked-list</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一个简单的想法就是，将该链表的所有节点值都取出来，然后判断是否回文。但是，题目要求为O(1)的空间复杂度，因此不能使用数组来存储。因此，我们可以使用哈希表来存储，以链表节点的下标为键名，节点值为键值来存入哈希表</p><p>之后利用双指针来判断是否回文</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>建立哈希表</li><li>遍历该链表，以链表节点的下标为键名，节点值为键值来存入哈希表</li><li>设置前后双指针，如果指针未相遇时，前后指针在哈希表中的键值不相同的话那么返回false</li><li>否则，返回true</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cur=head;</span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        map.set(index,cur.val);</span><br><span class="line">        index++;</span><br><span class="line">        cur=cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right=index<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.get(left)!==map.get(right)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回文链表&quot;&gt;&lt;a href=&quot;#回文链表&quot; class=&quot;headerlink&quot; title=&quot;回文链表&quot;&gt;&lt;/a&gt;回文链表&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;请判断一个链表是否为回文链表。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 1-&amp;gt;2&lt;br&gt;输出: false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 1-&amp;gt;2-&amp;gt;2-&amp;gt;1&lt;br&gt;输出: true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进阶：&lt;br&gt;你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="http://yoursite.com/2019/09/02/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2019/09/02/浅拷贝与深拷贝/</id>
    <published>2019-09-02T13:02:23.000Z</published>
    <updated>2019-09-04T13:14:47.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是浅拷贝与深拷贝"><a href="#什么是浅拷贝与深拷贝" class="headerlink" title="什么是浅拷贝与深拷贝"></a>什么是浅拷贝与深拷贝</h2><blockquote><p>浅拷贝与深拷贝是只针对Object和Array这样的引用数据类型的</p></blockquote><p>浅拷贝指的是在复制对象的时候，对第一层键值进行独立的复制。若键值为基本类型值，则复制该基本类型值；若键值为引用类型值，则复制该引用类型值的引用</p><p>深拷贝则会创造另一个对象，只是这个对象与被拷贝的对象一模一样，但是并没有占用同一块内存</p><h2 id="赋值操作是浅拷贝吗"><a href="#赋值操作是浅拷贝吗" class="headerlink" title="赋值操作是浅拷贝吗"></a>赋值操作是浅拷贝吗</h2><p>在将一个对象赋值给另一个对象的时候，其实是将该对象的引用地址复制给了它。因此两个对象占用同一个内存</p><p>但是，浅拷贝是在复制对象的时候，对第一层键值进行独立的复制。因此，新旧对象并不占用同一个内存，所以，原对象在浅拷贝之后做的任何操作都不会影响浅拷贝得到的对象</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用赋值操作得到的对象</span></span><br><span class="line"><span class="keyword">let</span> b=a;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123;item:1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b===a); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用浅拷贝得到的对象</span></span><br><span class="line"><span class="keyword">let</span> c=&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(c,a);</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// &#123;item:1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(c===a); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改原对象</span></span><br><span class="line">a.item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b.item); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c.item); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>显然，赋值得到的对象与原对象占用同一个内存；而浅拷贝得到的对象与原对象并没有占有同一个内存，因此，原对象做出的任何修改都不会影响浅拷贝得到的对象</p><h2 id="实现浅拷贝的几种方法"><a href="#实现浅拷贝的几种方法" class="headerlink" title="实现浅拷贝的几种方法"></a>实现浅拷贝的几种方法</h2><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Object.assign() 方法用于将所有可枚举属性的值从<strong>一个或多个</strong>源对象复制到目标对象。它将返回目标对象。</p><p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p>Object.assign(target, …sources)</p></blockquote><p>参数：<br>target: 拷贝得到的对象<br>sources: 被拷贝的对象，可以是多个</p><p>Object.assign()方法主要做的工作就是，遍历要拷贝对象的属性，如果该属性值为基本类型值，那么就复制该属性值；如果，该属性值为引用类型值，那么就复制该引用类型值的引用。</p><p>因此，该方法只拷贝对象的第一层属性</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    tree:&#123;</span><br><span class="line">        k:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用浅拷贝得到的对象</span></span><br><span class="line"><span class="keyword">let</span> c=&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(c,a);</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// &#123;item:1,tree:&#123;k:2&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(c===a); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改原对象的第一层基本类型值</span></span><br><span class="line">a.item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c.item); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改原对象的第二层基本类型值</span></span><br><span class="line">a.tree.k=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c.tree.k); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>因此，使用浅拷贝得到的对象，如果其第一层属性值为基本类型值，那么原对象修改后，不会影响浅拷贝得到的对象；</p><p>如果其第一层属性值为引用类型值，那么原对象修改后会影响拷贝得到的对象</p><h3 id="实现Object-assign-方法"><a href="#实现Object-assign-方法" class="headerlink" title="实现Object.assign()方法"></a>实现Object.assign()方法</h3><p>知道浅拷贝的思想之后，那么实现Object.assign()方法就很容易了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">receiver=&#123;&#125;,supplier</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> keys=<span class="built_in">Object</span>.keys(supplier);</span><br><span class="line">    keys.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        receiver[v]=supplier[v];</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> receiver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用展开运算符"><a href="#使用展开运算符" class="headerlink" title="使用展开运算符"></a>使用展开运算符</h3><p>展开运算符在构造字面量对象时，可以进行克隆或者属性拷贝（ECMAScript 2018规范新增特性）：</p><blockquote><p>let objClone = { …obj };</p></blockquote><p>其行为是, 将已有对象的所有可枚举(enumerable)属性拷贝到新构造的对象中.</p><p>浅拷贝(Shallow-cloning, 不包含 prototype) 和对象合并, 可以使用更简短的展开语法。而不必再使用 Object.assign() 方式.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    tree:&#123;</span><br><span class="line">        item:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b=&#123;...a&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123;item:1,tree:&#123;item:2&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b===a); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">a.item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b.item); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a.tree.item=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b.tree.item); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>当然，使用展开运算符也可以拷贝多个对象。它像Object.assign方法一样，可以接受任意数量的原对象，并按指定顺序将属性复制到接受对象中。所以，如果多个原对象具有相同的属性名，那么排位靠后的原对象的属性值会覆盖排位靠前的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    tree:&#123;</span><br><span class="line">        item:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b=&#123;</span><br><span class="line">    item:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c=&#123;...a,...b&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// &#123; item: 2, tree: &#123; item: 2 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="对于数组对象"><a href="#对于数组对象" class="headerlink" title="对于数组对象"></a>对于数组对象</h3><p>对于数组对象，可以使用以下方法</p><ol><li>Array.prototype.concat()</li><li>Array.prototype.slice()</li><li>new Array()结合不定参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=[<span class="number">1</span>,&#123;<span class="attr">item</span>:<span class="number">1</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用concat()方法</span></span><br><span class="line"><span class="keyword">let</span> arr1=test.concat();</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1,&#123;item:1&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1===test); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">1</span>]===test[<span class="number">1</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用slice()方法</span></span><br><span class="line"><span class="keyword">let</span> arr2=test.concat();</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1,&#123;item:1&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2===test); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">1</span>]===test[<span class="number">1</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用new Array()方法</span></span><br><span class="line"><span class="keyword">let</span> arr3=<span class="keyword">new</span> <span class="built_in">Array</span>(...arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1,&#123;item:1&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3===test); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3[<span class="number">1</span>]===test[<span class="number">1</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组中引用类型元素的值</span></span><br><span class="line">test[<span class="number">1</span>].item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;arr1[<span class="number">1</span>].item&#125;</span></span></span><br><span class="line"><span class="string"><span class="subst">$&#123;arr2[<span class="number">1</span>].item&#125;</span> </span></span><br><span class="line"><span class="string"><span class="subst">$&#123;arr3[<span class="number">1</span>].item&#125;</span></span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>数组对象的浅拷贝实质上就是，遍历整个数组将数组元素复制到另一个新的数组对象中去；</p><p>因此，当数组元素为基本类型值时，复制的就是基本类型值，原数组改变该值不会影响新数组</p><p>但是当数组元素为引用类型值时，复制的就是引用类型值的引用，那么原数组修改该值就会影响新的数组</p><h2 id="实现深拷贝的几种方法"><a href="#实现深拷贝的几种方法" class="headerlink" title="实现深拷贝的几种方法"></a>实现深拷贝的几种方法</h2><h3 id="利用JSON"><a href="#利用JSON" class="headerlink" title="利用JSON"></a>利用JSON</h3><p>我们可以使用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象。此时生成的对象与原对象会是完全不同的对象，里面的任何属性都不会占用同一个内存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    tree:&#123;</span><br><span class="line">        item:<span class="number">2</span>,</span><br><span class="line">        tree:&#123;</span><br><span class="line">            item:<span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用JSON方法深拷贝</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; item: 1, tree: &#123; item: 2, tree: &#123; item: 3 &#125; &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a===b); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a.tree===b.tree); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改原对象的引用类型属性</span></span><br><span class="line">a.tree.tree.item=<span class="number">4</span>；</span><br><span class="line"><span class="built_in">console</span>.log(b.tree.tree.item); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>这种方法虽然简便，但还是有一些缺点，比如</p><ol><li>会忽略undefined</li><li>不能序列化函数<blockquote><p>这是因为JSON.stringify() 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，不能接受函数</p></blockquote></li><li>无法拷贝Symbol</li></ol><h3 id="递归拷贝"><a href="#递归拷贝" class="headerlink" title="递归拷贝"></a>递归拷贝</h3><p>在深拷贝一个对象时，我们需要考虑要拷贝的这个对象时常规<strong>键值对</strong>对象还是数组对象。因为，遇到前者我们需要生成一个新的空对象{}，而遇到后者时我们需要生成一个新的空数组对象[]</p><p>那么，我们需要通过什么方法来检测，某个对象究竟是数组对象还是常规对象呢?可以采用如下方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target).slice(<span class="number">8</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(check(<span class="keyword">new</span> <span class="built_in">Object</span>())); <span class="comment">// Object</span></span><br><span class="line"><span class="built_in">console</span>.log(check(<span class="keyword">new</span> <span class="built_in">Array</span>())); <span class="comment">// Array</span></span><br></pre></td></tr></table></figure><p>因此，深拷贝完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(check(target)===<span class="string">'Array'</span>) ans=[];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(check(target)===<span class="string">'Object'</span>) ans=&#123;&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> target;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(check(target[i])===<span class="string">'Array'</span>||check(target[i])===<span class="string">'Object'</span>) &#123;</span><br><span class="line">            ans[i]=deepClone(target[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans[i]=target[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  <span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target=&#123;<span class="attr">item</span>:<span class="number">1</span>,<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">item</span>:<span class="number">2</span>&#125;],<span class="attr">tree</span>:&#123;<span class="attr">tree</span>:&#123;<span class="attr">item</span>:<span class="number">3</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> rev=deepClone(target);</span><br><span class="line"><span class="built_in">console</span>.log(rev); <span class="comment">// &#123; item: 1, a: [ 1, 2, &#123; item: 2 &#125; ], tree: &#123; tree: &#123; item: 3 &#125; &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(rev.a===target.a); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是浅拷贝与深拷贝&quot;&gt;&lt;a href=&quot;#什么是浅拷贝与深拷贝&quot; class=&quot;headerlink&quot; title=&quot;什么是浅拷贝与深拷贝&quot;&gt;&lt;/a&gt;什么是浅拷贝与深拷贝&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;浅拷贝与深拷贝是只针对Object和Array这样
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6中对于对象作出了哪些扩展</title>
    <link href="http://yoursite.com/2019/09/02/ES6%E4%B8%AD%E5%AF%B9%E4%BA%8E%E5%AF%B9%E8%B1%A1%E4%BD%9C%E5%87%BA%E4%BA%86%E5%93%AA%E4%BA%9B%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2019/09/02/ES6中对于对象作出了哪些扩展/</id>
    <published>2019-09-02T06:29:33.000Z</published>
    <updated>2019-09-02T07:44:48.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象字面量语法的扩展"><a href="#对象字面量语法的扩展" class="headerlink" title="对象字面量语法的扩展"></a>对象字面量语法的扩展</h2><h3 id="属性初始值的简写"><a href="#属性初始值的简写" class="headerlink" title="属性初始值的简写"></a>属性初始值的简写</h3><p>在ES6之前，当我们声明一个对象时，可能该对象的属性名与该对象可访问到的作用链上的某变量同名。那么显然此时会发生一些重复</p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name:name,</span><br><span class="line">        age:age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了消除这种属性名称与局部变量之间的重复书写。在ES6中，当一个对象的属性与本地变量同名时，不必再写冒号和值，简单地只写属性名即可。</p><p>这也意味着，当在声明属性时，如果采用这种简写语法，只要保证能够访问到以该属性名为变量名的变量即可。（也就是，该变量所在的活动对象需在当前对象的所能访问到的作用链上）</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同一个作用域内声明对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(&#123;a,b&#125;); <span class="comment">// &#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量处在同一作用域链上时声明对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a,</span><br><span class="line">        b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// &#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量不处在同一作用域上声明对象</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a,</span><br><span class="line">        b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// 报错：ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>当对象字面量中只有一个属性的名称时，JavaScript引擎会在可访问作用域中查找其同名变量；如果找到，则该变量的值被赋给对象字面量里的同名属性</p><h3 id="对象方法的简写语法"><a href="#对象方法的简写语法" class="headerlink" title="对象方法的简写语法"></a>对象方法的简写语法</h3><p>在ES6中，通过对象字面量法创建对象时，如果为对象添加方法，可以不再使用键值对来声明方法</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    test()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.test(); <span class="comment">// 'test'</span></span><br></pre></td></tr></table></figure><h3 id="可计算属性名"><a href="#可计算属性名" class="headerlink" title="可计算属性名"></a>可计算属性名</h3><h4 id="点记法与方括号法"><a href="#点记法与方括号法" class="headerlink" title="点记法与方括号法"></a>点记法与方括号法</h4><p>当想访问一个对象的属性时，可以采用点记法和方括号法</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    name:<span class="string">'ming'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// 'ming'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方括号内为字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">'age'</span>]); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方括号内可以表示为字符串的变量</span></span><br><span class="line"><span class="keyword">let</span> age=<span class="string">'age'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[age]); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，当使用方括号语法时，方括号内必须是字符串或者表示字符串的变量</p></blockquote><p>当然，该字符串可以不是一个合法的标识符；它可以是任意值</p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> firstName=<span class="string">'first name'</span>;</span><br><span class="line">a[firstName]=<span class="string">'ming'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; 'first name': 'ming' &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>另外,使用点表示法时，点的后面必须是一个有效的 JavaScript 标识符，例如，一串字母数字字符，也包括下划线及美元符号，但不能以数字作为开头。比如，object.$1是合法的，而 object.1是无效不合法的。但是可以通过方括号表示法来解决这个问题</p></blockquote><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> item=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    [item]:<span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; '1': 123 &#125;</span></span><br><span class="line"><span class="comment">// 将1转化为一个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">'1'</span>]); <span class="comment">//123</span></span><br></pre></td></tr></table></figure><h4 id="在对象字面量中使用可计算属性名"><a href="#在对象字面量中使用可计算属性名" class="headerlink" title="在对象字面量中使用可计算属性名"></a>在对象字面量中使用可计算属性名</h4><p>在对象字面量中使用方括号语法表示该属性名是可以被计算的。也就是说方括号内如果是一个变量，那么这个变量将会被求值并转化为一个字符串；如果方括号内是一个字符串，那么就使用这个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方括号内为一个变量，该变量表示一个字符串</span></span><br><span class="line"><span class="comment">//变量会被求值得到字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item=<span class="string">'itemA'</span>;</span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    [item]:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; itemA: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[item]); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.itemA); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方括号内为字符串，那么就使用这个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    [<span class="string">'itemA'</span>]:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; itemA: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">'itemA'</span>]); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.itemA); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方括号内为一个变量，该变量表示的不是一个字符串</span></span><br><span class="line"><span class="comment">// 变量会通过String()转型函数被转化为字符串，因此undefined和null也可以</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> test=<span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    [item]:<span class="number">123</span>,</span><br><span class="line">    [test]:<span class="number">987</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; '1': 123, undefined: 987 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.undefined); <span class="comment">// 987</span></span><br></pre></td></tr></table></figure><p>当然，可计算属性名也可以计算表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first=<span class="string">'first '</span></span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    [first+<span class="string">'name'</span>]:<span class="string">'ming'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; 'first name': 'ming' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">'first name'</span>]); <span class="comment">// ming</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象字面量语法的扩展&quot;&gt;&lt;a href=&quot;#对象字面量语法的扩展&quot; class=&quot;headerlink&quot; title=&quot;对象字面量语法的扩展&quot;&gt;&lt;/a&gt;对象字面量语法的扩展&lt;/h2&gt;&lt;h3 id=&quot;属性初始值的简写&quot;&gt;&lt;a href=&quot;#属性初始值的简写&quot; cla
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-232 用栈实现队列</title>
    <link href="http://yoursite.com/2019/09/02/leetcode-232/"/>
    <id>http://yoursite.com/2019/09/02/leetcode-232/</id>
    <published>2019-09-02T06:09:01.000Z</published>
    <updated>2019-09-02T06:16:46.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>使用栈实现队列的下列操作：</p><pre><code>push(x) -- 将一个元素放入队列的尾部。pop() -- 从队列首部移除元素。peek() -- 返回队列首部的元素。empty() -- 返回队列是否为空。</code></pre><p>示例:</p><pre><code>MyQueue queue = new MyQueue();queue.push(1);queue.push(2);  queue.peek();  // 返回 1queue.pop();   // 返回 1queue.empty(); // 返回 false</code></pre><p>说明:</p><ol><li>你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/implement-queue-using-stacks" target="_blank" rel="noopener">https://leetcode-cn.com/problems/implement-queue-using-stacks</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>队列与栈不一样的地方就在于，栈是先进后出，而队列是先进先出；因此，在利用栈实现队列，只有出队列方法不一样而已；</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>在实现出队列的方法时，需要准备一个备用栈，来存储出栈的元素。</li><li>当需要出队列时，将栈内所有元素出栈并以此存入到备用栈中；</li><li>将备用栈的栈顶元素出栈并保存到一个变量ans中；</li><li>将备用栈的所有元素出栈并以此存入回基本栈中</li><li>返回ans</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MyQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stack=[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Push element x to the back of queue. </span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stack.push(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> anotherStack=[];</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">this</span>.stack.length) &#123;</span><br><span class="line">        anotherStack.push(<span class="keyword">this</span>.stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ans=anotherStack.pop();</span><br><span class="line">    <span class="keyword">while</span>(anotherStack.length) &#123;</span><br><span class="line">        <span class="keyword">this</span>.stack.push(anotherStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the front element.</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns whether the queue is empty.</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack.length===<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyQueue()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.empty()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用栈实现队列&quot;&gt;&lt;a href=&quot;#用栈实现队列&quot; class=&quot;headerlink&quot; title=&quot;用栈实现队列&quot;&gt;&lt;/a&gt;用栈实现队列&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;使用栈实现队列的下列操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // 返回 1
queue.pop();   // 返回 1
queue.empty(); // 返回 false&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。&lt;/li&gt;
&lt;li&gt;你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。&lt;/li&gt;
&lt;li&gt;假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-113 路径总和 II</title>
    <link href="http://yoursite.com/2019/09/01/leetcode-113/"/>
    <id>http://yoursite.com/2019/09/01/leetcode-113/</id>
    <published>2019-09-01T05:54:45.000Z</published>
    <updated>2019-09-01T06:13:19.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路径总和-II"><a href="#路径总和-II" class="headerlink" title="路径总和 II"></a>路径总和 II</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p><p><img src="https://s2.ax1x.com/2019/09/01/nSzWBF.png" alt></p><p>返回:</p><p><img src="https://s2.ax1x.com/2019/09/01/nSzf74.png" alt></p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/path-sum-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-sum-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>不同于上题，这次还要记录路径和为给定值的路径上的所有值。那么我们可以用数组来进行记录，每次传入一个新的数组（包括该条路径上当前记录的所有的值）。</p><p>采用先序遍历，当遍历到叶子节点时，判断路径和是否为给定值，如果是，那么将该数组插入到ans数组中；否则，return；</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>创建ans数组</li><li>创建遍历函数(传入的参数为当前节点，当前路径和，当前已经被记录的节点值的数组)，如果节点为空，那么return</li><li>否则，将该节点的值记录到传入的数组中；如果当前节点为叶子节点，那么判断此时的路径和是否为给定值，如果是，那么将此时的数组push入ans数组中；如果不是，则return，接着遍历直到整棵树遍历完毕</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; sum</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">path</span>(<span class="params">root,s,array</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            array.push(root.val);</span><br><span class="line">            <span class="keyword">let</span> arrayCloneLeft=array.slice(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">let</span> arrayCloneRight=array.slice(<span class="number">0</span>);</span><br><span class="line">            s+=root.val;</span><br><span class="line">            <span class="keyword">if</span>(!root.left&amp;&amp;!root.right) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s===sum) &#123;</span><br><span class="line">                    ans.push(array);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path(root.left,s,arrayCloneLeft);</span><br><span class="line">            path(root.right,s,arrayCloneRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(root,<span class="number">0</span>,[])</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;路径总和-II&quot;&gt;&lt;a href=&quot;#路径总和-II&quot; class=&quot;headerlink&quot; title=&quot;路径总和 II&quot;&gt;&lt;/a&gt;路径总和 II&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例:&lt;br&gt;给定如下二叉树，以及目标和 sum = 22，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/09/01/nSzWBF.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;返回:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/09/01/nSzf74.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>getter与setter函数</title>
    <link href="http://yoursite.com/2019/08/31/getter%E4%B8%8Esetter%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/31/getter与setter函数/</id>
    <published>2019-08-31T12:20:59.000Z</published>
    <updated>2019-08-31T12:55:35.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h2><p>对象属性分为数据属性与访问器属性。访问器属性不包含数据值，它们包含一对getter与setter函数。在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter函数并传入新值</p><h2 id="什么是getter-setter"><a href="#什么是getter-setter" class="headerlink" title="什么是getter/setter"></a>什么是getter/setter</h2><ol><li>getter是获得属性值的方法，setter是设置属性值的方法</li><li>get与set并不是对象的属性，可以说是伪属性，特性只有内部才用，一般利用Object.getOwnPropertyDescriptor()方法来查询属性的特性；利用Object.defineProperty来定义和修改属性的特性</li></ol><h2 id="怎么定义getter与setter"><a href="#怎么定义getter与setter" class="headerlink" title="怎么定义getter与setter"></a>怎么定义getter与setter</h2><h3 id="get与set语法"><a href="#get与set语法" class="headerlink" title="get与set语法"></a>get与set语法</h3><p>get/set语法会将对象属性绑定到查询/调用的函数</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">get</span> getItem() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> setItem(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; item: 1, getItem: [Getter], setItem: [Setter] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.getItem); <span class="comment">// 1</span></span><br><span class="line">a.setItem=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.getItem); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>get与set绑定的函数名可以是一样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">get</span> _item() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> _item(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; item: 1, _item: [Getter/Setter] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a._item); <span class="comment">// 1</span></span><br><span class="line">a._item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a._item); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>当然,get与set也可以绑定多个函数名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    name:<span class="string">'ming'</span>,</span><br><span class="line">    <span class="keyword">get</span> _item() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> _item(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> _name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> _name(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;item: 1,name: 'ming',_item: [Getter/Setter],_name: [Getter/Setter]&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a._item); <span class="comment">// 1</span></span><br><span class="line">a._item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a._item); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a._name); <span class="comment">// ming</span></span><br><span class="line">a._name=<span class="string">'xiao ming'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a._name); <span class="comment">// xioa ming</span></span><br></pre></td></tr></table></figure><h3 id="defineProperty-方法"><a href="#defineProperty-方法" class="headerlink" title="defineProperty()方法"></a>defineProperty()方法</h3><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</p><p>语法：</p><blockquote><p>Object.defineProperty(obj, prop, descriptor)</p></blockquote><p>参数</p><p>obj<br>    要在其上定义属性的对象。</p><p>prop<br>    要定义或修改的属性的名称。</p><p>descriptor<br>    将被定义或修改的属性描述符</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;<span class="attr">item</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a,<span class="string">'_item'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a._item); <span class="comment">// 1</span></span><br><span class="line">a._item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a._item); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="getter与setter的作用"><a href="#getter与setter的作用" class="headerlink" title="getter与setter的作用"></a>getter与setter的作用</h2><p>getter与setter的作用我觉得是可以在对赋值和取值之前做一层封装，拦截这些操作，定义一些其他操作（在赋值与取值之前进行一些额外的操作）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;<span class="attr">item</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a,<span class="string">'_item'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (item) &#123;</span><br><span class="line">        <span class="keyword">let</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`a.item的值在<span class="subst">$&#123;date.toLocaleString()&#125;</span>被修改`</span>);</span><br><span class="line">        <span class="keyword">this</span>.item=item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a._item); <span class="comment">// 1</span></span><br><span class="line">a._item=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a._item);</span><br><span class="line"><span class="comment">// a.item的值在2019-8-31 20:50:59被修改</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>在上述代码中,我在setter函数赋值后，输出属性值被修改的时间。从而可以监测到值何时被修改。</p><p>这就是拦截了赋值操作,先进行了额外定义的检测值被修改的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;访问器属性&quot;&gt;&lt;a href=&quot;#访问器属性&quot; class=&quot;headerlink&quot; title=&quot;访问器属性&quot;&gt;&lt;/a&gt;访问器属性&lt;/h2&gt;&lt;p&gt;对象属性分为数据属性与访问器属性。访问器属性不包含数据值，它们包含一对getter与setter函数。在读取访问器属
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Es6一些新的函数参数知识</title>
    <link href="http://yoursite.com/2019/08/31/Es6%E4%B8%80%E4%BA%9B%E6%96%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/08/31/Es6一些新的函数参数知识/</id>
    <published>2019-08-31T07:53:52.000Z</published>
    <updated>2019-09-02T06:26:33.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h2><p>每个函数都会有一个arguments对象(类数组对象)，它引用着函数的实参而非形参。</p><p>因此，Js函数有一个十分特别的特性，即无论形参有几个，都可以传入任意个实参值，并且由arguments对象引用着</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// [Arguments] &#123; '0': 1, '1': 2, '2': 3 &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><p>因为在函数定义中声明了多少形参，都可以传入任意数量的参数。那么，如果，传入的参数要比形参少时，我们能否给没有得到传值的形参赋予默认值呢？</p><h3 id="Es5模拟默认参数值"><a href="#Es5模拟默认参数值" class="headerlink" title="Es5模拟默认参数值"></a>Es5模拟默认参数值</h3><p>如果一个参数没有传入值，那么那个形参就会是已声明但未定义，因此，形参就会被默认赋予undefined</p><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>那么，我们可以在函数体中检测该形参值是否为undefined来判断是否来赋予形参默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    a=((<span class="keyword">typeof</span> a)!==<span class="string">'undefined'</span>)?a:<span class="number">1</span>;</span><br><span class="line">    b=((<span class="keyword">typeof</span> b)!==<span class="string">'undefined'</span>)?b:<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// 0,0</span></span><br><span class="line">test(<span class="number">0</span>); <span class="comment">// 0,2</span></span><br><span class="line">test(); <span class="comment">// 1,2</span></span><br></pre></td></tr></table></figure><h3 id="Es6中的默认参数值"><a href="#Es6中的默认参数值" class="headerlink" title="Es6中的默认参数值"></a>Es6中的默认参数值</h3><p>Es6简化了像Es5模拟默认参数值进行检测形参值是否为undefined的操作，它可以在形参后赋予一个初始值，当没有实参传入时，则使用那个初始值</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b=<span class="number">1</span>,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c); <span class="comment">// undefined,1,undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>如上所示，test函数调用时没有传入任何参数，因此没有赋予初始值的a,c会输出undefined，而赋予初始值的形参在没有获得实参传入时就会获得该初始值</p><p>但是，其实质上也是像Es5一样检测了形参值是否为undefined；因此，当你显示地传入undefined值时，它还是会获得被赋予的初始值；</p><p>注意，null是一个空对象指针，它不等于undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b=<span class="number">1</span>,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c); <span class="comment">// undefined,1,undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>);</span><br><span class="line">test(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>); <span class="comment">// null,null,null</span></span><br></pre></td></tr></table></figure><h3 id="默认参数值对arguments对象的影响"><a href="#默认参数值对arguments对象的影响" class="headerlink" title="默认参数值对arguments对象的影响"></a>默认参数值对arguments对象的影响</h3><h4 id="没有使用默认参数值"><a href="#没有使用默认参数值" class="headerlink" title="没有使用默认参数值"></a>没有使用默认参数值</h4><p>在Es5非严格模式下，当形参值发生变化时，arguments对象也会做出相应的改变；即，命名参数的变化会同步更新到arguments对象中</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 1 2 [Arguments] &#123; '0': 1, '1': 2 &#125;</span></span><br><span class="line">    a=++a;</span><br><span class="line">    b=++b;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 2 3 [Arguments] &#123; '0': 2, '1': 3 &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arguments对象发生了变化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="使用默认参数值"><a href="#使用默认参数值" class="headerlink" title="使用默认参数值"></a>使用默认参数值</h4><p>在Es6中，如果函数使用了默认参数值（哪怕所有形参都被传入了实参值），那么所有形参值的变化都不会影响arguments对象，即，默认参数值的存在使得arguments对象保持与命名参数的分离</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a=<span class="number">3</span>,b=<span class="number">4</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 1 2 [Arguments] &#123; '0': 1, '1': 2 &#125;</span></span><br><span class="line">    a=++a;</span><br><span class="line">    b=++b;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 2 3 [Arguments] &#123; '0': 1, '1': 2 &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arguments对象没有发生变化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="默认参数表达式"><a href="#默认参数表达式" class="headerlink" title="默认参数表达式"></a>默认参数表达式</h3><p>默认参数初始值的赋予可以通过函数来进行</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b=getB(</span>)) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b); <span class="comment">// undefined 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>对于上面的test函数，初次解析函数声明的时候并不会执行getB方法，只有放该函数被调用且没有传入b的实参时才会被执行</p><p>因此，默认参数值的赋予是在函数调用时进行的，所以，我们就可以使用先定义的参数来作为后定义的参数的初始值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b=a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b); <span class="comment">// 1,1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// b形参没有传入实现值，因此会赋予形参a的值，此时a传入了实参值1，因此b也被赋予为1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>但是，如果先定义的参数使用后定义的参数来作为初始值，就会发生错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a=b,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b); </span><br><span class="line">    <span class="comment">// 报错： ReferenceError: Cannot access 'b' before initialization</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="literal">undefined</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>具体原因，类似于let与const声明会具有的临时死区(TDZ)</p><h3 id="默认参数的临时死区"><a href="#默认参数的临时死区" class="headerlink" title="默认参数的临时死区"></a>默认参数的临时死区</h3><p>与let和const声明类似，默认参数也具有临时死区，在临时死区内的参数不可访问。</p><p>在参数被定义时，在预编译阶段，这些参数会被放入临时死区内，如果在运行到这些参数声明语句之前就访问这些参数，那么就会导致程序抛出错误</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a=b,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b); </span><br><span class="line">    <span class="comment">// 报错： ReferenceError: Cannot access 'b' before initialization</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="literal">undefined</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>上述参数赋值阶段的行为类似于以下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="literal">undefined</span>;</span><br><span class="line">a=b; <span class="comment">// 此时b还在临时死区内，无法被访问</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h2><p>当传入的实参数量小于形参数量时，我们可以使用默认参数值；</p><p>那么，如果，当传入的实参数量大于形参数量，我们一般会想到使用arguments对象来表示这些实参；<br>而Es6给我们引入了不定参数的特性，来方便地表示传入的实参</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在函数的命名参数前添加三个点（…）就表明这是一个不定参数，该参数为一个数组，包含着自它之后传入的所有实参，通过这个数组名可以逐一访问到里面的参数</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,...arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,arr); <span class="comment">// 1,[2,3,4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>每个函数最多只能声明一个不定参数，并且该不定参数一定要放在所有的参数的末尾</li><li>不定参数不能用于对象字面量的setter函数中,因为，setter函数的参数有且只能有一个。因此不能传入不定参数，哪怕即使只是传入一个值 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">set</span> _item(...item)&#123;</span><br><span class="line">        <span class="keyword">this</span>.item=item[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a._item=<span class="number">3</span>;</span><br><span class="line"><span class="comment">// 赋值时会报错</span></span><br><span class="line"><span class="comment">// Setter function argument must not be a rest parameter</span></span><br><span class="line"><span class="built_in">console</span>.log(a.item);</span><br></pre></td></tr></table></figure></li></ol><h2 id="怎么判断函数是被new还是被普通调用"><a href="#怎么判断函数是被new还是被普通调用" class="headerlink" title="怎么判断函数是被new还是被普通调用"></a>怎么判断函数是被new还是被普通调用</h2><p>JavaScript函数有两个内部方法：[[Call]]和[[Construct]]。当通过new关键字调用函数时，执行的是[[Construct]]；而当为普通调用时，执行的时[[Call]]函数。</p><p>具有[[construct]]方法的函数被称为构造函数，但不是所有的函数都有[[Construct]]方法，比如箭头函数，因此箭头函数不能被new关键字调用</p><h3 id="元素性-new-target"><a href="#元素性-new-target" class="headerlink" title="元素性 new.target"></a>元素性 new.target</h3><p>为了解决判断函数是否通过new关键字调用的问题，Es6引入了new.target元属性。</p><p>当调用[[Construct]]方法，即使用new关键字调用函数时，new.target被赋值为当前构造函数；<br>如果是普通调用，那么new.target值为undefined</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);</span><br><span class="line">    <span class="keyword">this</span>.item=item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=<span class="keyword">new</span> Test(<span class="number">1</span>); <span class="comment">// [Function Test]</span></span><br><span class="line">Test(<span class="number">1</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// &#123;item:1&#125;</span></span><br></pre></td></tr></table></figure><p>注意：<br>在函数外面使用new.target会造成语法错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span>.target);</span><br><span class="line"><span class="comment">// SyntaxError: new.target only allowed within functions</span></span><br></pre></td></tr></table></figure><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;arguments对象&quot;&gt;&lt;a href=&quot;#arguments对象&quot; class=&quot;headerlink&quot; title=&quot;arguments对象&quot;&gt;&lt;/a&gt;arguments对象&lt;/h2&gt;&lt;p&gt;每个函数都会有一个arguments对象(类数组对象)，它引用着函数
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-231 2的幂</title>
    <link href="http://yoursite.com/2019/08/31/leetcode-231/"/>
    <id>http://yoursite.com/2019/08/31/leetcode-231/</id>
    <published>2019-08-31T06:57:24.000Z</published>
    <updated>2019-08-31T07:20:56.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2的幂"><a href="#2的幂" class="headerlink" title="2的幂"></a>2的幂</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><p>示例 1:</p><blockquote><p>输入: 1<br>输出: true<br>解释: 20 = 1</p></blockquote><p>示例 2:</p><blockquote><p>输入: 16<br>输出: true<br>解释: 24 = 16</p></blockquote><p>示例 3:</p><blockquote><p>输入: 218<br>输出: false</p></blockquote><!--morer--><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/power-of-two" target="_blank" rel="noopener">https://leetcode-cn.com/problems/power-of-two</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>题目给定要求的是整数，那么也就是自然数，因为2的幂次方大于0，因此我们只要考虑大于等于1的整数即可。</p><p>对于，这些整数，我们可以将该数不断除以2，如果得到的结果不是整数，那么该数就不是2的幂次方；如果，最终得到的结果为1，那么该数就是2的幂次方</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>如果输入为0，返回false;</li><li>如果该数为1，返回true</li><li>否则，将该数除以2，如果结果不为整数，返回false；如果为整数，那么重复该步骤直到结果为1或者返回fase</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPowerOfTwo = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n===<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(n/<span class="number">2</span>!==<span class="built_in">Math</span>.floor(n/<span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n=n/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2的幂&quot;&gt;&lt;a href=&quot;#2的幂&quot; class=&quot;headerlink&quot; title=&quot;2的幂&quot;&gt;&lt;/a&gt;2的幂&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描
      
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>模板字面量</title>
    <link href="http://yoursite.com/2019/08/30/%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    <id>http://yoursite.com/2019/08/30/模板字面量/</id>
    <published>2019-08-30T08:10:03.000Z</published>
    <updated>2019-09-02T06:25:56.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是模板字面量"><a href="#什么是模板字面量" class="headerlink" title="什么是模板字面量"></a>什么是模板字面量</h2><p>模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为“模板字符串”。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`string text`</span>  <span class="comment">// 相当于普通字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text line 1</span></span><br><span class="line"><span class="string"> string text line 2`</span> <span class="comment">// 多行字符串  </span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span>  <span class="comment">// 带有占位符</span></span><br><span class="line"></span><br><span class="line">tag <span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span></span><br></pre></td></tr></table></figure><p>模板字符串使用反引号 (<code></code>) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\）。</p><p>在模板字符串中，不需要转义单双引号</p><h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`abc  </span></span><br><span class="line"><span class="string">def`</span>);            </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line">abc</span><br><span class="line">def</span><br></pre></td></tr></table></figure><p>注意：</p><p>在两个反引号之间的所有空白字符串都是有效的，都属于字符串的一部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`abc</span></span><br><span class="line"><span class="string">             def`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">abc</span><br><span class="line">             def</span><br></pre></td></tr></table></figure><p>因此我们可以考虑使用第一行留白的方法来对齐缩进文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string">    abc</span></span><br><span class="line"><span class="string">    def</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">    abc</span><br><span class="line">    def</span><br></pre></td></tr></table></figure><p>当然我们也可以使用\n在模板字符串中显示换行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`abc\ndef`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">abc</span><br><span class="line">def</span><br></pre></td></tr></table></figure><h2 id="字符串占位符"><a href="#字符串占位符" class="headerlink" title="字符串占位符"></a>字符串占位符</h2><p>在一个模板字面量中，你可以任何合法的JavaScript表达式嵌入到占位符中并将其作为字符串中的一部分输出到结果中去</p><p>占位符由${}组成，中间可以包含任意的表达式</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">'ming'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// My name is ming</span></span><br></pre></td></tr></table></figure><p>除了变量，占位符还可以嵌入其他表达式，包括运算式、函数调用等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`ming`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;getName()&#125;</span>`</span>); <span class="comment">// My name is ming</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="string">'xiao'</span>+<span class="string">'ming'</span>&#125;</span>`</span>); <span class="comment">// My name is xiaoming</span></span><br></pre></td></tr></table></figure><h2 id="嵌套模板"><a href="#嵌套模板" class="headerlink" title="嵌套模板"></a>嵌套模板</h2><p>模板字面量本身也是Js表达式，所以你可以在任意一个模板字面量里嵌入另外一个模板字面量</p><p>注意：</p><p>是另外一个模板字面量而不是占位符，即：<br>应该是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;&#125;</span>`</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`&amp;&#123;&amp;&#123;&#125;&#125;`</span> <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="number">2</span>&gt;<span class="number">1</span>?<span class="string">`<span class="subst">$&#123;<span class="number">2</span>&gt;<span class="number">1</span>?<span class="string">'yes'</span>:<span class="string">'no'</span>&#125;</span>`</span>:<span class="string">'no'</span><span class="string">`) // 'yes'</span></span></span></span><br></pre></td></tr></table></figure><h2 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h2><p>更高级的形式的模板字符串是带标签的模板字符串。标签使您可以用函数解析模板字符串。标签函数的第一个参数包含一个字符串值的数组。其余的参数与表达式相关。最后，你的函数可以返回处理好的的字符串（或者它可以返回完全不同的东西，）。用于该标签的函数的名称可以被命名为任何名字。</p><h3 id="定义标签"><a href="#定义标签" class="headerlink" title="定义标签"></a>定义标签</h3><p>标签可以是一个函数，其函数名可以任意（符合变量命名规则）</p><p>标签函数语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">literals,...substitutions</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数解释</p><p><strong>literals</strong>: <br>该参数是一个字符串数组，其包括模板字面量中占位符之前，之后，以及之间的字符串</p><p>例如，对于模板字符串<br><code>${girlName},my name is ${boyName}</code><br>则，其数组为[‘’,’,my name is ‘,’’]</p><p><strong>substitutions</strong>:<br>该参数是模板字符串中所有占位符结果的值，例如以上模板字符串，则数组应该为${girlName}的值和${boyName}的值</p><p>注意</p><blockquote><p>不难发现,literals数组的长度永远比substitutions数组长度多1</p></blockquote><h3 id="标签模板例子"><a href="#标签模板例子" class="headerlink" title="标签模板例子"></a>标签模板例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">literals,...sub</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(literals,sub);</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> sub) &#123;</span><br><span class="line">        ans+=literals[i];</span><br><span class="line">        ans+=sub[i];</span><br><span class="line">    &#125; </span><br><span class="line">    ans+=literals[literals.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name=<span class="string">'ming'</span>;</span><br><span class="line"><span class="keyword">let</span> mes=tag<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(mes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="string">'my name is '</span>, <span class="string">''</span> ] [ <span class="string">'ming'</span> ]</span><br><span class="line">my name is ming</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是模板字面量&quot;&gt;&lt;a href=&quot;#什么是模板字面量&quot; class=&quot;headerlink&quot; title=&quot;什么是模板字面量&quot;&gt;&lt;/a&gt;什么是模板字面量&lt;/h2&gt;&lt;p&gt;模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-226 翻转二叉树</title>
    <link href="http://yoursite.com/2019/08/30/leetcode-226/"/>
    <id>http://yoursite.com/2019/08/30/leetcode-226/</id>
    <published>2019-08-30T02:58:46.000Z</published>
    <updated>2019-08-30T03:06:41.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>翻转一棵二叉树。</p><p>示例：</p><p>输入：</p><p><img src="https://s2.ax1x.com/2019/08/30/mOqPHO.png" alt></p><p>输出：</p><p><img src="https://s2.ax1x.com/2019/08/30/mOqFED.png" alt></p><p>备注:<br>这个问题是受到 Max Howell 的 原问题 启发的 ：</p><p>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/invert-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/invert-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>翻转二叉树，可以利用深度优先遍历，对于二叉树来说也就是先序遍历；在遍历的同时交换其左右子树</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>如果节点为空，那么返回null</li><li>否则，交换其左右子树</li><li>递归遍历左右子树</li><li>重复1,2,3步骤直到整颗二叉树遍历完毕</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root===<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> empty=root.left;</span><br><span class="line">        root.left=root.right;</span><br><span class="line">        root.right=empty;</span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;翻转二叉树&quot;&gt;&lt;a href=&quot;#翻转二叉树&quot; class=&quot;headerlink&quot; title=&quot;翻转二叉树&quot;&gt;&lt;/a&gt;翻转二叉树&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;翻转一棵二叉树。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/30/mOqPHO.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/30/mOqFED.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;备注:&lt;br&gt;这个问题是受到 Max Howell 的 原问题 启发的 ：&lt;/p&gt;
&lt;p&gt;谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数组扁平化</title>
    <link href="http://yoursite.com/2019/08/29/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>http://yoursite.com/2019/08/29/数组扁平化/</id>
    <published>2019-08-29T03:20:03.000Z</published>
    <updated>2019-08-29T10:19:32.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><p>数组的扁平化，就是将一个嵌套多层的数组按照给定深度转化为原本深度减去给定深度的数组</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat()); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><h2 id="flat-方法"><a href="#flat-方法" class="headerlink" title="flat()方法"></a>flat()方法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>var newArray = arr.flat(depth)</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>depth(可选)</p><p>指定要提取嵌套数组的结构深度，默认值为1</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个包含数组与子数组所有元素的新数组</p><h2 id="实现数组扁平化flat-方法"><a href="#实现数组扁平化flat-方法" class="headerlink" title="实现数组扁平化flat()方法"></a>实现数组扁平化flat()方法</h2><h3 id="利用递归实现"><a href="#利用递归实现" class="headerlink" title="利用递归实现"></a>利用递归实现</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>根据给定深度遍历，那么我们需要知道每一层数组的深度。当遍历每一层数组时，若遇到了内一层的数组，那么对该数组再执行Flat函数，也就是进行递归；若不是，则放入ans数组</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flat</span>(<span class="params">arr,depth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr,dep</span>)</span>&#123;</span><br><span class="line">        dep++;</span><br><span class="line">        <span class="keyword">if</span>(dep&gt;depth) &#123;ans.push(arr);<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">                flat(arr[i],dep);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]) ans.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(arr,<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Flat([<span class="number">1</span>,<span class="number">2</span>, ,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]],[<span class="number">7</span>,<span class="number">8</span>,[<span class="number">9</span>,<span class="number">10</span>,[<span class="number">11</span>,<span class="number">12</span>]]]],<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, [ <span class="number">11</span>, <span class="number">12</span> ] ]</span><br></pre></td></tr></table></figure><h3 id="利用reduce方法实现"><a href="#利用reduce方法实现" class="headerlink" title="利用reduce方法实现"></a>利用reduce方法实现</h3><p>reduce方法就是遍历原数组，将每个元素利用concat方法进行拼接。因为concat方法进行拼接时会将被拼接的数组的最外层数组去掉，只取得内部的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flat</span>(<span class="params">arr,depth</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr,dep</span>) </span>&#123;</span><br><span class="line">        dep++;</span><br><span class="line">        <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep&gt;=depth) &#123;</span><br><span class="line">                <span class="keyword">return</span> pre.concat(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur)?pre.concat(flat(cur,dep)):pre.concat(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,[])</span><br><span class="line">    &#125;)(arr,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Flat([<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>]]]],<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [ <span class="number">7</span>, <span class="number">8</span> ] ]</span><br></pre></td></tr></table></figure><h3 id="利用toString-方法实现"><a href="#利用toString-方法实现" class="headerlink" title="利用toString()方法实现"></a>利用toString()方法实现</h3><p>使用toString()方法我目前能想到的好像只能将数组完全扁平化到一维数组，而不能根据给定深度来扁平化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.toString().split(<span class="string">','</span>).map(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">parseInt</span>(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Flat([<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]</span><br></pre></td></tr></table></figure><h3 id="使用展开运算符…"><a href="#使用展开运算符…" class="headerlink" title="使用展开运算符…"></a>使用展开运算符…</h3><p>类似于使用reduce配合concat,但是还是离不开递归</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组扁平化&quot;&gt;&lt;a href=&quot;#数组扁平化&quot; class=&quot;headerlink&quot; title=&quot;数组扁平化&quot;&gt;&lt;/a&gt;数组扁平化&lt;/h2&gt;&lt;p&gt;数组的扁平化，就是将一个嵌套多层的数组按照给定深度转化为原本深度减去给定深度的数组&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-566 重塑矩阵</title>
    <link href="http://yoursite.com/2019/08/29/leetcode-566/"/>
    <id>http://yoursite.com/2019/08/29/leetcode-566/</id>
    <published>2019-08-29T03:00:07.000Z</published>
    <updated>2019-08-29T03:06:35.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重塑矩阵"><a href="#重塑矩阵" class="headerlink" title="重塑矩阵"></a>重塑矩阵</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。</p><p>给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。</p><p>重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。</p><p>如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p><p>示例 1:</p><blockquote><p>输入:\<br>nums = <br>[[1,2],<br> [3,4]]<br>r = 1, c = 4<br>输出: <br>[[1,2,3,4]]<br>解释:<br>行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。</p></blockquote><p>示例 2:</p><blockquote><p>输入: <br>nums = <br>[[1,2],<br> [3,4]]<br>r = 2, c = 4<br>输出: <br>[[1,2],<br> [3,4]]<br>解释:<br>没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。</p></blockquote><p>注意：</p><ol><li>给定矩阵的宽和高范围在 [1, 100]。</li><li>给定的 r 和 c 都是正数。<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reshape-the-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reshape-the-matrix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>重塑矩阵，意思也就是将原先的n<em>m矩阵转化为题目要求的r</em>c矩阵；一种思路是我们在遍历数组的所有元素的时候就插入到r<em>c新矩阵中；另一种思路是，将整个二维数组扁平化为一维数组，然后再转化为新的r</em>c矩阵</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>将数组扁平化</li><li>转化为r*c矩阵</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; r</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; c</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> matrixReshape = <span class="function"><span class="keyword">function</span>(<span class="params">nums, r, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    <span class="keyword">let</span> numsFlat=nums.flat();</span><br><span class="line">    <span class="keyword">if</span>(r*c!==numsFlat.length) <span class="keyword">return</span> nums;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;r;i++) &#123;</span><br><span class="line">            ans[i]=[];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;c;k++) &#123;</span><br><span class="line">                ans[i].push(numsFlat.shift());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重塑矩阵&quot;&gt;&lt;a href=&quot;#重塑矩阵&quot; class=&quot;headerlink&quot; title=&quot;重塑矩阵&quot;&gt;&lt;/a&gt;重塑矩阵&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。&lt;/p&gt;
&lt;p&gt;给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。&lt;/p&gt;
&lt;p&gt;重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。&lt;/p&gt;
&lt;p&gt;如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入:\&lt;br&gt;nums = &lt;br&gt;[[1,2],&lt;br&gt; [3,4]]&lt;br&gt;r = 1, c = 4&lt;br&gt;输出: &lt;br&gt;[[1,2,3,4]]&lt;br&gt;解释:&lt;br&gt;行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: &lt;br&gt;nums = &lt;br&gt;[[1,2],&lt;br&gt; [3,4]]&lt;br&gt;r = 2, c = 4&lt;br&gt;输出: &lt;br&gt;[[1,2],&lt;br&gt; [3,4]]&lt;br&gt;解释:&lt;br&gt;没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给定矩阵的宽和高范围在 [1, 100]。&lt;/li&gt;
&lt;li&gt;给定的 r 和 c 都是正数。
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Javascript与简单正则表达式</title>
    <link href="http://yoursite.com/2019/08/28/Javascript%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/28/Javascript与正则表达式/</id>
    <published>2019-08-28T08:01:01.000Z</published>
    <updated>2019-08-30T03:17:51.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><h2 id="Js怎么支持正则表达式"><a href="#Js怎么支持正则表达式" class="headerlink" title="Js怎么支持正则表达式"></a>Js怎么支持正则表达式</h2><p>Es是通过RegExp类型来支持正则表达式。</p><h3 id="怎么创建正则表达式"><a href="#怎么创建正则表达式" class="headerlink" title="怎么创建正则表达式"></a>怎么创建正则表达式</h3><h4 id="使用正则表达式字面量"><a href="#使用正则表达式字面量" class="headerlink" title="使用正则表达式字面量"></a>使用正则表达式字面量</h4><p>语法</p><blockquote><p>let pat=/pattern/flags</p></blockquote><p>其中,pattern部分是正则表达式，而flags部分是标志，可以是0或多个，其中标志包括下列三种：</p><ol><li>g: 表示全局模式，即模式将被应用到所有的字符串，而非在发现第一个匹配项时就立刻停止；若没有该标志，则表示该模式时在发现第一个匹配项时就立刻停止</li><li>i: 表示不区分大小写模式，即在确定匹配项时忽略模式与字符串的大小写</li><li>m: 表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否存在于模式匹配的项</li></ol><h4 id="使用RegExp构造函数创建"><a href="#使用RegExp构造函数创建" class="headerlink" title="使用RegExp构造函数创建"></a>使用RegExp构造函数创建</h4><p>语法</p><blockquote><p>let re=new RegExp(“pattern”,”flags”);</p></blockquote><p>其中，pattern与flags意义同上</p><h3 id="正则表达式的一些相关重要方法"><a href="#正则表达式的一些相关重要方法" class="headerlink" title="正则表达式的一些相关重要方法"></a>正则表达式的一些相关重要方法</h3><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h4><p>exec()方法是专门为捕获组而设计的。exec()接受一个参数，即要应用模式的字符串，然后返回包括第一个匹配项信息的数组；或者在没有匹配的情况下返回null</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.oog(pattern.exec(str)); <span class="comment">// [ 'cat', index: 0, input: 'cat pat hat', groups: undefined ]</span></span><br></pre></td></tr></table></figure><h4 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h4><p>test()方法接受一个字符串参数。在模式与该参数匹配的情况下返回true;否则，返回false。经常被用于if判断语句</p><p>只要在字符串中存在某字符串能够匹配正则表达式的模式，那么就会返回true</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="String-match-方法"><a href="#String-match-方法" class="headerlink" title="String.match()方法"></a>String.match()方法</h4><p>match() 方法检索返回一个字符串匹配正则表达式的的结果。</p><p>语法：</p><blockquote><p>str.match(regexp);</p></blockquote><p>参数：</p><p>regexp:<br>一个正则表达式对象。如果传入的是一个非正则表达式对象，则会隐式地使用new RegExp(obj)将其转化为一个正则表达式对象。如果没有给定任何参数，那么则会返回一个空数组</p><p>返回值：</p><ol><li>如果使用g标志，那么则返回所有与正则表达式匹配的结果(Array)，但不会返回捕获组；或者没有匹配项返回null</li><li>如果不使用g标志，那么则返回第一个完整匹配及相关的捕获组。</li></ol><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pat','hat']</span></span><br></pre></td></tr></table></figure><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符是正则表达式的基本组成元素。</p><p>具体元字符如下：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配除了换行符以外的任意字符</td></tr><tr><td>[]</td><td>匹配方括号中的任意一个字符,可以使用连字符’-‘来表示范围，例如 [a,b,c]可以表示为[a-c]</td></tr><tr><td>[^]</td><td>上一个的反状态，即匹配除了括号内的任意一个字符</td></tr><tr><td>{n,m}</td><td>匹配前面的字符[n,m]次，即至少n次，但是不超过m次</td></tr><tr><td>(xyz)</td><td>相当于四则运算中常用的小括号，解释为按照确切的顺序来匹配字符xyz</td></tr><tr><td>|</td><td>分支结构，匹配符号之前的字符或后面的字符</td></tr><tr><td>\</td><td>转义符，它可以还原元字符原来的含义，允许你匹配保留元字符</td></tr><tr><td>*</td><td>匹配前面的子表达式0次或多次</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次</td></tr><tr><td>?</td><td>匹配前面的子表达式0次或一次，或指定一个非贪婪限定符</td></tr><tr><td>^</td><td>匹配行的开始</td></tr><tr><td>$</td><td>匹配行的结束</td></tr><tr><td>\d</td><td>表示[0-9]，即1位数字</td></tr><tr><td>\D</td><td>表示除数字外的任意字符</td></tr><tr><td>\w</td><td>表示[0-9a-zA-z_]，即数字、大小写字母或下划线</td></tr><tr><td>\W</td><td>表示非单词字符，\w的对立</td></tr><tr><td>\s</td><td>表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符</td></tr><tr><td>\S</td><td>非空白符</td></tr></tbody></table><p>如果想要匹配任意字符，根据以上元字符可以使用</p><ol><li>\d|\D 或 [\d\D]</li><li>\w|\W 或 [\w\W]</li><li>\s|\S 或 [\s\S]</li><li>[^]</li></ol><h3 id="元字符详解与例子"><a href="#元字符详解与例子" class="headerlink" title="元字符详解与例子"></a>元字符详解与例子</h3><h4 id="元字符-1"><a href="#元字符-1" class="headerlink" title="元字符 ."></a>元字符 .</h4><p>元字符.可以用来匹配除了换行符之外的所有单个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pat','hat']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-2"><a href="#元字符-2" class="headerlink" title="元字符 []"></a>元字符 []</h4><p>元字符 []用来匹配方括号内的任意一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/[cph]at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pat','hat']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-3"><a href="#元字符-3" class="headerlink" title="元字符 [^]"></a>元字符 [^]</h4><p>元字符 [^]用来匹配除了方括号内字符的任意一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/[^cph]at/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pat hat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="元字符-n-m"><a href="#元字符-n-m" class="headerlink" title="元字符 {n,m}"></a>元字符 {n,m}</h4><p>元字符 {n,m}用来匹配该元字符的前一个字符[n,m]次（即至少n次但不超过m次）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.a&#123;1,2&#125;t/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat paat haaat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','paat','aaat']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-xyz"><a href="#元字符-xyz" class="headerlink" title="元字符 (xyz)"></a>元字符 (xyz)</h4><p>元字符 (xyz)我觉得其实相当于四则运算中的小括号，先执行小括号内的部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.(a|b|c)t/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pbt hct'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pbt','hct']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-4"><a href="#元字符-4" class="headerlink" title="元字符 |"></a>元字符 |</h4><p>元字符 | 用来定义分支结构，分支结构就是相当于或运算。即要么执行元字符之前的字符要么执行之后的字符或者都不；</p><p>注意： 该元字符类似于或运算具有短路操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.(a|b|c)t/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat pbt hct'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['cat','pbt','hct']</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/good|goodbye/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'good goodbye'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['good','good']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元字符 | 类似或运算具有短路操作，当前面的字符成立时就不会执行元字符之后的字符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码中，str字符串中的第一个'good'字符串满足正则表达式模式中的'good'，而后一个'goodbye'字符串虽然也满足'goodbye'，但是它先满足元字符之前的字符'good'，因此该运算被短路了，所以只返回了'good'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/goodbye|good/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'good goodbye'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['good','goodbye']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-5"><a href="#元字符-5" class="headerlink" title="元字符 \"></a>元字符 \</h4><p>元字符 \用来转义它的下一个字符。这将允许你使用保留字符来作为匹配元字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.at\./g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'cat\ pat/ hat.'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['hat.']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-6"><a href="#元字符-6" class="headerlink" title="元字符 *"></a>元字符 *</h4><p>元字符 *用来匹配上一个匹配规则的0次或多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/zk*/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zk z zkkk'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// [ 'zk', 'z', 'zkkk' ]</span></span><br></pre></td></tr></table></figure><h4 id="元字符-7"><a href="#元字符-7" class="headerlink" title="元字符 +"></a>元字符 +</h4><p>元字符 +用来匹配上一个字符的一次或多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/zk+/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zk z zkkk'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// [ 'zk','zkkk' ]</span></span><br></pre></td></tr></table></figure><h4 id="元字符-8"><a href="#元字符-8" class="headerlink" title="元字符 ?"></a>元字符 ?</h4><p>元字符 ?用来匹配前一个字符的0次或一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/zk?/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zk z zkkk'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// [ 'zk','z','zk' ]</span></span><br></pre></td></tr></table></figure><h4 id="元字符-9"><a href="#元字符-9" class="headerlink" title="元字符 ^"></a>元字符 ^</h4><p>元字符 ^用来检查匹配字符是否是输入字符串的第一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/(T|t)he/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['The','the']</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/^(T|t)he/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['The']</span></span><br></pre></td></tr></table></figure><h4 id="元字符-10"><a href="#元字符-10" class="headerlink" title="元字符 $"></a>元字符 $</h4><p>元字符 $用来检查匹配字符是否是输入字符串的最后一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.he/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['The','the']</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern=<span class="regexp">/.he$/g</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'The the'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ['the']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-190 颠倒二进制位</title>
    <link href="http://yoursite.com/2019/08/28/leetcode-190/"/>
    <id>http://yoursite.com/2019/08/28/leetcode-190/</id>
    <published>2019-08-28T02:09:31.000Z</published>
    <updated>2019-08-28T02:38:06.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="颠倒二进制位"><a href="#颠倒二进制位" class="headerlink" title="颠倒二进制位"></a>颠倒二进制位</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>颠倒给定的 32 位无符号整数的二进制位。</p><p>示例 1：</p><blockquote><p>输入: 00000010100101000001111010011100<br>输出: 00111001011110000010100101000000<br>解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，<br>      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。</p></blockquote><p>示例 2：</p><blockquote><p>输入：11111111111111111111111111111101<br>输出：10111111111111111111111111111111<br>解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，<br>      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。</p></blockquote><p>提示：</p><ol><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</li></ol><p>进阶:<br>如果多次调用这个函数，你将如何优化你的算法？</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-bits</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>输入的会是一个无符号整数可以转化为32位二进制表示；要求输出的是反转该32位二进制并转化为整数输出</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>利用模二取余法得到32位二进制数</li><li>将32位二进制数反转后转化为整数并返回</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125; - a positive integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> s=[];</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        s.unshift(n%<span class="number">2</span>);</span><br><span class="line">        n=<span class="built_in">Math</span>.floor(n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(s.length&lt;<span class="number">32</span>) &#123;</span><br><span class="line">        s.unshift(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.reduce(<span class="function">(<span class="params">pre,cur,curIndex</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre+cur*<span class="built_in">Math</span>.pow(<span class="number">2</span>,curIndex);</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;颠倒二进制位&quot;&gt;&lt;a href=&quot;#颠倒二进制位&quot; class=&quot;headerlink&quot; title=&quot;颠倒二进制位&quot;&gt;&lt;/a&gt;颠倒二进制位&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;颠倒给定的 32 位无符号整数的二进制位。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 00000010100101000001111010011100&lt;br&gt;输出: 00111001011110000010100101000000&lt;br&gt;解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，&lt;br&gt;      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：11111111111111111111111111111101&lt;br&gt;输出：10111111111111111111111111111111&lt;br&gt;解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，&lt;br&gt;      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。&lt;/li&gt;
&lt;li&gt;在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进阶:&lt;br&gt;如果多次调用这个函数，你将如何优化你的算法？&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>全局变量的声明以及如何避免声明全局变量</title>
    <link href="http://yoursite.com/2019/08/27/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%A3%B0%E6%98%8E%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/08/27/全局变量的声明以及如何避免声明全局变量/</id>
    <published>2019-08-27T09:33:17.000Z</published>
    <updated>2019-08-27T10:03:43.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局变量的声明"><a href="#全局变量的声明" class="headerlink" title="全局变量的声明"></a>全局变量的声明</h2><blockquote><p>全局变量会成为全局对象的属性</p></blockquote><p>那种方式的变量声明会形成全局变量呢？</p><p>Javascript运行环境分为浏览器环境和非浏览器环境（比如Node.js）</p><p>在浏览器环境中,有三种方式可以声明全局变量</p><ol><li>使用var关键字在全局作用域下显示声明</li><li>不适用任何声明关键字(var,let,const)直接给变量赋值，这属于隐式声明</li><li>使用全局对象作为其属性来声明</li></ol><p>浏览器环境中（全局对象为window对象）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">window</span>.c=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="built_in">window</span>.a); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b===<span class="built_in">window</span>.b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>但是，在Node.js中，上述方法中的方法2就不成立</p><p>Node.js环境（全局对象为global对象)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line">global.c=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a===global.a); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b===global.b); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(c===global.c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="如何避免声明全局变量"><a href="#如何避免声明全局变量" class="headerlink" title="如何避免声明全局变量"></a>如何避免声明全局变量</h2><p>使用let与const声明关键字</p><p>如果你在全局作用域中使用let或const来声明变量，那么会在全局作用域下创建一个新的绑定，但该绑定不会添加为全局对象的属性。</p><p>换句话说，用let或const不能覆盖全局变量，而只能遮蔽它</p><p>浏览器环境中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2 全局对象的属性a被var声明修改了</span></span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="built_in">window</span>.a); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(b===<span class="built_in">window</span>.b); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// b不是全局变量，因为使用let声明的b没有成为全局对象的属性</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果不想为全局变量创建属性或修改全局变量的属性，那么使用let和const要安全的多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;全局变量的声明&quot;&gt;&lt;a href=&quot;#全局变量的声明&quot; class=&quot;headerlink&quot; title=&quot;全局变量的声明&quot;&gt;&lt;/a&gt;全局变量的声明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;全局变量会成为全局对象的属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
