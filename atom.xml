<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-15T07:32:04.190Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Angel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-38 报数</title>
    <link href="http://yoursite.com/2019/08/15/leetcode-38/"/>
    <id>http://yoursite.com/2019/08/15/leetcode-38/</id>
    <published>2019-08-15T07:17:29.000Z</published>
    <updated>2019-08-15T07:32:04.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报数"><a href="#报数" class="headerlink" title="报数"></a>报数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p><pre><code>1.     12.     113.     214.     12115.     111221</code></pre><p>1 被读作  “one 1”  (“一个一”) , 即 11。<br>11 被读作 “two 1s” (“两个一”）, 即 21。<br>21 被读作 “one 2”,  “one 1” （”一个二” ,  “一个一”) , 即 1211。</p><p>给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。</p><p>注意：整数顺序将表示为一个字符串。</p><p>示例 1:</p><blockquote><p>输入: 1<br>输出: “1”</p></blockquote><p>示例 2:</p><blockquote><p>输入: 4<br>输出: “1211”</p></blockquote><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/count-and-say" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-and-say</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>报数，指报的是前一个数。当前一个数有连续个同样地数比如’111’，那么把这个念作（3个1），因此会输出31；又比如’123’，因为这三个数都不同，我们会报数为（1个1；1个2；1个3），因此会输出111213</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>不想多说，直接上代码</p><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countAndSay = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    ans[<span class="number">0</span>]=<span class="string">'1'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> sum=<span class="number">1</span>;</span><br><span class="line">        ans[i]=<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;ans[i<span class="number">-1</span>].length;k++)&#123;</span><br><span class="line">             <span class="keyword">if</span>(ans[i<span class="number">-1</span>][k]!==ans[i<span class="number">-1</span>][k+<span class="number">1</span>])&#123;</span><br><span class="line">                ans[i]+=sum.toString()+ans[i<span class="number">-1</span>][k];</span><br><span class="line">                sum=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[n<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;报数&quot;&gt;&lt;a href=&quot;#报数&quot; class=&quot;headerlink&quot; title=&quot;报数&quot;&gt;&lt;/a&gt;报数&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     1
2.     11
3.     21
4.     1211
5.     111221&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1 被读作  “one 1”  (“一个一”) , 即 11。&lt;br&gt;11 被读作 “two 1s” (“两个一”）, 即 21。&lt;br&gt;21 被读作 “one 2”,  “one 1” （”一个二” ,  “一个一”) , 即 1211。&lt;/p&gt;
&lt;p&gt;给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。&lt;/p&gt;
&lt;p&gt;注意：整数顺序将表示为一个字符串。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 1&lt;br&gt;输出: “1”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 4&lt;br&gt;输出: “1211”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树与二叉搜索树</title>
    <link href="http://yoursite.com/2019/08/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://yoursite.com/2019/08/15/二叉树与二叉搜索树/</id>
    <published>2019-08-15T02:20:44.000Z</published>
    <updated>2019-08-15T03:04:06.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>二叉树的递归定义</p><ol><li>要么二叉树没有根节点，是一棵空树</li><li>要么二叉树是由根节点、左子树、右子树组成，且左子树和右子树都是二叉树</li></ol><p>简单来说，就是二叉树要么是一棵空树，要么这棵树的每一个节点最多只有两个节点，并且左右子树是严格区分的</p><h2 id="二叉搜索树（BST）"><a href="#二叉搜索树（BST）" class="headerlink" title="二叉搜索树（BST）"></a>二叉搜索树（BST）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>二叉搜索树（Binary Search Tree）是一种特殊的二叉树，又称为排序二叉树，二叉查找树、二叉排序树。</p><p>二叉搜索树的递归定义</p><ol><li>要么二叉搜索树是一棵空树</li><li>要么二叉搜索树是由根节点、左子树、右子树组成，其中左子树和右子树都是二叉搜索树，且左子树上所有节点的数据域均小于根节点的数据域，右子树上所有节点的数据域均大于或等于根节点的数据域</li></ol><p>简单来说，二叉搜索树是二叉树的一种，但是它只允许你在左侧节点存储比父节点小的值；在右侧节点存储比父节点大或等于的值</p><h3 id="二叉搜索树的插入"><a href="#二叉搜索树的插入" class="headerlink" title="二叉搜索树的插入"></a>二叉搜索树的插入</h3><p>如果要插入的树为空树，那么就将要插入的节点作为这颗二叉搜索树的根节点；</p><p>如果不是，那么就根据二叉搜索树的特性，判断它与根节点的大小关系不断递归直到找到它的位置</p><p>二叉搜索树的插入实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;  <span class="comment">// 节点类</span></span><br><span class="line">    <span class="keyword">constructor</span>(key)&#123;</span><br><span class="line">        <span class="keyword">this</span>.key=key;</span><br><span class="line">        <span class="keyword">this</span>.left=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span></span>&#123; <span class="comment">// 二叉搜索树类</span></span><br><span class="line">    <span class="keyword">constructor</span>(root)&#123;</span><br><span class="line">        <span class="keyword">this</span>.root=root;</span><br><span class="line">    &#125;</span><br><span class="line">    insert(node)&#123; <span class="comment">// 二叉搜索树的插入方法</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root===<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.root=node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.insertNode(<span class="keyword">this</span>.root,node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    insertNode(root,node)&#123; <span class="comment">// insertNode方法（用来找到合适的位置进行插入）</span></span><br><span class="line">        <span class="keyword">if</span>(node.key&lt;root.key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left===<span class="literal">null</span>) &#123;</span><br><span class="line">                root.left=node;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.insertNode(root.left,node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(root.right===<span class="literal">null</span>) &#123;</span><br><span class="line">                root.right=node;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.insertNode(root.right,node);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> A=<span class="keyword">new</span> Node(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> B=<span class="keyword">new</span> Node(<span class="number">15</span>);</span><br><span class="line"><span class="keyword">let</span> C=<span class="keyword">new</span> Node(<span class="number">13</span>);</span><br><span class="line"><span class="keyword">let</span> D=<span class="keyword">new</span> Node(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">let</span> root=<span class="keyword">new</span> BinarySearchTree(A);</span><br><span class="line">root.insert(B);</span><br><span class="line">root.insert(C);</span><br><span class="line">root.insert(D);</span><br><span class="line"><span class="built_in">console</span>.log(root);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 输出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*BinarySearchTree &#123;</span></span><br><span class="line"><span class="comment">  root: Node &#123;</span></span><br><span class="line"><span class="comment">    key: 10,</span></span><br><span class="line"><span class="comment">    left: Node &#123; key: 7, left: null, right: null &#125;,</span></span><br><span class="line"><span class="comment">    right: Node &#123; key: 15, left: [Node], right: null &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的定义&quot;&gt;&lt;a href=&quot;#二叉树的定义&quot; class=&quot;headerlink&quot; title=&quot;二叉树的定义&quot;&gt;&lt;/a&gt;二叉树的定义&lt;/h2&gt;&lt;p&gt;二叉树的递归定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要么二叉树没有根节点，是一棵空树&lt;/li&gt;
&lt;li&gt;要么二叉树是
      
    
    </summary>
    
      <category term="算法笔记" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-118 杨辉三角</title>
    <link href="http://yoursite.com/2019/08/14/leetcode-118/"/>
    <id>http://yoursite.com/2019/08/14/leetcode-118/</id>
    <published>2019-08-14T06:29:05.000Z</published>
    <updated>2019-08-14T06:34:17.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p>示例:</p><blockquote><p>输入: 5<br>输出:<br>[<br>     [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]</p></blockquote><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/pascals-triangle" target="_blank" rel="noopener">https://leetcode-cn.com/problems/pascals-triangle</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>杨辉三角的每一行，除了首尾都是为1外，每一项都是前一行的两项之和</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>设置一个数组</li><li>建立numRows行二维数组，每一行除了首尾都是为1外，每一项都是前一行的两项之和</li><li>返回数组</li></ol><h3 id="coding实现"><a href="#coding实现" class="headerlink" title="coding实现"></a>coding实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; numRows</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span>(<span class="params">numRows</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;numRows;i++)&#123;</span><br><span class="line">        ans[i]=[];</span><br><span class="line">        ans[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        ans[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">1</span>;k&lt;i;k++)&#123;</span><br><span class="line">            ans[i][k]=ans[i<span class="number">-1</span>][k<span class="number">-1</span>]+ans[i<span class="number">-1</span>][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;杨辉三角&quot;&gt;&lt;a href=&quot;#杨辉三角&quot; class=&quot;headerlink&quot; title=&quot;杨辉三角&quot;&gt;&lt;/a&gt;杨辉三角&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。&lt;/p&gt;
&lt;p&gt;在杨辉三角中，每个数是它左上方和右上方的数的和。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 5&lt;br&gt;输出:&lt;br&gt;[&lt;br&gt;     [1],&lt;br&gt;    [1,1],&lt;br&gt;   [1,2,1],&lt;br&gt;  [1,3,3,1],&lt;br&gt; [1,4,6,4,1]&lt;br&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>操作符new到底做了哪些事</title>
    <link href="http://yoursite.com/2019/08/13/%E6%93%8D%E4%BD%9C%E7%AC%A6new%E5%88%B0%E5%BA%95%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2019/08/13/操作符new到底做了哪些事/</id>
    <published>2019-08-13T10:27:17.000Z</published>
    <updated>2019-08-14T09:09:53.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new操作符的作用"><a href="#new操作符的作用" class="headerlink" title="new操作符的作用"></a>new操作符的作用</h2><p>new操作符可以快速创建构造函数的实例，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.job=job;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHello=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> man=<span class="keyword">new</span> Person(<span class="string">'zjb'</span>,<span class="string">'18'</span>,<span class="string">'frontEnd'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(man); <span class="comment">// Object &#123; name: "zjb", age: "18", job: "frontEnd" &#125;</span></span><br><span class="line">man.sayHello(); <span class="comment">// 'hello'</span></span><br></pre></td></tr></table></figure><p>那么，使用new操作符来创建某构造函数的实例会经历以下四个步骤：</p><ol><li>内部创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><h2 id="自己实现一个new操作符"><a href="#自己实现一个new操作符" class="headerlink" title="自己实现一个new操作符"></a>自己实现一个new操作符</h2><p>既然new操作符的作用是创建一个构造函数的实例，那么new操作无非就是创建一个新的对象，将这个新对象的<strong>proto</strong>属性指向其构造函数的原型对象，然后该新对象绑定到构造函数上并获得传入的值，从而执行代码获得自身的对象属性</p><p>new操作符的代码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">obj,...arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=&#123;&#125;;</span><br><span class="line">    ans.__proto__=obj.prototype; <span class="comment">// 连接原型对象</span></span><br><span class="line">    <span class="comment">//Object.setPrototypeOf(ans, obj.prototype) 也可以，或许更高效</span></span><br><span class="line">    <span class="keyword">let</span> result=obj.apply(ans,arr); <span class="comment">// 获得构造函数的返回值</span></span><br><span class="line">    <span class="keyword">return</span> ans===<span class="built_in">Object</span>?ans:result;</span><br><span class="line">    <span class="comment">//用来判断构造函数的返回值是否与创建的实例不同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;new操作符的作用&quot;&gt;&lt;a href=&quot;#new操作符的作用&quot; class=&quot;headerlink&quot; title=&quot;new操作符的作用&quot;&gt;&lt;/a&gt;new操作符的作用&lt;/h2&gt;&lt;p&gt;new操作符可以快速创建构造函数的实例，如：&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何优雅地使用箭头函数</title>
    <link href="http://yoursite.com/2019/08/13/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/13/如何优雅地使用箭头函数/</id>
    <published>2019-08-13T10:26:18.000Z</published>
    <updated>2019-08-14T08:17:59.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是箭头函数"><a href="#什么是箭头函数" class="headerlink" title="什么是箭头函数"></a>什么是箭头函数</h2><p>箭头函数是ES6新增语法特性，它是一种使用箭头（=&gt;）定义函数的新语法，但是，他与传统的函数有些许的不同，主要集中在以下方面：</p><ol><li><strong>没有this,super,arguments和new.target绑定</strong> 箭头函数中的this,supper,arguments及new.target这些值有外围最近一层非箭头函数决定</li><li><strong>不能通过new关键字调用</strong> 箭头函数没有[  [Constuct]]方法，所以不能被作为构造函数</li><li><strong>没有原型</strong> 箭头函数不存在prototype这个属性</li><li>不可以改变this的绑定</li></ol><h2 id="箭头函数语法"><a href="#箭头函数语法" class="headerlink" title="箭头函数语法"></a>箭头函数语法</h2><p>当函数右侧的表达式只有一个时，可以没有显式的返回语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test=<span class="function"><span class="params">a</span>=&gt;</span>a+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="number">1</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>如果函数没有参数，也要在声明的时候写一组没有内容的小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test=<span class="function"><span class="params">()</span>=&gt;</span><span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// 'hello'</span></span><br></pre></td></tr></table></figure><p>如果想要返回一个对象字面量，则需要将该字面量包裹在小括号里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test=<span class="function"><span class="params">()</span>=&gt;</span>(&#123;<span class="attr">item</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// &#123;item:1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="没有this绑定"><a href="#没有this绑定" class="headerlink" title="没有this绑定"></a>没有this绑定</h2><p>箭头函数中没有this绑定，必须通过查找作用域链来确定this的值。</p><p>箭头函数的this在定义时就确定了，是由其外层代码的this决定</p><p>对于其外层代码的this指向我们可以参考另一篇博文《<a href="http://angellikefairy.coding.me/2019/08/13/Js%E4%B8%AD%E7%9A%84this%E5%88%B0%E5%BA%95%E6%8C%87%E5%90%91%E5%93%AA/" target="_blank" rel="noopener">Js中的this到底指向哪</a>》</p><p>简单来说，假设外层代码里有一句输出语句console.log(this); 那么输出的对象即为this的指向</p><p>被全局环境中定义的函数包含</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="function">(<span class="params">(</span>)=&gt;</span><span class="keyword">this</span>)()); <span class="comment">// window</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>被对象中定义的方法包含</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    a()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a()(); <span class="comment">// obj &#123; a: a() &#125;</span></span><br></pre></td></tr></table></figure><p>全局环境下定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a()); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>被另一个箭头函数包含</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    a()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'outter'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Object &#123; a: a() &#125;</span></span><br><span class="line">            (<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'inner'</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Object &#123; a: a() &#125;</span></span><br><span class="line">            &#125;)()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a()();</span><br></pre></td></tr></table></figure><p>最后，因为箭头函数没有 this，所以也不能用 call()、apply()、bind() 这些方法改变 this 的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test=<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">const</span> obj=&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test.apply(obj)); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><h2 id="创建立即执行表达式"><a href="#创建立即执行表达式" class="headerlink" title="创建立即执行表达式"></a>创建立即执行表达式</h2><p>立即执行表达式，即可以定义一个匿名函数并调用，自始至终不保存对该函数的引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>); <span class="comment">// 'hello'</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="没有arguments绑定"><a href="#没有arguments绑定" class="headerlink" title="没有arguments绑定"></a>没有arguments绑定</h2><p>箭头函数没有自己的arguments对象，且未来无论函数在哪个上下文中执行，箭头函数始终可以访问到外围函数的arguments对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 5</span></span><br><span class="line">    (<span class="function">(<span class="params">m</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 5</span></span><br><span class="line">    &#125;)(<span class="number">1</span>)</span><br><span class="line">&#125;)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是箭头函数&quot;&gt;&lt;a href=&quot;#什么是箭头函数&quot; class=&quot;headerlink&quot; title=&quot;什么是箭头函数&quot;&gt;&lt;/a&gt;什么是箭头函数&lt;/h2&gt;&lt;p&gt;箭头函数是ES6新增语法特性，它是一种使用箭头（=&amp;gt;）定义函数的新语法，但是，他与传统的函数有
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Js中的this到底指向哪</title>
    <link href="http://yoursite.com/2019/08/13/Js%E4%B8%AD%E7%9A%84this%E5%88%B0%E5%BA%95%E6%8C%87%E5%90%91%E5%93%AA/"/>
    <id>http://yoursite.com/2019/08/13/Js中的this到底指向哪/</id>
    <published>2019-08-13T07:08:42.000Z</published>
    <updated>2019-08-14T09:09:53.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是this"><a href="#什么是this" class="headerlink" title="什么是this"></a>什么是this</h2><p>对于this,我们可以下一个定义</p><blockquote><p>this是在执行上下文创建时确定的一个在执行过程中不可更改的变量。</p></blockquote><p>简单来说,this应当是当前执行代码的环境对象</p><h2 id="在函数中使用this"><a href="#在函数中使用this" class="headerlink" title="在函数中使用this"></a>在函数中使用this</h2><p>函数调用一般会有以下四种情境：</p><ol><li>在全局环境或是普通函数中直接调用</li><li>作为对象的方法</li><li>使用apply和call</li><li>作为构造函数</li></ol><h3 id="在全局环境或是普通函数中直接调用"><a href="#在全局环境或是普通函数中直接调用" class="headerlink" title="在全局环境或是普通函数中直接调用"></a>在全局环境或是普通函数中直接调用</h3><p>ps：全文均在浏览器环境下执行</p><h4 id="在全局环境中直接调用"><a href="#在全局环境中直接调用" class="headerlink" title="在全局环境中直接调用"></a>在全局环境中直接调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>===<span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="在函数中直接调用"><a href="#在函数中直接调用" class="headerlink" title="在函数中直接调用"></a>在函数中直接调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    m();</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>从这两个例子中，我们很容易可以得到：当函数在全局环境下或在某个函数中被直接调用时，那么其中的this会指向全局对象（window）</p><h3 id="函数作为对象的方法被调用"><a href="#函数作为对象的方法被调用" class="headerlink" title="函数作为对象的方法被调用"></a>函数作为对象的方法被调用</h3><p>先说结论，当函数作为对象的方法被调用时，this就会指向该对象</p><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    func()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.func();</span><br></pre></td></tr></table></figure><p>由于func函数被作为obj的对象调用，那么this就会指向obj</p><p>然而，我们经常会遇到这样的陷阱：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    func()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> func=obj.func;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>此时，fnc函数被赋值给了全局作用域下的func变量。因为我们知道，函数名只是一个指向函数对象的指针，因此，此时全局作用域下定义的func域obj对象中的func一样指向了同一个函数对象；然后，这个函数在全局作用域下被直接调用，所以this指向了window</p><h3 id="使用apply-call-bind"><a href="#使用apply-call-bind" class="headerlink" title="使用apply,call,bind"></a>使用apply,call,bind</h3><ol><li>apply() 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</li><li>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。<blockquote><p>注意：该方法的语法和作用与 apply() 方法类似，只有一个区别，就是 call() 方法接受的是一个参数列表，而 apply() 方法接受的是一个包含多个参数的数组。</p></blockquote></li><li>bind()方法创建一个新的函数，在bind()被调用时，这个新函数的this被bind的第一个参数指定，其余的参数将作为新函数的参数供调用时使用。</li></ol><p>其中，apply和call方法返回的是调用有指定this值和参数的函数的结果。</p><p>而bind方法是返回构建的新的函数</p><h4 id="apply与call的使用例子"><a href="#apply与call的使用例子" class="headerlink" title="apply与call的使用例子"></a>apply与call的使用例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>===<span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">    test.apply(<span class="keyword">this</span>); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>执行func函数，因为func函数被直接调用，因此func函数内部的this指向全局对象，在浏览器中即为window。然后，test函数通过apply方法被调用，因此test函数被传入的this值也是指向window的。</p><p>另一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">'bjz'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name=<span class="string">'fairy'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'angel'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.apply(obj); <span class="comment">// 'angel'</span></span><br></pre></td></tr></table></figure><p>与上个例子同理，test函数通过apply方法传入的this指向的是obj对象。</p><p>因为call方法与apply方法的作用是一样的，只是参数传递的形式有区别，因此，call的例子将会在下面列出</p><h4 id="apply与call方法的参数传递区别"><a href="#apply与call方法的参数传递区别" class="headerlink" title="apply与call方法的参数传递区别"></a>apply与call方法的参数传递区别</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sum=num1+num2;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123; sum: 3, callSum: callSum() &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    sum:<span class="number">0</span>,</span><br><span class="line">    callSum()&#123;</span><br><span class="line">        sum.call(<span class="keyword">this</span>,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">// 或者是sum.apply(this,[1,2])</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.callSum();</span><br></pre></td></tr></table></figure><p>callSum函数被作为obj的对象被调用，因此callSum函数内部的this指向obj对象。因此，sum函数通过call方法被传入的this对象也指向obj对象</p><h4 id="bind的使用例子"><a href="#bind的使用例子" class="headerlink" title="bind的使用例子"></a>bind的使用例子</h4><p>mdn上的解释</p><blockquote><p>bind() 最简单的用法是创建一个函数，不论怎么调用，这个函数都有同样的 this 值。JavaScript新手经常犯的一个错误是将一个方法从对象中拿出来，然后再调用，期望方法中的 this 是原来的对象（比如在回调中传入这个方法）。如果不做特殊处理的话，一般会丢失原来的对象。基于这个函数，用原始的对象创建一个绑定函数，巧妙地解决了这个问题：</p></blockquote><p>官方例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>;    <span class="comment">// 在浏览器中，this指向全局的 "window" 对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX();   </span><br><span class="line"><span class="comment">// 返回9 - 因为函数是在全局作用域中调用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，把 'this' 绑定到 module 对象</span></span><br><span class="line"><span class="comment">// 新手可能会将全局变量 x 与 module 的属性 x 混淆</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 81</span></span><br></pre></td></tr></table></figure><p>一个简单的小例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">test.bind(obj)() <span class="comment">//&#123;item:1&#125;</span></span><br></pre></td></tr></table></figure><p>由此可以看出，bind方法的返回值是一个新创建的函数，函数内部的this指向为传入的this值</p><h3 id="函数作为构造函数被调用"><a href="#函数作为构造函数被调用" class="headerlink" title="函数作为构造函数被调用"></a>函数作为构造函数被调用</h3><p>何为构造函数？所谓构造函数就是用来new对象的函数，像Function、Object、Array、Date等都是全局定义的构造函数。</p><p>来看例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b=<span class="keyword">new</span> Test();</span><br><span class="line"><span class="built_in">console</span>.log(b.item); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>如果函数作为构造函数用，那么其中的this就代表它即将new出来的对象。</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>参考另一篇博文 <a href="http://angellikefairy.coding.me/2019/08/13/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">如何优雅地使用箭头函数</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是this&quot;&gt;&lt;a href=&quot;#什么是this&quot; class=&quot;headerlink&quot; title=&quot;什么是this&quot;&gt;&lt;/a&gt;什么是this&lt;/h2&gt;&lt;p&gt;对于this,我们可以下一个定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this是在执行上下文创建
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-867 转置矩阵</title>
    <link href="http://yoursite.com/2019/08/13/leetcode-867/"/>
    <id>http://yoursite.com/2019/08/13/leetcode-867/</id>
    <published>2019-08-13T05:58:25.000Z</published>
    <updated>2019-08-13T06:02:20.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转置矩阵"><a href="#转置矩阵" class="headerlink" title="转置矩阵"></a>转置矩阵</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个矩阵 A， 返回 A 的转置矩阵。</p><p>矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p><p>示例 1：</p><blockquote><p>输入：[[1,2,3],[4,5,6],[7,8,9]]<br>输出：[[1,4,7],[2,5,8],[3,6,9]]</p></blockquote><p>示例 2：</p><blockquote><p>输入：[[1,2,3],[4,5,6]]<br>输出：[[1,4],[2,5],[3,6]]</p></blockquote><p>提示：</p><ol><li>1&lt;= A.length &lt;= 1000</li><li>1&lt;= A[0].length &lt;= 1000<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/transpose-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/transpose-matrix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于转置矩阵的特点，我们很容易得到，对于原数组A，ans[k][i]=A[i][k]</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>根据矩阵列数来创建ans二维数组的行数</li><li>由ans[k][i]=A[i][k]循环得到ans数组并返回</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; A</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> transpose = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;A[<span class="number">0</span>].length;i++)&#123;</span><br><span class="line">        ans[i]=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;A.length;k++)&#123;</span><br><span class="line">            ans[i][k]=A[k][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;转置矩阵&quot;&gt;&lt;a href=&quot;#转置矩阵&quot; class=&quot;headerlink&quot; title=&quot;转置矩阵&quot;&gt;&lt;/a&gt;转置矩阵&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个矩阵 A， 返回 A 的转置矩阵。&lt;/p&gt;
&lt;p&gt;矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：[[1,2,3],[4,5,6],[7,8,9]]&lt;br&gt;输出：[[1,4,7],[2,5,8],[3,6,9]]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：[[1,2,3],[4,5,6]]&lt;br&gt;输出：[[1,4],[2,5],[3,6]]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1&amp;lt;= A.length &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;1&amp;lt;= A[0].length &amp;lt;= 1000
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>对象的属性类型与特性</title>
    <link href="http://yoursite.com/2019/08/12/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/08/12/对象的属性类型与特性/</id>
    <published>2019-08-12T08:15:10.000Z</published>
    <updated>2019-08-12T10:31:02.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象的属性类型"><a href="#对象的属性类型" class="headerlink" title="对象的属性类型"></a>对象的属性类型</h2><p>对象包括两种属性类型，分别是</p><ol><li>数据属性</li><li>访问器属性</li></ol><h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><h4 id="定义及特性"><a href="#定义及特性" class="headerlink" title="定义及特性"></a>定义及特性</h4><p>数据属性相对于访问器属性来说，它拥有数据值</p><p>数据属性有4个描述其行为的特性，分别是</p><ol><li><p>configurable：可配置。（具体来说指的是，1.能否通过delete删除属性从而重新定义属性； 2.能否修改属性的特性；3.能否把属性修改为访问器属性；默认为true）</p></li><li><p>enumerable：可枚举。（表示是否可以通过for-in循环来返回属性；默认为true）</p></li><li><p>writable：可写。（表示能否修改属性的值；默认为true）</p><pre><code>以上三个属性取值为true或false。</code></pre></li><li><p>value：属性值。</p></li></ol><p>我们可以通过Object.getOwnPropertyDescriptor()这个方法来查看对象属性的特性</p><p>此方法可得到对象的数据属性，传入两个参数：第一个是要查找的对象名；第二个是要查找的属性名。</p><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(test,<span class="string">'item'</span>)) </span><br><span class="line"><span class="comment">//&#123; value: 1, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure><h4 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h4><p>要修改属性的默认特性，我们可以使用Object.defineProperty()来进行修改。当然我们也可以使用该方法来新建属性并同时制定它的属性特性</p><blockquote><p>注意： 在调用该方法创建新的属性时，如果不指定，默认会将除value外的特性值置为false;如果调用该方法只是修改已有属性，则无此限制</p></blockquote><p>这个方法接收三个参数：属性所在的对象、属性的名字(<strong>字符串类型</strong>),一个描述符对象。其中描述符对象的属性必须是数据属性四个特性中的一或多个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    item:<span class="number">1</span>,</span><br><span class="line">    name:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(test,<span class="string">'item'</span>,&#123;</span><br><span class="line">    enumerable:<span class="literal">false</span> <span class="comment">// 该属性无法被枚举</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> test)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(test,<span class="string">'item'</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span> <span class="comment">//让该属性不能被配置，具体指无法被删除，无法修改属性特性，无法修改为访问器属性</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">delete</span> test.item <span class="comment">// 该属性无法被删除</span></span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// &#123;item:1&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(test,<span class="string">'item'</span>,&#123;</span><br><span class="line">    value:<span class="number">2</span> <span class="comment">// 修改该属性的值为2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// &#123;item:2&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(test,<span class="string">'item'</span>,&#123;</span><br><span class="line">    writable:<span class="literal">false</span> <span class="comment">// 该属性的值无法被修改</span></span><br><span class="line">&#125;)</span><br><span class="line">test.item=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// &#123;item:2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><p>访问器属性不包含数据值；他们包含一对儿getter和setter函数；在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter函数并传入新值，这个函数负责决定如何处理数据</p><p>访问器属性有4个描述其行为的特性，分别是</p><ol><li><p>configurable：可配置。（具体来说指的是，1.能否通过delete删除属性从而重新定义属性； 2.能否修改属性的特性；3.能否把属性修改为访问器属性；默认为true）</p></li><li><p>enumerable：可枚举。（表示是否可以通过for-in循环来返回属性；默认为true）</p></li><li><p>get：在读取属性时调用的函数。默认值为undefined</p></li><li><p>set：在写入属性时调用的函数。默认值为undefined</p></li></ol><p>访问器属性不像数据属性一样可以直接被定义，它只能通过Object.defineProperty()来定义</p><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    _item:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(test,<span class="string">'item'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._item;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function(num)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>._item++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">test.item=<span class="number">15</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test.item); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>访问器属性的意义</p><ol><li>修改访问器属性动态修改相关联的数据属性</li><li>监听访问器属性的修改去操作其它业务逻辑</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象的属性类型&quot;&gt;&lt;a href=&quot;#对象的属性类型&quot; class=&quot;headerlink&quot; title=&quot;对象的属性类型&quot;&gt;&lt;/a&gt;对象的属性类型&lt;/h2&gt;&lt;p&gt;对象包括两种属性类型，分别是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据属性&lt;/li&gt;
&lt;li&gt;访问器属性&lt;/l
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-509 斐波那契数</title>
    <link href="http://yoursite.com/2019/08/12/leetcode-509/"/>
    <id>http://yoursite.com/2019/08/12/leetcode-509/</id>
    <published>2019-08-12T07:58:28.000Z</published>
    <updated>2019-08-12T08:09:29.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斐波那契数"><a href="#斐波那契数" class="headerlink" title="斐波那契数"></a>斐波那契数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>给定 N，计算 F(N)。</p><p>示例 1：</p><blockquote><p>输入：2<br>输出：1<br>解释：F(2) = F(1) + F(0) = 1 + 0 = 1.</p></blockquote><p>示例 2：</p><blockquote><p>输入：3<br>输出：2<br>解释：F(3) = F(2) + F(1) = 1 + 1 = 2.</p></blockquote><p>示例 3：</p><blockquote><p>输入：4<br>输出：3<br>解释：F(4) = F(3) + F(2) = 2 + 1 = 3.</p></blockquote><p>提示：</p><p>0 ≤ N ≤ 30</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/fibonacci-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/fibonacci-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一开始会很容易想到用递归的方式来解决，但是递归会很容易超出时间限制。因此，利用动态规划就很容易解决这个问题</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>建立一个数组，数组的第一项和第二项分别为0,1</li><li>从第三项开始一直到第N项，每一项等于前两项的和，并存放到数组中</li><li>返回数组第N项存储的值</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; N</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">N</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr=[<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">2</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i]=arr[i<span class="number">-1</span>]+arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[N];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;斐波那契数&quot;&gt;&lt;a href=&quot;#斐波那契数&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数&quot;&gt;&lt;/a&gt;斐波那契数&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：&lt;/p&gt;
&lt;p&gt;F(0) = 0,   F(1) = 1&lt;br&gt;F(N) = F(N - 1) + F(N - 2), 其中 N &amp;gt; 1.&lt;br&gt;给定 N，计算 F(N)。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：2&lt;br&gt;输出：1&lt;br&gt;解释：F(2) = F(1) + F(0) = 1 + 0 = 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：3&lt;br&gt;输出：2&lt;br&gt;解释：F(3) = F(2) + F(1) = 1 + 1 = 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：4&lt;br&gt;输出：3&lt;br&gt;解释：F(4) = F(3) + F(2) = 2 + 1 = 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;p&gt;0 ≤ N ≤ 30&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-561 数组拆分 I</title>
    <link href="http://yoursite.com/2019/08/09/leetcode-561/"/>
    <id>http://yoursite.com/2019/08/09/leetcode-561/</id>
    <published>2019-08-09T06:14:51.000Z</published>
    <updated>2019-08-09T06:24:13.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组拆分-I"><a href="#数组拆分-I" class="headerlink" title="数组拆分 I"></a>数组拆分 I</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。</p><p>示例 1:</p><blockquote><p>输入: [1,4,3,2]<br>输出: 4<br>解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).</p></blockquote><p>提示:</p><ol><li>n 是正整数,范围在 [1, 10000].</li><li>数组中的元素范围在 [-10000, 10000].<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/array-partition-i" target="_blank" rel="noopener">https://leetcode-cn.com/problems/array-partition-i</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当将整个数组排序后，第一个数必定为最小的数也是必须参加和运算的数假设为a。那么假如与这个最小的数a配对的数n并不是这个数组排序后a的后一个数b，那么b此时成为了剩下的数中最小的数因此必定也要参加和运算；但显然的是，此时a+b所组成的和运算中必定不是最大的和了</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>将原数组按从小到大进行排序</li><li>将数组中所有下标为偶数的数组元素相加得到的和返回</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arrayPairSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="number">0</span>;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i=i+<span class="number">2</span>)&#123;</span><br><span class="line">        ans+=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组拆分-I&quot;&gt;&lt;a href=&quot;#数组拆分-I&quot; class=&quot;headerlink&quot; title=&quot;数组拆分 I&quot;&gt;&lt;/a&gt;数组拆分 I&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [1,4,3,2]&lt;br&gt;输出: 4&lt;br&gt;解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n 是正整数,范围在 [1, 10000].&lt;/li&gt;
&lt;li&gt;数组中的元素范围在 [-10000, 10000].
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-905 按奇偶排序数组</title>
    <link href="http://yoursite.com/2019/08/08/leetcode-905/"/>
    <id>http://yoursite.com/2019/08/08/leetcode-905/</id>
    <published>2019-08-08T07:24:51.000Z</published>
    <updated>2019-08-08T07:35:20.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="按奇偶排序数组"><a href="#按奇偶排序数组" class="headerlink" title="按奇偶排序数组"></a>按奇偶排序数组</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。</p><p>你可以返回满足此条件的任何数组作为答案。</p><p>示例：</p><blockquote><p>输入：[3,1,2,4]<br>输出：[2,4,3,1]<br>输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。</p></blockquote><p>提示：</p><ol><li>1&lt;= A.length &lt;= 5000</li><li>0&lt;= A[i] &lt;= 5000<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sort-array-by-parity" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-array-by-parity</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>数组  遍历原数组，将奇数放到奇数数组，偶数放到偶数数组，concat后返回</li><li>双指针 left指针从前往后遍历,right指针从后往前遍历，如果left指针指向奇数而right指针指向偶数，那么两数交换，直到left&gt;=right</li></ol><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li>设定奇数数组、偶数数组</li><li>遍历原数组，将奇数放到奇数数组，偶数放到偶数数组</li><li>返回 奇数数组concat偶数数组</li></ol><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><ol><li>设定left=0,right=A.length-1</li><li>left指针从前往后遍历,right指针从后往前遍历，如果left指针指向奇数而right指针指向偶数，那么两数交换，直到left&gt;=right</li><li>返回A<h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; A</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArrayByParity = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> odd=[];</span><br><span class="line">    <span class="keyword">let</span> even=[];</span><br><span class="line">    A.forEach(<span class="function"><span class="params">value</span>=&gt;</span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(value%<span class="number">2</span>===<span class="number">0</span>)&#123;</span><br><span class="line">            even.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            odd.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> even.concat(odd);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="双指针实现"><a href="#双指针实现" class="headerlink" title="双指针实现"></a>双指针实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; A</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArrayByParity = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right=A.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[left]%<span class="number">2</span>===<span class="number">0</span>)&#123;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A[right]%<span class="number">2</span>!==<span class="number">0</span>)&#123;</span><br><span class="line">            right--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> temp=A[left];</span><br><span class="line">        A[left]=A[right];</span><br><span class="line">        A[right]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;按奇偶排序数组&quot;&gt;&lt;a href=&quot;#按奇偶排序数组&quot; class=&quot;headerlink&quot; title=&quot;按奇偶排序数组&quot;&gt;&lt;/a&gt;按奇偶排序数组&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。&lt;/p&gt;
&lt;p&gt;你可以返回满足此条件的任何数组作为答案。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：[3,1,2,4]&lt;br&gt;输出：[2,4,3,1]&lt;br&gt;输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1&amp;lt;= A.length &amp;lt;= 5000&lt;/li&gt;
&lt;li&gt;0&amp;lt;= A[i] &amp;lt;= 5000
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>引用类型</title>
    <link href="http://yoursite.com/2019/08/07/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/08/07/引用类型/</id>
    <published>2019-08-07T10:21:40.000Z</published>
    <updated>2019-08-08T07:08:24.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>新对象的创建可以通过new操作符后跟一个构造函数来创建</p></blockquote><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="built_in">Object</span>()</span><br></pre></td></tr></table></figure><h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><h3 id="创建Object实例的两个方法"><a href="#创建Object实例的两个方法" class="headerlink" title="创建Object实例的两个方法"></a>创建Object实例的两个方法</h3><h4 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="built_in">Object</span>()</span><br></pre></td></tr></table></figure><h4 id="对象字面量法"><a href="#对象字面量法" class="headerlink" title="对象字面量法"></a>对象字面量法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;<span class="attr">item</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>在使用对象字面量语法时，属性名也可以使用字符串和可计算属性名</p><p>字符串属性名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    <span class="string">'item'</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.item); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>可计算属性名(方括号语法：使用变量来访问属性)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n=<span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    [n+<span class="string">'abc'</span>]:<span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">'123abc'</span>]); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h2 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h2><h3 id="创建数组的几种方式"><a href="#创建数组的几种方式" class="headerlink" title="创建数组的几种方式"></a>创建数组的几种方式</h3><ol><li><p>Array构造函数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure></li><li><p>数组字面量法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数组的length属性"><a href="#数组的length属性" class="headerlink" title="数组的length属性"></a>数组的length属性</h3><h4 id="设置值的索引下标超过数组长度"><a href="#设置值的索引下标超过数组长度" class="headerlink" title="设置值的索引下标超过数组长度"></a>设置值的索引下标超过数组长度</h4><p>当设置值的索引下标超过数组长度时，那么数组的长度会自动加到该索引值加一的长度，并且中间未设置的元素还是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a[<span class="number">8</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[ 1, 2, 3, &lt;5 empty items&gt;, 1 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">5</span>]); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h4 id="利用数组的length属性来移除数组项和添加项"><a href="#利用数组的length属性来移除数组项和添加项" class="headerlink" title="利用数组的length属性来移除数组项和添加项"></a>利用数组的length属性来移除数组项和添加项</h4><p>当将数组的length值设置为小于原数组的length时，则会将原数组后面的几项移除掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.length=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[1]</span></span><br></pre></td></tr></table></figure><h3 id="常用的数组方法"><a href="#常用的数组方法" class="headerlink" title="常用的数组方法"></a>常用的数组方法</h3><h4 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h4><table><thead><tr><th>方法名</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>push()</td><td>接受任意参数并添加到数组末尾</td><td>修改后的数组长度</td></tr><tr><td>pop()</td><td>从数组末尾移除最后一项</td><td>被移除的项</td></tr></tbody></table><h4 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h4><table><thead><tr><th>方法名</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>shift()</td><td>移除数组的第一个项</td><td>被移除的项</td></tr><tr><td>unshift()</td><td>接受任意参数并添加到数组前端</td><td>修改后的数组长度</td></tr></tbody></table><h4 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h4><table><thead><tr><th>方法名</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>reverse()</td><td>翻转数组项的顺序</td><td>修改后的数组</td></tr><tr><td>sort()</td><td>默认是将数组元素转化为字符串进行比较并按升序排列，但可以添加<strong>比较函数</strong></td><td>修改后的数组</td></tr></tbody></table><h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h4><table><thead><tr><th>方法名</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>concat()</td><td>该方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回构建的数组</td><td>新数组</td></tr><tr><td>slice()</td><td>返回给定起始位置和结束位置之间的项（左开右闭）（该方法不会影响原始数组）</td><td>新数组</td></tr><tr><td>splice()</td><td>1.删除（删除的第一项的位置和要删除的项数） 2.插入（插入的第一项的位置，0，要插入的元素） 3.替换（替换的第一项位置，要替换的项数，要插入的项数）</td><td>从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）</td></tr></tbody></table><h4 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h4><table><thead><tr><th>方法名</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>indexOf()</td><td>从数组开头查找第一个全等于给定参数的数组项的下标，若没找到则返回-1</td><td>要查找的项在数组中的位置或-1</td></tr><tr><td>lastIndexOf()</td><td>从数组末尾查找第一个全等于给定参数的数组项的下标，若没找到则返回-1</td><td>要查找的项在数组中的位置或-1</td></tr></tbody></table><h4 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h4><table><thead><tr><th>方法名</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>every()</td><td>对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true</td><td>true或false</td></tr><tr><td>some()</td><td>对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true</td><td>true或false</td></tr><tr><td>filter()</td><td>过滤得到满足给定函数的项的组成的数组</td><td>新数组</td></tr><tr><td>forEach()</td><td>对数组中的每一项运行给定函数</td><td>undefined</td></tr><tr><td>map()</td><td>对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组</td><td>新数组</td></tr></tbody></table><h4 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h4><table><thead><tr><th>方法名</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>reduce()</td><td>从数组第一项开始，向后对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</td><td>新数组</td></tr><tr><td>reduceRight()</td><td>从数组最后一项开始，向前对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</td><td>新数组</td></tr></tbody></table><p>方法参数：<br>这两个方法都接收两个参数：一个在每一项上调用的reucer函数和（可选的）作为归并基础的初始值</p><p>reducer函数参数：<br>接收四个参数：前一个值、当前值、项的索引和数组对象。这个函数的返回的任何值都后悔作为第一个参数自动传给下一项</p><h2 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h2><p>创建日期对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleString());</span><br></pre></td></tr></table></figure><h2 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h2><h2 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h2><p>函数实际上是对象。因此函数名实际上也是一个指向函数对象的指针，并不会与某个函数绑定</p><p>因此使用不带圆括号的函数名是访问函数指针，而非调用函数</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li><p>函数声明式语法 （整体提升）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数表达式语法</p> <figure class="highlight javascript"><figcaption><span>（变量提升，给变量赋值为undefined）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h3><p>因为函数名只是一个指向函数对象的指针，因此函数也可以作为参数的值进行传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(test); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li>Boolean</li><li>Number</li><li>String</li></ol><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>每当读取一个基本类型值的时候，后台就会自动创建一个对应的基本包装类型的对象。</p><p>处理步骤：\</p><ol><li>创建基本包装类型的一个实例</li><li>在实例上调用制定的方法</li><li>销毁这个实例</li></ol><p>生命周期：<br>自动创建的基本包装类型的对象，只存在于一行代码的执行瞬间，然后立即被销毁，这意味着我们不能在运行时为基本类型值添加属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">'hello'</span>;</span><br><span class="line">a.test=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.test); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h3><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h3><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>String类型的每个实例都有一个length属性，表示字符串中包含多少个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">'hello'</span>;</span><br><span class="line">a.length=<span class="number">1</span>; <span class="comment">// 创建a的基本包装类型对象，修改掉length之后，被立即销毁</span></span><br><span class="line"><span class="built_in">console</span>.log(a.length); <span class="comment">// 5  创建a的基本包装类型对象，并返回length属性值</span></span><br></pre></td></tr></table></figure><h3 id="字符方法"><a href="#字符方法" class="headerlink" title="字符方法"></a>字符方法</h3><p>charAt()与charCodeAt()</p><h3 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h3><ol><li>concat()</li><li>slice()</li><li>substr()</li><li>substring()</li><li>indexOf()</li><li>lastIndexOf()</li><li>toLowerCase()</li><li>toUpperCase()</li><li>split()</li></ol><h2 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h2><h3 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h3><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;新对象的创建可以通过new操作符后跟一个构造函数来创建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1051 高度检查器</title>
    <link href="http://yoursite.com/2019/08/07/leetcode-1051/"/>
    <id>http://yoursite.com/2019/08/07/leetcode-1051/</id>
    <published>2019-08-07T10:15:11.000Z</published>
    <updated>2019-08-07T10:19:40.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高度检查器"><a href="#高度检查器" class="headerlink" title="高度检查器"></a>高度检查器</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。</p><p>请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。</p><p>示例：</p><blockquote><p>输入：[1,1,4,2,1,3]<br>输出：3<br>解释：<br>高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。</p></blockquote><p>提示：</p><ol><li>1&lt;= heights.length &lt;= 100</li><li>1&lt;= heights[i] &lt;= 100<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/height-checker" target="_blank" rel="noopener">https://leetcode-cn.com/problems/height-checker</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>只需比较原数组和排序后的数组的每个位置上的元素有几个不一样即可</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>复制原数组，并排序</li><li>比较原数组和排序后的数组的各个位置上的元素，若不同则ans++</li><li>返回ans</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; heights</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> heightChecker = <span class="function"><span class="keyword">function</span>(<span class="params">heights</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> heightsSort=<span class="function">(<span class="params"><span class="keyword">new</span> <span class="built_in">Array</span>(...heights</span>)).<span class="params">sort</span>(<span class="params">(a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> heights)&#123;</span><br><span class="line">        <span class="keyword">if</span>(heights[i]!==heightsSort[i])&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高度检查器&quot;&gt;&lt;a href=&quot;#高度检查器&quot; class=&quot;headerlink&quot; title=&quot;高度检查器&quot;&gt;&lt;/a&gt;高度检查器&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。&lt;/p&gt;
&lt;p&gt;请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：[1,1,4,2,1,3]&lt;br&gt;输出：3&lt;br&gt;解释：&lt;br&gt;高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1&amp;lt;= heights.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;1&amp;lt;= heights[i] &amp;lt;= 100
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-832 翻转图像</title>
    <link href="http://yoursite.com/2019/08/06/leetcode-832/"/>
    <id>http://yoursite.com/2019/08/06/leetcode-832/</id>
    <published>2019-08-06T10:13:35.000Z</published>
    <updated>2019-08-06T10:18:37.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻转图像"><a href="#翻转图像" class="headerlink" title="翻转图像"></a>翻转图像</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p> 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。</p><p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。</p><p>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。</p><p>示例 1:</p><blockquote><p>输入: [[1,1,0],[1,0,1],[0,0,0]]<br>输出: [[1,0,0],[0,1,0],[1,1,1]]<br>解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；<br>     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]</p></blockquote><p>示例 2:</p><blockquote><p>输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]<br>输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]<br>解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；<br>     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p></blockquote><p>说明:</p><ol><li>1&lt;= A.length = A[0].length &lt;= 20</li><li>0&lt;= A[i][j] &lt;= 1<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/flipping-an-image" target="_blank" rel="noopener">https://leetcode-cn.com/problems/flipping-an-image</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>利用es6数组方法map()快速地修改数组元素</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>因为是二维数组，遍历该二维数组将一维数组倒序，并且1变成0,0变成1</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; A</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flipAndInvertImage = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.map(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">        value.reverse();</span><br><span class="line">        <span class="keyword">return</span> value.map(<span class="function"><span class="params">value1</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value1===<span class="number">0</span>)&#123;</span><br><span class="line">                value1=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> value1=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> value1;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;翻转图像&quot;&gt;&lt;a href=&quot;#翻转图像&quot; class=&quot;headerlink&quot; title=&quot;翻转图像&quot;&gt;&lt;/a&gt;翻转图像&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt; 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。&lt;/p&gt;
&lt;p&gt;水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。&lt;/p&gt;
&lt;p&gt;反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [[1,1,0],[1,0,1],[0,0,0]]&lt;br&gt;输出: [[1,0,0],[0,1,0],[1,1,1]]&lt;br&gt;解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；&lt;br&gt;     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]&lt;br&gt;输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]&lt;br&gt;解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；&lt;br&gt;     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1&amp;lt;= A.length = A[0].length &amp;lt;= 20&lt;/li&gt;
&lt;li&gt;0&amp;lt;= A[i][j] &amp;lt;= 1
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-345 反转字符串中的元音字母</title>
    <link href="http://yoursite.com/2019/08/05/leetcode-345/"/>
    <id>http://yoursite.com/2019/08/05/leetcode-345/</id>
    <published>2019-08-05T06:58:17.000Z</published>
    <updated>2019-08-05T07:05:00.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转字符串中的元音字母"><a href="#反转字符串中的元音字母" class="headerlink" title="反转字符串中的元音字母"></a>反转字符串中的元音字母</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p><p>示例 1:</p><blockquote><p>输入: “hello”<br>输出: “holle”</p></blockquote><p>示例 2:</p><blockquote><p>输入: “leetcode”<br>输出: “leotcede”</p></blockquote><p>说明:<br>元音字母不包含字母”y”。</p><a id="more"></a><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-vowels-of-a-string</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>元音字母一共有5个，分别为’a’,’e’,’i’,’o’,’u’; 当然该题要注意元音字母对应的大写形式也算</p><p>因此，使用双指针，一个在首，一个在尾，当两指针未相遇时，如果两个指针指的都是元音字母或其大写形式，那么就交换两个字母；如果不是，那么就左指针向后，右指针往前</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>建立left,right双指针；将字符串s转换为字符串数组</li><li>left与right双指针，一个在首，一个在尾，当两指针未相遇时，如果两个指针指的都是元音字母或其大写形式，那么就交换两个字母；如果不是，那么就左指针向后，右指针往前</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseVowels = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s=s.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> yuan=[<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>];</span><br><span class="line">    <span class="keyword">let</span> right=s.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(yuan.includes(s[left].toLowerCase())&amp;&amp;yuan.includes(s[right].toLowerCase()))&#123;</span><br><span class="line">            [s[left],s[right]]=[s[right],s[left]];</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!yuan.includes(s[left].toLowerCase())) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!yuan.includes(s[right].toLowerCase())) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;反转字符串中的元音字母&quot;&gt;&lt;a href=&quot;#反转字符串中的元音字母&quot; class=&quot;headerlink&quot; title=&quot;反转字符串中的元音字母&quot;&gt;&lt;/a&gt;反转字符串中的元音字母&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;编写一个函数，以字符串作为输入，反转该字符串中的元音字母。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: “hello”&lt;br&gt;输出: “holle”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: “leetcode”&lt;br&gt;输出: “leotcede”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明:&lt;br&gt;元音字母不包含字母”y”。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-933 最近的请求次数</title>
    <link href="http://yoursite.com/2019/08/04/leetcode-933/"/>
    <id>http://yoursite.com/2019/08/04/leetcode-933/</id>
    <published>2019-08-04T08:53:26.000Z</published>
    <updated>2019-08-04T08:58:57.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近的请求次数"><a href="#最近的请求次数" class="headerlink" title="最近的请求次数"></a>最近的请求次数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>写一个 RecentCounter 类来计算最近的请求。</p><p>它只有一个方法：ping(int t)，其中 t 代表以毫秒为单位的某个时间。</p><p>返回从 3000 毫秒前到现在的 ping 数。</p><p>任何处于 [t - 3000, t] 时间范围之内的 ping 都将会被计算在内，包括当前（指 t 时刻）的 ping。</p><p>保证每次对 ping 的调用都使用比之前更大的 t 值。</p><p>示例：</p><blockquote><p>输入：inputs = [“RecentCounter”,”ping”,”ping”,”ping”,”ping”], inputs = [[],[1],[100],[3001],[3002]]<br>输出：[null,1,2,3,3]</p></blockquote><p>提示：</p><ol><li>每个测试用例最多调用 10000 次 ping。</li><li>每个测试用例会使用严格递增的 t 值来调用 ping。</li><li>每次调用 ping 都有 1 &lt;= t &lt;= 10^9。<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/number-of-recent-calls" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-recent-calls</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>该题目的意思就是计算在当前时刻往前3000毫秒到此时（即[t - 3000, t]）的所有Ping的数量</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>在RecentCounter构造函数中设置一个队列queue用来保存按时间顺序到来的ping的时间</li><li>利用出队列来删去当前队列中小于当前时间-3000毫秒的队列项</li><li>返回队列长度</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> RecentCounter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.queue=[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; t</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">RecentCounter.prototype.ping = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue=<span class="keyword">this</span>.queue;</span><br><span class="line">    <span class="keyword">if</span>(t===<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        queue.push(t);</span><br><span class="line">        <span class="keyword">while</span>(queue[<span class="number">0</span>]&lt;t<span class="number">-3000</span>)&#123;</span><br><span class="line">            queue.shift();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new RecentCounter()</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.ping(t)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最近的请求次数&quot;&gt;&lt;a href=&quot;#最近的请求次数&quot; class=&quot;headerlink&quot; title=&quot;最近的请求次数&quot;&gt;&lt;/a&gt;最近的请求次数&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;写一个 RecentCounter 类来计算最近的请求。&lt;/p&gt;
&lt;p&gt;它只有一个方法：ping(int t)，其中 t 代表以毫秒为单位的某个时间。&lt;/p&gt;
&lt;p&gt;返回从 3000 毫秒前到现在的 ping 数。&lt;/p&gt;
&lt;p&gt;任何处于 [t - 3000, t] 时间范围之内的 ping 都将会被计算在内，包括当前（指 t 时刻）的 ping。&lt;/p&gt;
&lt;p&gt;保证每次对 ping 的调用都使用比之前更大的 t 值。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：inputs = [“RecentCounter”,”ping”,”ping”,”ping”,”ping”], inputs = [[],[1],[100],[3001],[3002]]&lt;br&gt;输出：[null,1,2,3,3]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个测试用例最多调用 10000 次 ping。&lt;/li&gt;
&lt;li&gt;每个测试用例会使用严格递增的 t 值来调用 ping。&lt;/li&gt;
&lt;li&gt;每次调用 ping 都有 1 &amp;lt;= t &amp;lt;= 10^9。
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>变量、作用域和内存问题</title>
    <link href="http://yoursite.com/2019/08/04/%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/08/04/变量、作用域和内存问题/</id>
    <published>2019-08-04T02:57:21.000Z</published>
    <updated>2019-08-04T08:38:02.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型值和引用类型值的存储与复制"><a href="#基本类型值和引用类型值的存储与复制" class="headerlink" title="基本类型值和引用类型值的存储与复制"></a>基本类型值和引用类型值的存储与复制</h2><h3 id="变量类型与内存的关系"><a href="#变量类型与内存的关系" class="headerlink" title="变量类型与内存的关系"></a>变量类型与内存的关系</h3><h4 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h4><p>基本数据类型保存在栈内存中，因为基本数据类型占用空间小、大小固定，通过<strong>按值来访问</strong>，属于被频繁使用的数据</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/25/16b8c0b2fba2bdef?imageView2/0/w/1280/h/960/ignore-error/1" alt="栈内存"></p><h4 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h4><p>引用数据类型存储在<strong>堆内存</strong>中，因为引用数据类型占据空间大、大小不固定。 如果存储在栈中，将会影响程序运行的性能； 引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。 当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/25/16b8c0b5752823f6?imageView2/0/w/1280/h/960/ignore-error/1" alt="堆内存"></p><h3 id="变量复制"><a href="#变量复制" class="headerlink" title="变量复制"></a>变量复制</h3><h4 id="基本类型值的变量复制"><a href="#基本类型值的变量复制" class="headerlink" title="基本类型值的变量复制"></a>基本类型值的变量复制</h4><p>如果从一个变量向另一个变量复制基本类型的值，那么就会在<strong>变量对象</strong>（每个执行环境都有一个与之相关联的变量对象，当前环境中的所有变量和函数都会保存在这个对象中）上创建一个新的值，然后把该值复制到为新变量分配的位置上。</p><p><em>基本类型变量复制完毕后，两个变量是相互独立的。因为两个变量占据的是不同的栈内存空间。</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> b=a;</span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">// 20,20</span></span><br><span class="line">b=<span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">// 20,30</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/6/25/16b8c0b73d4ebd08?imageView2/0/w/1280/h/960/ignore-error/1" alt></p><h4 id="引用数据类型值的变量复制"><a href="#引用数据类型值的变量复制" class="headerlink" title="引用数据类型值的变量复制"></a>引用数据类型值的变量复制</h4><p>当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到位新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。</p><p>两个变量实际上引用的是同一个对象，因此改变其中一个变量，就会影响另一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m=&#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> n=m;</span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">//&#123;a:10,b:20&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/6/25/16b8c0b9df03d885?imageView2/0/w/1280/h/960/ignore-error/1" alt></p><h4 id="函数的参数传递相当于变量复制"><a href="#函数的参数传递相当于变量复制" class="headerlink" title="函数的参数传递相当于变量复制"></a>函数的参数传递相当于变量复制</h4><p>es中所有函数的参数传递都是按值传递的。</p><p>基本类型值的参数传递就相当于基本类型值的变量复制，即创建了一个新的局部变量，值为传过来的参数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n); <span class="comment">//1</span></span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line">test(a);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>引用类型值的参数传递也相当于引用类型值的变量传递，即创建了一个新的局部变量，保存的是传过来的参数的指针地址，两个变量在栈内存中有着不同的内存空间，但是指向堆内存中的同一个对象。</p><p>函数内部变量有变化时（指的是不改变该变量的指针指向地址）也会影响函数外部对象</p><p>而当该变量的指针指向地址改变后，两个变量就不在指向了同一个变量，因此之后函数内部变量的变化不会体现在函数外部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;<span class="attr">item</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a===n); <span class="comment">//true</span></span><br><span class="line">    n=&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(a===n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h3><h4 id="执行环境-执行上下文"><a href="#执行环境-执行上下文" class="headerlink" title="执行环境(执行上下文)"></a>执行环境(执行上下文)</h4><p>执行环境可能有三种情况</p><ol><li>全局执行环境(浏览器中的window对象和node环境中的global对象) —— 代码第一次执行的默认环境</li><li>函数执行环境 —— 执行流进入函数体<blockquote><p>当执行流进入一个函数时，函数的执行环境会被推入一个环境中。当该函数执行完毕后，栈将其环境弹出，把控制权返回给之前的执行环境</p></blockquote></li><li>Eval code（Eval code）——代码在eval函数内部执行</li></ol><p>每个执行环境中都有一个与之关联的变量对象，用来存储在该环境中定义的变量和函数(但是我们无法访问到这个变量对象，是解析器在后台处理数据时会使用到)</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>对于作用域，我的理解是它在某种程度上相当于执行环境，每个作用域都有当前作用域的变量和对象。但是作用域之间的变量和函数时相互隔离的，也就说不同作用域下的同名变量不会产生冲突</p><h5 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h5><p>当代码在一个环境中执行时，会创建变量对象的一个作用链。</p><p>作用域链的用途：是用来保证对执行环境有权访问的所有变量和函数的有序访问。</p><p>作用域的前端，始终都是当前的执行环境的变量对象。如果这个环境是函数，那么将其环境对象作为变量对象。作用链中的下一个对象是包含当前执行环境的执行环境的变量对象。这样，一直延续到全局执行环境。全局执行环境的变量对象始终都是作用域链的最后一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> m=<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(m); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">    <span class="built_in">console</span>.log(m); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h5 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h5><p>有两种方式可以延长作用域链</p><ol><li>try-catch语句的catch块</li><li>with语句</li></ol><p>这两个语句都会在当前作用域链的前端添加一个变量对象。</p><p>对with语句来说，会将指定的对象添加到作用域链中。</p><p>对catch语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明</p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>JavaScript 具有自动垃圾收集机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。</p><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>JavaScript中最常用的垃圾收集方式就是标记清除，当变量进入环境后，就将这个变量标记为“进入环境”；而当变量离开环境时，就将其标记为“离开环境”。从而垃圾回收器完成垃圾回收工作</p><h3 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h3><p>优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。一旦数据不再有用，最好将其值设置为null来释放其引用————这个做法叫做解除引用。</p><p>局部变量在离开执行环境是会自动被解除引用。</p><p>因此我们通常来解除全局执行环境中的引用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本类型值和引用类型值的存储与复制&quot;&gt;&lt;a href=&quot;#基本类型值和引用类型值的存储与复制&quot; class=&quot;headerlink&quot; title=&quot;基本类型值和引用类型值的存储与复制&quot;&gt;&lt;/a&gt;基本类型值和引用类型值的存储与复制&lt;/h2&gt;&lt;h3 id=&quot;变量类型与
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-237 删除链表中的节点</title>
    <link href="http://yoursite.com/2019/08/03/leetcode-237/"/>
    <id>http://yoursite.com/2019/08/03/leetcode-237/</id>
    <published>2019-08-03T07:10:36.000Z</published>
    <updated>2019-08-03T07:16:57.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除链表中的节点"><a href="#删除链表中的节点" class="headerlink" title="删除链表中的节点"></a>删除链表中的节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><p>现有一个链表 – head = [4,5,1,9]，它可以表示为:</p><p>示例 1:</p><blockquote><p>输入: head = [4,5,1,9], node = 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p></blockquote><p>示例 2:</p><blockquote><p>输入: head = [4,5,1,9], node = 1<br>输出: [4,5,9]<br>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p></blockquote><p>说明:</p><ol><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。<a id="more"></a>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-node-in-a-linked-list</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li></ol><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一开始看到这个题目也是傻了一下，为什么只是传入一个要删除的节点，而不传入整个链表。后来一想，题目给定的初始链表中，每个节点的next存在的指向关系是一定的。那么我们就可以不需要考虑要删除节点之前的节点，只需要将要删除的节点的val值和next指向改变就可以了</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>改变要删除节点的val值为其下一个节点的val值</li><li>改变要删除节点的next指向为其下一个节点的下一个节点</li></ol><h2 id="Coding实现"><a href="#Coding实现" class="headerlink" title="Coding实现"></a>Coding实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; node</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    node.val=node.next.val;</span><br><span class="line">    node.next=node.next.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;删除链表中的节点&quot;&gt;&lt;a href=&quot;#删除链表中的节点&quot; class=&quot;headerlink&quot; title=&quot;删除链表中的节点&quot;&gt;&lt;/a&gt;删除链表中的节点&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。&lt;/p&gt;
&lt;p&gt;现有一个链表 – head = [4,5,1,9]，它可以表示为:&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: head = [4,5,1,9], node = 5&lt;br&gt;输出: [4,1,9]&lt;br&gt;解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: head = [4,5,1,9], node = 1&lt;br&gt;输出: [4,5,9]&lt;br&gt;解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 5 -&amp;gt; 9.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链表至少包含两个节点。&lt;/li&gt;
&lt;li&gt;链表中所有节点的值都是唯一的。&lt;/li&gt;
&lt;li&gt;给定的节点为非末尾节点并且一定是链表中的一个有效节点。&lt;/li&gt;
&lt;li&gt;不要从你的函数中返回任何结果。
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>arguments与模拟函数重载</title>
    <link href="http://yoursite.com/2019/08/03/arguments%E4%B8%8E%E6%A8%A1%E6%8B%9F%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/08/03/arguments与模拟函数重载/</id>
    <published>2019-08-03T05:57:50.000Z</published>
    <updated>2019-08-03T06:51:51.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>arguments对象是所有（非箭头）函数中都可用的局部变量。</p><p>通过该对象可以访问参数数组。因为此对象包含传递给函数的每个参数，第一个参数在索引0处。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">//Arguments &#123; 0: 1, 1: 2, 2: 3, … &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>由此可以看到，arguments对象并不是Array的实例，它是类数组对象。因此，可以通过方括号语法访问它的每一个元素</p><blockquote><p>arguments对象内的属性值永远与对应命名参数的值保持同步</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">//1</span></span><br><span class="line">    num=<span class="number">11</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">//11</span></span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="模拟函数重载"><a href="#模拟函数重载" class="headerlink" title="模拟函数重载"></a>模拟函数重载</h2><h3 id="重载的概念"><a href="#重载的概念" class="headerlink" title="重载的概念"></a>重载的概念</h3><p>在Java语言中，函数或者方法有相同的名称，但是参数的类型或数量不同，这样的同名不同参数的函数或者方法之间，互相称之为重载函数。</p><h3 id="为什么js没有重载"><a href="#为什么js没有重载" class="headerlink" title="为什么js没有重载"></a>为什么js没有重载</h3><p>然而，js中并没有重载的概念，因为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">a(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>如果定义了多个同名函数，那么该名字只属于后定义的函数，所以js中不能像Java一样有传统意义上的重载</p><h3 id="js模拟函数重载"><a href="#js模拟函数重载" class="headerlink" title="js模拟函数重载"></a>js模拟函数重载</h3><p>其实，通过arguments,我们就可以通过检查传入函数中的参数类型和数量来做出不同的反应，从而模拟方法的重载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a(); <span class="comment">// 0</span></span><br><span class="line">a(<span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;arguments&quot;&gt;&lt;a href=&quot;#arguments&quot; class=&quot;headerlink&quot; title=&quot;arguments&quot;&gt;&lt;/a&gt;arguments&lt;/h2&gt;&lt;p&gt;arguments对象是所有（非箭头）函数中都可用的局部变量。&lt;/p&gt;
&lt;p&gt;通过该
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>循环 (for...of与for...in)</title>
    <link href="http://yoursite.com/2019/08/03/%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/08/03/循环/</id>
    <published>2019-08-03T05:14:43.000Z</published>
    <updated>2019-08-03T05:55:10.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="循环语句类型"><a href="#循环语句类型" class="headerlink" title="循环语句类型"></a>循环语句类型</h2><ol><li>for 语句</li><li>do…while 语句</li><li>while 语句</li><li>labeled 语句</li><li>break 语句</li><li>continue 语句</li><li>for…in 语句</li><li>for…of 语句</li></ol><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><p>for…in 语句循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items=&#123;</span><br><span class="line">    item1:<span class="number">1</span>,</span><br><span class="line">    item2:<span class="number">2</span>,</span><br><span class="line">    item3:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a <span class="keyword">in</span> items)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// item1,item2,item3</span></span><br><span class="line">    <span class="built_in">console</span>.log(items[a]); <span class="comment">//1,2,3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><p>for…of语句在<strong>可迭代的对象</strong>(在es6中，所有的集合对象(数组、Set集合及Map集合)和字符串都是可迭代对象)上创建了一个循环 ，对值的每一个独特的属性调用一个将被执行的自定义的和语句挂钩的迭代。</p><p>for…of循环每执行一次都会调用可迭代对象的next()方法，并将迭代器返回的结果对象的value属性存储在一个变量中，循环将持续执行这一过程直到返回对象的done属性的值为true</p><p>与 for…in 循环遍历的结果是数组元素的下标不同的是， for…of 遍历的结果是元素的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'string'</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span>=new Set([1,'a',3]);</span><br><span class="line">let map=new Map([['a',1],['b',2]]);</span><br><span class="line">//遍历数组</span><br><span class="line">for(let a of arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//4,5,6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> s <span class="keyword">of</span> str)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s); <span class="comment">//s,t,r,i,n,g</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历set集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> <span class="keyword">set</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">//1,'a',3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历map集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> m <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(m); <span class="comment">//[ 'a', 1 ],[ 'b', 2 ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>倘若是遍历普通对象(非迭代对象)，那么使用for…in最佳，遍历得到属性名</li><li>倘若是遍历可迭代对象，那么根据需求来，如果不需要一些下标信息（例如set集合，字符串）那么使用for…of最佳</li><li>如果是数组和map，那么使用forEach会更加方便</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;循环语句类型&quot;&gt;&lt;a href=&quot;#循环语句类型&quot; class=&quot;headerlink&quot; title=&quot;循环语句类型&quot;&gt;&lt;/a&gt;循环语句类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;for 语句&lt;/li&gt;
&lt;li&gt;do…while 语句&lt;/li&gt;
&lt;li&gt;while 语句&lt;/l
      
    
    </summary>
    
      <category term="javaScript基础" scheme="http://yoursite.com/categories/javaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础语法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
