<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-09T12:34:08.347Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Angel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-169 求众数</title>
    <link href="http://yoursite.com/2019/07/09/leetcode-169/"/>
    <id>http://yoursite.com/2019/07/09/leetcode-169/</id>
    <published>2019-07-09T05:18:25.000Z</published>
    <updated>2019-07-09T12:34:08.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求众数"><a href="#求众数" class="headerlink" title="求众数"></a>求众数</h1><h2 id="核心方法：哈希表"><a href="#核心方法：哈希表" class="headerlink" title="核心方法：哈希表"></a>核心方法：哈希表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p></blockquote><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p><a id="more"></a><blockquote><p>示例 1:</p></blockquote><p>输入: [3,2,3]<br>输出: 3</p><blockquote><p>示例 2:</p></blockquote><p>输入: [2,2,1,1,1,2,2]<br>输出: 2</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/majority-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/majority-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><blockquote><p>利用哈希表这一数据结构来存储每个数的出现次数。元素作为键名，他们所出现的次数作为键值，进行存储。</p></blockquote><ol><li><p>遍历给定数组，若当前数组元素未在哈希表map中（map.has(key)===false），则以该元素为键名添加该元素，并置键值为1（map.set(value,1)）；若已存在，则更新该键值（键值加1:map.set(value,map.get(value)+1)）</p></li><li><p>遍历哈希表map，找到键值最大的那个键名并返回</p></li></ol><h3 id="coding实现"><a href="#coding实现" class="headerlink" title="coding实现"></a>coding实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> maxCount=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> num=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">let</span> numsMap=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">   nums.forEach(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!numsMap.has(value))&#123;</span><br><span class="line">        numsMap.set(value,<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">       numsMap.set(value,numsMap.get(value)+<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   numsMap.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(value&gt;maxCount)&#123;</span><br><span class="line">       maxCount=value;</span><br><span class="line">       num=key;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;求众数&quot;&gt;&lt;a href=&quot;#求众数&quot; class=&quot;headerlink&quot; title=&quot;求众数&quot;&gt;&lt;/a&gt;求众数&lt;/h1&gt;&lt;h2 id=&quot;核心方法：哈希表&quot;&gt;&lt;a href=&quot;#核心方法：哈希表&quot; class=&quot;headerlink&quot; title=&quot;核心方法：哈希表&quot;&gt;&lt;/a&gt;核心方法：哈希表&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以假设数组是非空的，并且给定的数组总是存在众数。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-167 两数之和|| - 输入有序数组</title>
    <link href="http://yoursite.com/2019/07/08/leetcode-167/"/>
    <id>http://yoursite.com/2019/07/08/leetcode-167/</id>
    <published>2019-07-08T10:18:03.000Z</published>
    <updated>2019-07-09T12:34:08.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和-输入有序数组"><a href="#两数之和-输入有序数组" class="headerlink" title="两数之和|| - 输入有序数组"></a>两数之和|| - 输入有序数组</h1><h2 id="核心方法：双指针"><a href="#核心方法：双指针" class="headerlink" title="核心方法：双指针"></a>核心方法：双指针</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><p>说明:</p><p>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p></blockquote><a id="more"></a><blockquote><p>示例:</p><p>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><blockquote><p>   题目给定的是有序数组，所以使用双指针方法较为方便。设定min指向第一个数组元素（也就是当前最小数），max指向最后一个数组元素。令sum=numbers[min]+numbers[max]</p><p>   循环比较sum与target是否相等，若想等则输出。小于target则代表min指向的元素值比输出值要小，则min++;反之，则max–;</p></blockquote><h3 id="coding实现"><a href="#coding实现" class="headerlink" title="coding实现"></a>coding实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> min=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">let</span> max=numbers.length<span class="number">-1</span>;</span><br><span class="line">   <span class="keyword">let</span> sum;</span><br><span class="line">   <span class="keyword">while</span>((sum=numbers[min]+numbers[max])!==target)&#123;</span><br><span class="line">      <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">        min++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        max--;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> [min+<span class="number">1</span>,max+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;两数之和-输入有序数组&quot;&gt;&lt;a href=&quot;#两数之和-输入有序数组&quot; class=&quot;headerlink&quot; title=&quot;两数之和|| - 输入有序数组&quot;&gt;&lt;/a&gt;两数之和|| - 输入有序数组&lt;/h1&gt;&lt;h2 id=&quot;核心方法：双指针&quot;&gt;&lt;a href=&quot;#核心方法：双指针&quot; class=&quot;headerlink&quot; title=&quot;核心方法：双指针&quot;&gt;&lt;/a&gt;核心方法：双指针&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;/p&gt;
&lt;p&gt;函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。&lt;/p&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;返回的下标值（index1 和 index2）不是从零开始的。&lt;br&gt;你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode题解与算法" scheme="http://yoursite.com/categories/leetcode%E9%A2%98%E8%A7%A3%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
